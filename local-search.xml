<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数字电子技术基础重点</title>
    <link href="/2024/07/21/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80%E9%87%8D%E7%82%B9/"/>
    <url>/2024/07/21/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80%E9%87%8D%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<iframe src="/myjs/pdfjs/web/viewer.html?file=/dl/a.pdf" style="width:100%;height:950px"></iframe>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>曲园</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将Python代码文件封装成库的步骤</title>
    <link href="/2024/07/21/%E5%B0%86Python%E4%BB%A3%E7%A0%81%E6%96%87%E4%BB%B6%E5%B0%81%E8%A3%85%E6%88%90%E5%BA%93%E7%9A%84%E6%AD%A5%E9%AA%A4/"/>
    <url>/2024/07/21/%E5%B0%86Python%E4%BB%A3%E7%A0%81%E6%96%87%E4%BB%B6%E5%B0%81%E8%A3%85%E6%88%90%E5%BA%93%E7%9A%84%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="创建项目目录结构">1. 创建项目目录结构</h3><p>首先，我们需要创建一个项目目录，用于存放我们的代码文件和库文件。可以按照以下结构创建：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">my_library/<br>    ├── my_module/<br>    │   ├── __init__.py<br>    │   ├── my_code.py<br>    ├── setup.py<br>1.2.3.4.5.<br></code></pre></td></tr></table></figure><p>在这个目录结构中，<code>my_module</code>是我们要封装成库的模块，<code>my_code.py</code>是我们的代码文件，<code>__init__.py</code>是一个空文件，用于标识这个目录是一个Python包，<code>setup.py</code>是用于构建和打包库的文件。</p><h3 id="编写代码文件">2. 编写代码文件</h3><p>在 <code>my_code.py</code> 文件中编写你的代码，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># my_code.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Hello, <span class="hljs-subst">&#123;name&#125;</span>!&quot;</span><br><span class="hljs-number">1.2</span><span class="hljs-number">.3</span><span class="hljs-number">.4</span>.<br></code></pre></td></tr></table></figure><h3 id="创建setup.py文件">3. 创建setup.py文件</h3><p>创建 <code>setup.py</code>文件，用于描述你的库信息和打包配置，示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> setuptools <span class="hljs-keyword">import</span> setup, find_packages<br><br>setup(<br>    name=<span class="hljs-string">&#x27;my_library&#x27;</span>,<br>    version=<span class="hljs-string">&#x27;0.1&#x27;</span>,<br>    packages=find_packages(),<br>)<br><span class="hljs-number">1.2</span><span class="hljs-number">.3</span><span class="hljs-number">.4</span><span class="hljs-number">.5</span><span class="hljs-number">.6</span><span class="hljs-number">.7</span>.<br></code></pre></td></tr></table></figure><h3 id="构建并安装库">4. 构建并安装库</h3><p>在命令行中进入项目目录，运行以下命令来构建并安装你的库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python setup.py sdist<br>$ pip install dist/my_library-0.1.tar.gz<br>1.2.<br></code></pre></td></tr></table></figure><h3 id="使用你的库">5. 使用你的库</h3><p>现在你可以在其他项目中使用你的库了，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> my_module.my_code <span class="hljs-keyword">import</span> greet<br><br>message = greet(<span class="hljs-string">&quot;Alice&quot;</span>)<br><span class="hljs-built_in">print</span>(message)<br><span class="hljs-number">1.2</span><span class="hljs-number">.3</span><span class="hljs-number">.4</span>.<br></code></pre></td></tr></table></figure><p>通过以上步骤，你已经成功将你的Python代码文件封装成了一个库，可以方便地在其他项目中重复使用。</p><p>通过以上步骤，你已经成功将你的Python代码文件封装成了一个库，可以方便地在其他项目中重复使用。希望这篇文章对你有所帮助，祝你编程顺利！</p>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>曲园</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++第4章示例程序</title>
    <link href="/2024/07/07/C-%E7%AC%AC4%E7%AB%A0%E7%A4%BA%E4%BE%8B%E7%A8%8B%E5%BA%8F/"/>
    <url>/2024/07/07/C-%E7%AC%AC4%E7%AB%A0%E7%A4%BA%E4%BE%8B%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="section">4.2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"> <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Complex</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Complex</span>()&#123;real=<span class="hljs-number">0</span>;imag=<span class="hljs-number">0</span>;&#125;<br><span class="hljs-built_in">Complex</span>(<span class="hljs-type">double</span> r,<span class="hljs-type">double</span> i)&#123;real=r;imag=i;&#125;<br>Complex <span class="hljs-keyword">operator</span>+(Complex &amp;c2);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">double</span> real;<br><span class="hljs-type">double</span> imag;<br>&#125;;<br>Complex Complex::<span class="hljs-keyword">operator</span>+(Complex &amp;c2)<br>&#123;<br>Complex c;<br>c.real=real+c<span class="hljs-number">2.</span>real;<br>c.imag=imag+c<span class="hljs-number">2.</span>imag;<br><span class="hljs-keyword">return</span> c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Complex::display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;(&quot;</span>&lt;&lt;real&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;imag&lt;&lt;<span class="hljs-string">&quot;i)&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Complex <span class="hljs-title">c1</span><span class="hljs-params">(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)</span>,<span class="hljs-title">c2</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">-10</span>)</span>,c3</span>;<br>c3=c1+c2;<br>cout&lt;&lt;<span class="hljs-string">&quot;c1=&quot;</span>;c<span class="hljs-number">1.</span><span class="hljs-built_in">display</span>();<br>cout&lt;&lt;<span class="hljs-string">&quot;c2=&quot;</span>;c<span class="hljs-number">2.</span><span class="hljs-built_in">display</span>();<br>cout&lt;&lt;<span class="hljs-string">&quot;c1+c2=&quot;</span>;c<span class="hljs-number">3.</span><span class="hljs-built_in">display</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="section-1">4.3</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Complex</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Complex</span>()&#123;real=<span class="hljs-number">0</span>;imag=<span class="hljs-number">0</span>;&#125;<br><span class="hljs-built_in">Complex</span>(<span class="hljs-type">double</span> r,<span class="hljs-type">double</span> i)&#123;real=r;imag=i;&#125;<br><span class="hljs-keyword">friend</span> Complex <span class="hljs-keyword">operator</span>+(Complex &amp;c1,Complex &amp;c2);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">double</span> real;<br><span class="hljs-type">double</span> imag;<br>&#125;;<br>Complex <span class="hljs-keyword">operator</span>+(Complex &amp;c1,Complex &amp;c2)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Complex</span>(c<span class="hljs-number">1.</span>real+c<span class="hljs-number">2.</span>real,c<span class="hljs-number">1.</span>imag+c<span class="hljs-number">2.</span>imag);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Complex::display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;(&quot;</span>&lt;&lt;real&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;imag&lt;&lt;<span class="hljs-string">&quot;i)&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Complex <span class="hljs-title">c1</span><span class="hljs-params">(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)</span>,<span class="hljs-title">c2</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">-10</span>)</span>,c3</span>;<br>c3=c1+c2;<br>cout&lt;&lt;<span class="hljs-string">&quot;c1=&quot;</span>;c<span class="hljs-number">1.</span><span class="hljs-built_in">display</span>();<br>cout&lt;&lt;<span class="hljs-string">&quot;c2=&quot;</span>;c<span class="hljs-number">2.</span><span class="hljs-built_in">display</span>();<br>cout&lt;&lt;<span class="hljs-string">&quot;c1+c2=&quot;</span>;c<span class="hljs-number">3.</span><span class="hljs-built_in">display</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="section-2">4.5</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">String</span>()&#123;p=<span class="hljs-literal">NULL</span>;&#125;<br><span class="hljs-built_in">String</span>(<span class="hljs-type">char</span> *str);<br><span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;(String &amp;string1,String &amp;string2);<br><span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(String &amp;string1,String &amp;string2);<br><span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(String &amp;string1,String &amp;string2);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">char</span> *p;<br>&#125;;<br>String::<span class="hljs-built_in">String</span>(<span class="hljs-type">char</span> *str)<br>&#123;<br>p=str;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">String::display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout&lt;&lt;p;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;(String &amp;string1,String &amp;string2)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(string<span class="hljs-number">1.</span>p,string<span class="hljs-number">2.</span>p)&gt;<span class="hljs-number">0</span>)<br>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br><span class="hljs-keyword">else</span><br>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(String &amp;string1,String &amp;string2)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(string<span class="hljs-number">1.</span>p,string<span class="hljs-number">2.</span>p)&lt;<span class="hljs-number">0</span>)<br>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br><span class="hljs-keyword">else</span><br>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(String &amp;string1,String &amp;string2)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(string<span class="hljs-number">1.</span>p,string<span class="hljs-number">2.</span>p)==<span class="hljs-number">0</span>)<br>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br><span class="hljs-keyword">else</span><br>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">compare</span><span class="hljs-params">(String &amp;string1,String &amp;string2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">operator</span>&gt;(string1,string2)==<span class="hljs-number">1</span>)&#123;<br>string<span class="hljs-number">1.</span><span class="hljs-built_in">display</span>();cout&lt;&lt;<span class="hljs-string">&quot;&lt;&quot;</span>;string<span class="hljs-number">2.</span><span class="hljs-built_in">display</span>();<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">operator</span>&lt;(string1,string2)==<span class="hljs-number">1</span>)&#123;<br>string<span class="hljs-number">2.</span><span class="hljs-built_in">display</span>();cout&lt;&lt;<span class="hljs-string">&quot;&lt;&quot;</span>;string<span class="hljs-number">1.</span><span class="hljs-built_in">display</span>();<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">operator</span>==(string1,string2)==<span class="hljs-number">1</span>)&#123;<br>string<span class="hljs-number">1.</span><span class="hljs-built_in">display</span>();cout&lt;&lt;<span class="hljs-string">&quot;==&quot;</span>;string<span class="hljs-number">2.</span><span class="hljs-built_in">display</span>();<br>&#125;<br>&#125;<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">String <span class="hljs-title">string1</span><span class="hljs-params">(<span class="hljs-string">&quot;Hello&quot;</span>)</span>,<span class="hljs-title">string2</span><span class="hljs-params">(<span class="hljs-string">&quot;Book&quot;</span>)</span>,<span class="hljs-title">string3</span><span class="hljs-params">(<span class="hljs-string">&quot;Computer&quot;</span>)</span>,<span class="hljs-title">string4</span><span class="hljs-params">(<span class="hljs-string">&quot;Hello&quot;</span>)</span></span>;<br><span class="hljs-built_in">compare</span>(string1,string2);<br><span class="hljs-built_in">compare</span>(string2,string3);<br><span class="hljs-built_in">compare</span>(string1,string4);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="section-3">4.6</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Time</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Time</span>()&#123;minute=<span class="hljs-number">0</span>;sec=<span class="hljs-number">0</span>;&#125;<br><span class="hljs-built_in">Time</span>(<span class="hljs-type">int</span> m,<span class="hljs-type">int</span> s):<span class="hljs-built_in">minute</span>(m),<span class="hljs-built_in">sec</span>(s)&#123;&#125;<br>Time <span class="hljs-keyword">operator</span>++();<br>Time <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>&#123;cout&lt;&lt;minute&lt;&lt;<span class="hljs-string">&quot;:&quot;</span>&lt;&lt;sec&lt;&lt;endl;&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> minute;<br><span class="hljs-type">int</span> sec;<br>&#125;;<br>Time Time::<span class="hljs-keyword">operator</span>++()<br>&#123;<br><span class="hljs-keyword">if</span>(++sec&gt;=<span class="hljs-number">60</span>)&#123;<br>sec-=<span class="hljs-number">60</span>;<br>++minute;<br>&#125;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<span class="hljs-comment">//返回自加后的当前对象</span><br>&#125;<br>Time Time::<span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>)<br>&#123;<br><span class="hljs-function">Time <span class="hljs-title">temp</span><span class="hljs-params">(*<span class="hljs-keyword">this</span>)</span></span>;<br><span class="hljs-keyword">if</span>(++sec&gt;=<span class="hljs-number">60</span>)&#123;<br>sec-=<span class="hljs-number">60</span>;<br>++minute;<br>&#125;<br><span class="hljs-keyword">return</span> temp;<span class="hljs-comment">//返回自加后的当前对象</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Time <span class="hljs-title">time1</span><span class="hljs-params">(<span class="hljs-number">34</span>,<span class="hljs-number">59</span>)</span>,time2</span>;<br>cout&lt;&lt;<span class="hljs-string">&quot;time1:&quot;</span>;time<span class="hljs-number">1.</span><span class="hljs-built_in">display</span>();<br>++time1;<br>cout&lt;&lt;<span class="hljs-string">&quot;++time1:&quot;</span>;time<span class="hljs-number">1.</span><span class="hljs-built_in">display</span>();<br>time2=time1++;<br>cout&lt;&lt;<span class="hljs-string">&quot;time1++:&quot;</span>;time<span class="hljs-number">1.</span><span class="hljs-built_in">display</span>();<br>cout&lt;&lt;<span class="hljs-string">&quot;time2:&quot;</span>;time<span class="hljs-number">2.</span><span class="hljs-built_in">display</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="section-4">4.8</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp;,Complex&amp;);<br><span class="hljs-keyword">friend</span> istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(istream&amp;,Complex&amp;);<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">double</span> real;<br><span class="hljs-type">double</span> imag;<br>&#125;;<br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; output,Complex&amp; c)<br>&#123;<br>output&lt;&lt;<span class="hljs-string">&quot;(&quot;</span>&lt;&lt;c.real&lt;&lt;<span class="hljs-string">&quot;+&quot;</span>&lt;&lt;c.imag&lt;&lt;<span class="hljs-string">&quot;i)&quot;</span>;<br><span class="hljs-keyword">return</span> output;<br>&#125;<br>istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(istream&amp; input,Complex&amp; c)<br>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;input real part and imaginary part of complex number:&quot;</span>;<br>input&gt;&gt;c.real&gt;&gt;c.imag;<br><span class="hljs-keyword">return</span> input;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Complex c1,c2;<br>cin&gt;&gt;c1&gt;&gt;c2;<br>cout&lt;&lt;<span class="hljs-string">&quot;C1=&quot;</span>&lt;&lt;c1&lt;&lt;endl;<br>cout&lt;&lt;<span class="hljs-string">&quot;c2=&quot;</span>&lt;&lt;c2&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp;,Complex&amp;);<br><span class="hljs-keyword">friend</span> istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(istream&amp;,Complex&amp;);<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">double</span> real;<br><span class="hljs-type">double</span> imag;<br>&#125;;<br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; output,Complex&amp; c)<br>&#123;<br>output&lt;&lt;<span class="hljs-string">&quot;(&quot;</span>&lt;&lt;c.real;<br><span class="hljs-keyword">if</span>(c.imag&gt;<span class="hljs-number">0</span>)&#123;<br>output&lt;&lt;<span class="hljs-string">&quot;+&quot;</span>;<br>&#125;output&lt;&lt;c.imag&lt;&lt;<span class="hljs-string">&quot;i)&quot;</span>;<br><span class="hljs-keyword">return</span> output;<br>&#125;<br>istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(istream&amp; input,Complex&amp; c)<br>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;input real part and imaginary part of complex number:&quot;</span>;<br>input&gt;&gt;c.real&gt;&gt;c.imag;<br><span class="hljs-keyword">return</span> input;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Complex c1,c2;<br>cin&gt;&gt;c1&gt;&gt;c2;<br>cout&lt;&lt;<span class="hljs-string">&quot;c1=&quot;</span>&lt;&lt;c1&lt;&lt;endl;<br>cout&lt;&lt;<span class="hljs-string">&quot;c2=&quot;</span>&lt;&lt;c2&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="section-5">4.9</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Complex</span>()&#123;real=<span class="hljs-number">0</span>;imag=<span class="hljs-number">0</span>;&#125;<br><span class="hljs-built_in">Complex</span>(<span class="hljs-type">double</span> r,<span class="hljs-type">double</span> i)&#123;real=r;imag=i;&#125;<br><span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">double</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> real;&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">double</span> real;<br><span class="hljs-type">double</span> imag;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Complex <span class="hljs-title">c1</span><span class="hljs-params">(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)</span>,<span class="hljs-title">c2</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">-10</span>)</span>,c3</span>;<br><span class="hljs-type">double</span> d;<br>d=<span class="hljs-number">2.5</span>+c1;<br>cout&lt;&lt;d&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="section-6">4.10</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Complex</span>()&#123;real=<span class="hljs-number">0</span>;imag=<span class="hljs-number">0</span>;&#125;<br><span class="hljs-built_in">Complex</span>(<span class="hljs-type">double</span> r)&#123;real=r;imag=<span class="hljs-number">0</span>;&#125; <span class="hljs-comment">// 修改构造函数，使得实部为r，虚部为0</span><br><span class="hljs-built_in">Complex</span>(<span class="hljs-type">double</span> r,<span class="hljs-type">double</span> i)&#123;real=r;imag=i;&#125;<br><span class="hljs-keyword">friend</span> Complex <span class="hljs-keyword">operator</span>+(Complex c1,Complex c2);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">double</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> real;&#125; <span class="hljs-comment">// 将复数转换为实数时返回实部</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">double</span> real;<br><span class="hljs-type">double</span> imag;<br>&#125;;<br>Complex <span class="hljs-keyword">operator</span>+(Complex c1,Complex c2)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Complex</span>(c<span class="hljs-number">1.</span>real+c<span class="hljs-number">2.</span>real,c<span class="hljs-number">1.</span>imag+c<span class="hljs-number">2.</span>imag);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Complex::display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;(&quot;</span>&lt;&lt;real&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;imag&lt;&lt;<span class="hljs-string">&quot;i)&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Complex <span class="hljs-title">c1</span><span class="hljs-params">(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)</span>,<span class="hljs-title">c2</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">-10</span>)</span>,c3</span>;<br>c3 = c1 + c2; <span class="hljs-comment">// 修改运算符重载，使得c3等于c1和c2的和</span><br>c<span class="hljs-number">3.</span><span class="hljs-built_in">display</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>曲园</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++程序设计第6章大程序</title>
    <link href="/2024/07/07/C-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%AC6%E7%AB%A0%E5%A4%A7%E7%A8%8B%E5%BA%8F/"/>
    <url>/2024/07/07/C-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%AC6%E7%AB%A0%E5%A4%A7%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>这段代码中包含了许多面向对象编程和C++语言的知识点，以下是详细的解释：</p><ol type="1"><li><strong>类的定义和继承</strong>：<ul><li><code>Shape</code>是一个基类，定义了所有形状都应该具有的基本属性和行为。它包含虚函数<code>area()</code>和<code>volume()</code>，以及纯虚函数<code>shapeName()</code>。虚函数使得派生类可以重写这些函数，以提供具体的实现，而纯虚函数则要求任何直接继承自<code>Shape</code>的派生类都必须提供<code>shapeName()</code>的具体实现。</li><li><code>Point</code>, <code>Circle</code>, 和<code>Cylinder</code>都是从<code>Shape</code>类派生出来的子类，分别表示点、圆和圆柱体。这些类通过公有继承(<code>public Shape</code>)来继承<code>Shape</code>类的属性和方法。</li></ul></li><li><strong>构造函数</strong>：<ul><li>每个类都有构造函数来初始化其成员变量。例如，<code>Point</code>类有一个带有两个参数的构造函数，用于初始化点的坐标。<code>Circle</code>类有一个带有三个参数的构造函数，用于初始化圆心坐标和半径。</li></ul></li><li><strong>虚函数</strong>：<ul><li>在基类<code>Shape</code>中定义了虚函数<code>area()</code>和<code>volume()</code>，这些函数在派生类中被重写。这样做的目的是允许通过基类指针或引用调用派生类的相应函数，实现多态。例如，<code>Circle</code>类和<code>Cylinder</code>类都重写了<code>area()</code>函数来计算圆的面积和圆柱的表面积。</li></ul></li><li><strong>纯虚函数</strong>：<ul><li><code>Shape</code>类中的<code>shapeName()</code>是一个纯虚函数，这意味着<code>Shape</code>类是一个抽象基类，不能直接实例化。派生类必须提供<code>shapeName()</code>的具体实现。</li></ul></li><li><strong>操作符重载</strong>：<ul><li><code>&lt;&lt;</code>运算符被重载，以便可以直接将<code>Point</code>、<code>Circle</code>和<code>Cylinder</code>对象插入到输出流中。这使得打印对象的状态变得方便。</li></ul></li><li><strong>友元函数</strong>：<ul><li><code>operator&lt;&lt;</code>函数被声明为<code>Shape</code>及其派生类的友元函数，这样它们就可以访问类的私有和保护成员。</li></ul></li><li><strong>动态内存分配</strong>：<ul><li>虽然代码没有直接显示使用<code>new</code>和<code>delete</code>，但在创建对象时（如<code>Circle circle(2.4,1.2,5.6);</code>）可能会涉及到动态内存分配，这取决于编译器和运行时环境。</li></ul></li><li><strong>多态和指向基类的指针</strong>：<ul><li>在<code>main()</code>函数中，使用<code>Shape* pt;</code>声明了一个指向<code>Shape</code>类型的指针。这个指针可以用来指向任何<code>Shape</code>的派生类对象。通过该指针调用的成员函数（如<code>area()</code>和<code>volume()</code>）将根据指针实际指向的对象类型来决定调用哪个版本的函数，这是多态的典型应用。</li></ul></li><li><strong>对象的动态类型识别</strong>：<ul><li>使用基类指针<code>pt</code>可以指向不同的派生类对象，并且在运行时确定对象的实际类型，然后调用相应的方法。例如，当<code>pt</code>指向<code>Circle</code>对象时，调用<code>pt-&gt;area()</code>会执行<code>Circle</code>类的<code>area()</code>方法。</li></ul></li><li><strong>对象生命周期</strong>：<ul><li>当对象不再需要时，应该适当地销毁对象并释放资源，防止内存泄漏。尽管在这段代码中没有显式调用析构函数，但当对象的生命周期结束或使用<code>delete</code>释放动态分配的内存时，会自动调用析构函数。</li></ul></li><li><strong>作用域</strong>：<ul><li>类的成员变量和成员函数默认是私有的，只能由类的成员函数访问。使用<code>protected</code>关键字可以让派生类访问基类的某些成员，而<code>public</code>关键字则让所有函数和外部代码都能访问。</li></ul></li></ol><p>总的来说，这段代码展示了如何使用C++来模拟现实世界中的对象以及它们之间的关系，并且演示了如何利用面向对象编程的特性来简化代码，提高代码的可维护性和可扩展性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 定义一个抽象基类Shape，包含虚函数area()和volume()以及纯虚函数shapeName()</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">float</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;&#125; <span class="hljs-comment">// 计算面积的虚函数，默认返回0.0</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">float</span> <span class="hljs-title">volume</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;&#125; <span class="hljs-comment">// 计算体积的虚函数，默认返回0.0</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">shapeName</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>=<span class="hljs-number">0</span>; <span class="hljs-comment">// 纯虚函数，用于输出形状名称</span><br>&#125;;<br><br><span class="hljs-comment">// Point类继承自Shape类，表示二维平面上的点</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>:<span class="hljs-keyword">public</span> Shape&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Point</span>(<span class="hljs-type">float</span>=<span class="hljs-number">0</span>,<span class="hljs-type">float</span>=<span class="hljs-number">0</span>); <span class="hljs-comment">// 构造函数，初始化点的坐标</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setPoint</span><span class="hljs-params">(<span class="hljs-type">float</span>,<span class="hljs-type">float</span>)</span></span>; <span class="hljs-comment">// 设置点的坐标</span><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> x;&#125; <span class="hljs-comment">// 获取x坐标</span><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> y;&#125; <span class="hljs-comment">// 获取y坐标</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">shapeName</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;cout&lt;&lt;<span class="hljs-string">&quot;Point:&quot;</span>;&#125; <span class="hljs-comment">// 输出形状名称为&quot;Point&quot;</span><br><span class="hljs-keyword">friend</span> ostream &amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;,<span class="hljs-type">const</span> Point &amp;); <span class="hljs-comment">// 重载输出运算符，方便输出点的信息</span><br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">float</span> x,y; <span class="hljs-comment">// 点的坐标</span><br>&#125;;<br>Point::<span class="hljs-built_in">Point</span>(<span class="hljs-type">float</span> a,<span class="hljs-type">float</span> b)<br>&#123;x=a;y=b;&#125; <span class="hljs-comment">// 构造函数实现</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Point::setPoint</span><span class="hljs-params">(<span class="hljs-type">float</span> a,<span class="hljs-type">float</span> b)</span></span><br><span class="hljs-function"></span>&#123;x=a;y=b;&#125; <span class="hljs-comment">// 设置点的坐标</span><br>ostream &amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;output,<span class="hljs-type">const</span> Point &amp;p) <span class="hljs-comment">// 重载输出运算符实现</span><br>&#123;<br>output&lt;&lt;<span class="hljs-string">&quot;[&quot;</span>&lt;&lt;p.x&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;p.y&lt;&lt;<span class="hljs-string">&quot;]&quot;</span>;<br><span class="hljs-keyword">return</span> output;<br>&#125;<br><br><span class="hljs-comment">// Circle类继承自Point类，表示二维平面上的圆</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span>:<span class="hljs-keyword">public</span> Point &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Circle</span>(<span class="hljs-type">float</span> x=<span class="hljs-number">0</span>,<span class="hljs-type">float</span> y=<span class="hljs-number">0</span>,<span class="hljs-type">float</span> r=<span class="hljs-number">0</span>); <span class="hljs-comment">// 构造函数，初始化圆心坐标和半径</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setRadius</span><span class="hljs-params">(<span class="hljs-type">float</span> r)</span></span>; <span class="hljs-comment">// 设置半径</span><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">getRadius</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>; <span class="hljs-comment">// 获取半径</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">float</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>; <span class="hljs-comment">// 计算面积的虚函数</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">shapeName</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;cout&lt;&lt;<span class="hljs-string">&quot;Circle:&quot;</span>;&#125;; <span class="hljs-comment">// 输出形状名称为&quot;Circle&quot;</span><br><span class="hljs-keyword">friend</span> ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;,<span class="hljs-type">const</span> Circle &amp;); <span class="hljs-comment">// 重载输出运算符，方便输出圆的信息</span><br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">float</span> radius; <span class="hljs-comment">// 圆的半径</span><br>&#125;;<br>Circle::<span class="hljs-built_in">Circle</span>(<span class="hljs-type">float</span> a,<span class="hljs-type">float</span> b,<span class="hljs-type">float</span> r):<span class="hljs-built_in">Point</span>(a,b),<span class="hljs-built_in">radius</span>(r)&#123;&#125; <span class="hljs-comment">// 构造函数实现</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Circle::setRadius</span><span class="hljs-params">(<span class="hljs-type">float</span> r)</span></span>&#123;radius=r;&#125; <span class="hljs-comment">// 设置半径</span><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">Circle::getRadius</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> radius;&#125; <span class="hljs-comment">// 获取半径</span><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">Circle::area</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">3.1415926</span>*radius*radius;&#125; <span class="hljs-comment">// 计算面积的实现</span><br>ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;output,<span class="hljs-type">const</span> Circle &amp;c) <span class="hljs-comment">// 重载输出运算符实现</span><br>&#123;<br>output&lt;&lt;<span class="hljs-string">&quot;[&quot;</span>&lt;&lt;c.x&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;c.y&lt;&lt;<span class="hljs-string">&quot;],r=&quot;</span>&lt;&lt;c.radius;<br><span class="hljs-keyword">return</span> output;<br>&#125;<br><br><span class="hljs-comment">// Cylinder类继承自Circle类，表示三维空间中的圆柱体</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cylinder</span>:<span class="hljs-keyword">public</span> Circle&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Cylinder</span>(<span class="hljs-type">float</span> x=<span class="hljs-number">0</span>,<span class="hljs-type">float</span> y=<span class="hljs-number">0</span>,<span class="hljs-type">float</span> r=<span class="hljs-number">0</span>,<span class="hljs-type">float</span> h=<span class="hljs-number">0</span>); <span class="hljs-comment">// 构造函数，初始化底面圆心坐标、半径和高度</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setHeight</span><span class="hljs-params">(<span class="hljs-type">float</span>)</span></span>; <span class="hljs-comment">// 设置高度</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">float</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>; <span class="hljs-comment">// 计算表面积的虚函数</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">float</span> <span class="hljs-title">volume</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>; <span class="hljs-comment">// 计算体积的虚函数</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">shapeName</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;cout&lt;&lt;<span class="hljs-string">&quot;Cylinder:&quot;</span>;&#125; <span class="hljs-comment">// 输出形状名称为&quot;Cylinder&quot;</span><br><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp;,<span class="hljs-type">const</span> Cylinder&amp;); <span class="hljs-comment">// 重载输出运算符，方便输出圆柱体的信息</span><br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">float</span> height; <span class="hljs-comment">// 圆柱体的高</span><br>&#125;;<br>Cylinder::<span class="hljs-built_in">Cylinder</span>(<span class="hljs-type">float</span> a,<span class="hljs-type">float</span> b,<span class="hljs-type">float</span> r,<span class="hljs-type">float</span> h):<span class="hljs-built_in">Circle</span>(a,b,r),<span class="hljs-built_in">height</span>(h)&#123;&#125; <span class="hljs-comment">// 构造函数实现</span><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">Cylinder::area</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*Circle::<span class="hljs-built_in">area</span>()<span class="hljs-number">+2</span>*<span class="hljs-number">3.1415926</span>*radius*height;&#125; <span class="hljs-comment">// 计算表面积的实现</span><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">Cylinder::volume</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> Circle::<span class="hljs-built_in">area</span>()*height;&#125; <span class="hljs-comment">// 计算体积的实现</span><br>ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;output,<span class="hljs-type">const</span> Cylinder&amp; cy) <span class="hljs-comment">// 重载输出运算符实现</span><br>&#123;<br>output&lt;&lt;<span class="hljs-string">&quot;[&quot;</span>&lt;&lt;cy.x&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;cy.y&lt;&lt;<span class="hljs-string">&quot;],r=&quot;</span>&lt;&lt;cy.radius&lt;&lt;<span class="hljs-string">&quot;,h=&quot;</span>&lt;&lt;cy.height;<br><span class="hljs-keyword">return</span> output;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Point <span class="hljs-title">point</span><span class="hljs-params">(<span class="hljs-number">3.2</span>,<span class="hljs-number">4.5</span>)</span></span>; <span class="hljs-comment">// 创建一个点对象</span><br><span class="hljs-function">Circle <span class="hljs-title">circle</span><span class="hljs-params">(<span class="hljs-number">2.4</span>,<span class="hljs-number">1.2</span>,<span class="hljs-number">5.6</span>)</span></span>; <span class="hljs-comment">// 创建一个圆对象</span><br><span class="hljs-function">Cylinder <span class="hljs-title">cylinder</span><span class="hljs-params">(<span class="hljs-number">3.5</span>,<span class="hljs-number">6.4</span>,<span class="hljs-number">5.2</span>,<span class="hljs-number">10.5</span>)</span></span>; <span class="hljs-comment">// 创建一个圆柱体对象</span><br>point.<span class="hljs-built_in">shapeName</span>(); <span class="hljs-comment">// 输出点的形状名称</span><br>cout&lt;&lt;point&lt;&lt;endl; <span class="hljs-comment">// 输出点的坐标信息</span><br><br>circle.<span class="hljs-built_in">shapeName</span>(); <span class="hljs-comment">// 输出圆的形状名称</span><br>cout&lt;&lt;circle&lt;&lt;endl; <span class="hljs-comment">// 输出圆的信息</span><br><br>Shape *pt; <span class="hljs-comment">// 定义一个指向Shape类的指针</span><br>pt=&amp;point; <span class="hljs-comment">// 让指针指向点对象</span><br>pt-&gt;<span class="hljs-built_in">shapeName</span>(); <span class="hljs-comment">// 输出点的形状名称</span><br>cout&lt;&lt;<span class="hljs-string">&quot;x=&quot;</span>&lt;&lt;point.<span class="hljs-built_in">getX</span>()&lt;&lt;<span class="hljs-string">&quot;,y=&quot;</span>&lt;&lt;point.<span class="hljs-built_in">getY</span>()&lt;&lt;<span class="hljs-string">&quot;\narea=&quot;</span>&lt;&lt;pt-&gt;<span class="hljs-built_in">area</span>()&lt;&lt;<span class="hljs-string">&quot;\nvolume=&quot;</span>&lt;&lt;pt-&gt;<span class="hljs-built_in">volume</span>()&lt;&lt;<span class="hljs-string">&quot;\n\n&quot;</span>; <span class="hljs-comment">// 输出点的坐标、面积和体积</span><br><br>pt=&amp;circle; <span class="hljs-comment">// 让指针指向圆对象</span><br>pt-&gt;<span class="hljs-built_in">shapeName</span>(); <span class="hljs-comment">// 输出圆的形状名称</span><br>cout&lt;&lt;<span class="hljs-string">&quot;x=&quot;</span>&lt;&lt;circle.<span class="hljs-built_in">getX</span>()&lt;&lt;<span class="hljs-string">&quot;,y=&quot;</span>&lt;&lt;circle.<span class="hljs-built_in">getY</span>()&lt;&lt;<span class="hljs-string">&quot;\narea=&quot;</span>&lt;&lt;pt-&gt;<span class="hljs-built_in">area</span>()&lt;&lt;<span class="hljs-string">&quot;\nvolume=&quot;</span>&lt;&lt;pt-&gt;<span class="hljs-built_in">volume</span>()&lt;&lt;<span class="hljs-string">&quot;\n\n&quot;</span>; <span class="hljs-comment">// 输出圆的信息</span><br><br>pt=&amp;cylinder; <span class="hljs-comment">// 让指针指向圆柱体对象</span><br>pt-&gt;<span class="hljs-built_in">shapeName</span>(); <span class="hljs-comment">// 输出圆柱体的形状名称</span><br>cout&lt;&lt;<span class="hljs-string">&quot;x=&quot;</span>&lt;&lt;cylinder.<span class="hljs-built_in">getX</span>()&lt;&lt;<span class="hljs-string">&quot;,y=&quot;</span>&lt;&lt;cylinder.<span class="hljs-built_in">getY</span>()&lt;&lt;<span class="hljs-string">&quot;\narea=&quot;</span>&lt;&lt;pt-&gt;<span class="hljs-built_in">area</span>()&lt;&lt;<span class="hljs-string">&quot;\nvolume=&quot;</span>&lt;&lt;pt-&gt;<span class="hljs-built_in">volume</span>()&lt;&lt;<span class="hljs-string">&quot;\n\n&quot;</span>; <span class="hljs-comment">// 输出圆柱体的信息</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序中定义了三个类：Shape、Point、Circle和Cylinder。其中，Shape是一个抽象基类，它定义了一些虚函数和一个纯虚函数shapeName()。Point类继承自Shape类，表示二维平面上的点，并实现了一些成员函数。Circle类继承自Point类，表示二维平面上的圆，并实现了一些成员函数。Cylinder类继承自Circle类，表示三维空间中的圆柱体，并实现了一些成员函数。</p><p>以下是各个成员在各类的范围内的访问属性：</p><ol type="1"><li>Shape类的成员：<ul><li>area()：public virtual，可以在派生类中被重写。</li><li>volume()：public virtual，可以在派生类中被重写。</li><li>shapeName()：public pure virtual，必须在派生类中实现。</li></ul><blockquote><p>[!NOTE]</p><p>shapeName()是一个纯虚函数，它在Shape基类中被声明但没有实现。纯虚函数是一种在基类中声明但不提供实现的虚函数，它的目的是让派生类必须重写这个函数并提供具体的实现。</p><p>在这个例子中，Shape类是一个抽象基类，它定义了一个接口，即shapeName()，但并没有给出具体的行为。这是因为不同的形状有不同的名称，例如点、圆和圆柱体都有各自不同的名称。因此，为了让每个派生类能够输出正确的形状名称，必须在每个派生类中实现shapeName()函数。</p><p>如果一个类包含至少一个纯虚函数，那么这个类就被称为抽象类，不能直接实例化。只有当所有的纯虚函数都被实现时，派生类才能被实例化。在这个例子中，Point、Circle和Cylinder都是Shape的具体实现，它们分别实现了shapeName()函数来输出各自的形状名称。</p></blockquote></li><li>Point类的成员：<ul><li>Point(float, float)：public，构造函数。</li><li>setPoint(float, float)：public，设置点的坐标。</li><li>getX()：public，获取x坐标。</li><li>getY()：public，获取y坐标。</li><li>shapeName()：public virtual，输出形状名称为"Point"。</li><li>operator&lt;&lt;：friend，重载输出运算符。</li><li>x, y：protected，点的坐标。</li></ul></li><li>Circle类的成员：<ul><li>Circle(float, float, float)：public，构造函数。</li><li>setRadius(float)：public，设置半径。</li><li>getRadius()：public，获取半径。</li><li>area()：public virtual，计算面积。</li><li>shapeName()：public virtual，输出形状名称为"Circle"。</li><li>operator&lt;&lt;：friend，重载输出运算符。</li><li>radius：protected，圆的半径。</li></ul></li><li>Cylinder类的成员：<ul><li>Cylinder(float, float, float, float)：public，构造函数。</li><li>setHeight(float)：public，设置高度。</li><li>area()：public virtual，计算表面积。</li><li>volume()：public virtual，计算体积。</li><li>shapeName()：public virtual，输出形状名称为"Cylinder"。</li><li>operator&lt;&lt;：friend，重载输出运算符。</li><li>height：protected，圆柱体的高。</li></ul></li></ol><p>程序执行过程中，首先创建了一个Point对象、一个Circle对象和一个Cylinder对象。然后分别调用它们的shapeName()函数输出形状名称，接着使用cout输出它们的信息。接下来，定义了一个指向Shape类的指针pt，并将它分别指向point、circle和cylinder对象，然后通过这个指针调用shapeName()函数输出形状名称，并通过getX(),getY(), getRadius(), area(),volume()等函数输出相关信息。最后，main函数返回0，程序结束。</p>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>曲园</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>datetime库指南</title>
    <link href="/2024/05/31/datetime%E5%BA%93%E6%8C%87%E5%8D%97/"/>
    <url>/2024/05/31/datetime%E5%BA%93%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>日期与时间是<ahref="https://so.csdn.net/so/search?q=计算机科学&amp;spm=1001.2101.3001.7020">计算机科学</a>中的重要概念，在软件开发中涉及到时间的场景非常广泛。Python的 Datetime库为我们提供了一套强大而灵活的工具，使得处理日期和时间变得轻松而高效。本文将深入探讨Datetime库的各个方面，包括基本概念、常用操作、时区处理、格式化输出等，旨在为读者提供全面的指南，助力大家更好地利用Python 处理日期与时间。</p><h4 id="datetime-库基础"><ahref="https://so.csdn.net/so/search?q=Datetime&amp;spm=1001.2101.3001.7020">Datetime</a>库基础</h4><h5 id="datetime-模块简介">Datetime 模块简介</h5><p>Python 的 Datetime模块是处理日期和时间的核心模块，提供了表示日期、时间、时间间隔的类和函数。主要的类包括：</p><ul><li><code>datetime.date</code>：表示日期的类。</li><li><code>datetime.time</code>：表示时间的类。</li><li><code>datetime.datetime</code>：表示日期和时间的类。</li><li><code>datetime.timedelta</code>：表示时间间隔的类。</li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs axapta"> <span class="hljs-number">1</span>import datetime  <br> <span class="hljs-number">2</span>  <br> <span class="hljs-number">3</span><span class="hljs-meta"># 创建日期对象  </span><br> <span class="hljs-number">4</span>today = datetime.<span class="hljs-built_in">date</span>.today()  <br> <span class="hljs-number">5</span><span class="hljs-keyword">print</span>(today)  <span class="hljs-meta"># 输出: 当前日期  </span><br> <span class="hljs-number">6</span>  <br> <span class="hljs-number">7</span><span class="hljs-meta"># 创建时间对象  </span><br> <span class="hljs-number">8</span>current_time = datetime.time(<span class="hljs-number">12</span>, <span class="hljs-number">30</span>, <span class="hljs-number">45</span>)  <br> <span class="hljs-number">9</span><span class="hljs-keyword">print</span>(current_time)  <span class="hljs-meta"># 输出: 12:30:45  </span><br><span class="hljs-number">10</span>  <br><span class="hljs-number">11</span><span class="hljs-meta"># 创建日期和时间对象  </span><br><span class="hljs-number">12</span>now = datetime.datetime.now()  <br><span class="hljs-number">13</span><span class="hljs-keyword">print</span>(now)  <span class="hljs-meta"># 输出: 当前日期和时间  </span><br><span class="hljs-number">14</span>  <br><span class="hljs-number">15</span><span class="hljs-meta"># 创建时间间隔对象  </span><br><span class="hljs-number">16</span>delta = datetime.timedelta(days=<span class="hljs-number">5</span>)  <br><span class="hljs-number">17</span><span class="hljs-keyword">print</span>(delta)  <span class="hljs-meta"># 输出: 5 days, 0:00:00</span><br><span class="hljs-number">1234567891011121314151617</span><br></code></pre></td></tr></table></figure><p>通过使用 Datetime 模块，我们可以轻松地创建和操作日期与时间对象。</p><h5 id="获取当前日期与时间">获取当前日期与时间</h5><p>在实际应用中，经常需要获取当前的日期和时间。Datetime 模块提供了<code>datetime.datetime.now()</code> 方法用于获取当前日期和时间。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span>import datetime  <br><span class="hljs-symbol">2 </span> <br><span class="hljs-number">3</span>current_datetime = datetime.datetime.now()  <br><span class="hljs-number">4</span><span class="hljs-keyword">print</span>(current_datetime)  # 输出: 当前日期和时间  <br><br><span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><p>这个方法返回的是一个 <code>datetime.datetime</code>对象，包含了当前的日期和时间信息。</p><h5 id="字符串与日期时间的转换">字符串与日期时间的转换</h5><p>Datetime模块允许我们将日期和时间对象转换为字符串，以及将字符串转换为日期和时间对象。常用的方法包括：</p><ul><li><code>strptime()</code>：将字符串解析为日期和时间对象。</li><li><code>strftime()</code>：将日期和时间对象格式化为字符串。</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs perl"> 1import datetime  <br> <span class="hljs-number">2</span>  <br> <span class="hljs-number">3</span><span class="hljs-comment"># 字符串转日期时间对象  </span><br> 4date_str = <span class="hljs-string">&quot;2022-01-01&quot;</span>  <br> 5date_obj = datetime.datetime.strptime(date_str, <span class="hljs-string">&quot;<span class="hljs-variable">%Y</span>-<span class="hljs-variable">%m</span>-<span class="hljs-variable">%d</span>&quot;</span>)  <br> 6print(date_obj)  <span class="hljs-comment"># 输出: 2022-01-01 00:00:00  </span><br> <span class="hljs-number">7</span>  <br> <span class="hljs-number">8</span><span class="hljs-comment"># 日期时间对象转字符串  </span><br> 9formatted_date = date_obj.strftime(<span class="hljs-string">&quot;<span class="hljs-variable">%Y</span>-<span class="hljs-variable">%m</span>-<span class="hljs-variable">%d</span> <span class="hljs-variable">%H</span>:<span class="hljs-variable">%M</span>:<span class="hljs-variable">%S</span>&quot;</span>)  <br>10print(formatted_date)  <span class="hljs-comment"># 输出: 2022-01-01 00:00:00</span><br><span class="hljs-number">12345678910</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>strptime()</code>方法使用指定的格式将字符串解析为日期和时间对象，而<code>strftime()</code> 方法则将日期和时间对象格式化为字符串。</p><h4 id="datetime-库常用操作">Datetime 库常用操作</h4><h5 id="时间加减">时间加减</h5><p>Datetime模块允许我们对日期和时间进行加减操作，以计算新的日期和时间。这主要通过<code>datetime.timedelta</code> 类实现。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs axapta"> <span class="hljs-number">1</span>import datetime  <br> <span class="hljs-number">2</span>  <br> <span class="hljs-number">3</span><span class="hljs-meta"># 当前日期  </span><br> <span class="hljs-number">4</span>current_date = datetime.<span class="hljs-built_in">date</span>.today()  <br> <span class="hljs-number">5</span>  <br> <span class="hljs-number">6</span><span class="hljs-meta"># 加上一天  </span><br> <span class="hljs-number">7</span>next_day = current_date + datetime.timedelta(days=<span class="hljs-number">1</span>)  <br> <span class="hljs-number">8</span><span class="hljs-keyword">print</span>(next_day)  <span class="hljs-meta"># 输出: 明天的日期  </span><br> <span class="hljs-number">9</span>  <br><span class="hljs-number">10</span><span class="hljs-meta"># 减去一周  </span><br><span class="hljs-number">11</span>last_week = current_date - datetime.timedelta(weeks=<span class="hljs-number">1</span>)  <br><span class="hljs-number">12</span><span class="hljs-keyword">print</span>(last_week)  <span class="hljs-meta"># 输出: 一周前的日期</span><br><span class="hljs-number">123456789101112</span><br></code></pre></td></tr></table></figure><p>在这个例子中，通过使用 <code>datetime.timedelta</code>类，我们可以轻松地对日期进行加减操作，实现日期的前后推移。</p><h5 id="日期比较">日期比较</h5><p>比较日期的大小是处理日期与时间常见的操作之一。Datetime模块中的日期对象支持比较操作，包括等于、不等于、大于、小于等。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs axapta"> <span class="hljs-number">1</span>import datetime  <br> <span class="hljs-number">2</span>  <br> <span class="hljs-number">3</span><span class="hljs-meta"># 创建两个日期对象  </span><br> <span class="hljs-number">4</span>date1 = datetime.<span class="hljs-built_in">date</span>(  <br> <span class="hljs-number">5</span>  <br> <span class="hljs-number">62022</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)  <br> <span class="hljs-number">7</span>date2 = datetime.<span class="hljs-built_in">date</span>(<span class="hljs-number">2022</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)  <br> <span class="hljs-number">8</span>  <br> <span class="hljs-number">9</span><span class="hljs-meta"># 比较日期  </span><br><span class="hljs-number">10</span><span class="hljs-keyword">print</span>(date1 == date2)  <span class="hljs-meta"># 输出: False  </span><br><span class="hljs-number">11</span><span class="hljs-keyword">print</span>(date1 != date2)  <span class="hljs-meta"># 输出: True  </span><br><span class="hljs-number">12</span><span class="hljs-keyword">print</span>(date1 &lt; date2)  <span class="hljs-meta"># 输出: True  </span><br><span class="hljs-number">13</span><span class="hljs-keyword">print</span>(date1 &gt; date2)  <span class="hljs-meta"># 输出: False</span><br><span class="hljs-number">12345678910111213</span><br></code></pre></td></tr></table></figure><p>通过比较操作，我们可以方便地判断日期的先后顺序。</p><h5 id="时间间隔计算">时间间隔计算</h5><p>Datetime 模块中的 <code>datetime.timedelta</code>类还可以用于计算两个日期或时间之间的时间间隔。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span>import datetime  <br><span class="hljs-symbol">2 </span> <br><span class="hljs-number">3#</span> 创建两个日期对象  <br><span class="hljs-number">4</span>date1 = datetime.date(<span class="hljs-number">2022</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)  <br><span class="hljs-number">5</span>date2 = datetime.date(<span class="hljs-number">2022</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)  <br><span class="hljs-symbol">6 </span> <br><span class="hljs-number">7#</span> 计算时间间隔  <br><span class="hljs-number">8</span>time_interval = date2 - date1  <br><span class="hljs-number">9</span><span class="hljs-keyword">print</span>(time_interval)  # 输出: <span class="hljs-number">31</span> days, <span class="hljs-number">0</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>  <br><br><span class="hljs-number">12345678910</span><br></code></pre></td></tr></table></figure><p>通过计算时间间隔，我们可以得到两个日期之间相差的天数、秒数等信息。</p><h4 id="时区处理与日历">时区处理与日历</h4><h5 id="时区处理">时区处理</h5><p>在处理全球化的应用时，时区成为一个重要的考虑因素。Datetime 模块提供了<code>datetime.timezone</code> 类用于表示时区信息。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span>import datetime  <br><span class="hljs-number">2</span>import pytz  # 需要安装 pytz 库  <br><span class="hljs-symbol">3 </span> <br><span class="hljs-number">4#</span> 创建时区对象  <br><span class="hljs-number">5</span>tz = datetime.timezone(datetime.timedelta(hours=<span class="hljs-number">8</span>))  <br><span class="hljs-symbol">6 </span> <br><span class="hljs-number">7#</span> 创建带有时区信息的日期时间对象  <br><span class="hljs-number">8</span>dt_with_tz = datetime.datetime(<span class="hljs-number">2022</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, tzinfo=tz)  <br><span class="hljs-number">9</span><span class="hljs-keyword">print</span>(dt_with_tz)  # 输出: <span class="hljs-number">2022</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  <br><br><span class="hljs-number">12345678910</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>datetime.timezone</code>类表示了一个小时的时区偏移，通过将其传递给<code>datetime.datetime</code> 对象的 <code>tzinfo</code>参数，我们创建了带有时区信息的日期时间对象。</p><h5 id="使用-pytz-库处理时区">使用 pytz 库处理时区</h5><p>Datetime 模块本身提供了有限的时区支持，而 <code>pytz</code>库则提供了更全面的时区支持。可以通过安装 <code>pytz</code>库来更方便地处理时区相关的操作。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"> <span class="hljs-number">1</span><span class="hljs-keyword">import</span> datetime  <br> <span class="hljs-number">2</span><span class="hljs-keyword">import</span> pytz  <span class="hljs-comment"># 需要安装 pytz 库  </span><br> <span class="hljs-number">3</span>  <br> <span class="hljs-number">4</span><span class="hljs-comment"># 创建时区对象  </span><br> <span class="hljs-number">5</span>tz = pytz.timezone(<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>)  <br> <span class="hljs-number">6</span>  <br> <span class="hljs-number">7</span><span class="hljs-comment"># 获取当前时间，并设置时区信息  </span><br> <span class="hljs-number">8</span>now = datetime.datetime.now(tz)  <br> <span class="hljs-number">9</span><span class="hljs-built_in">print</span>(now)  <span class="hljs-comment"># 输出: 当前日期和时间（上海时区）  </span><br><span class="hljs-number">10</span>  <br><span class="hljs-number">11</span><span class="hljs-comment"># 将时间转换为其他时区  </span><br><span class="hljs-number">12</span>ny_tz = pytz.timezone(<span class="hljs-string">&#x27;America/New_York&#x27;</span>)  <br><span class="hljs-number">13</span>ny_time = now.astimezone(ny_tz)  <br><span class="hljs-number">14</span><span class="hljs-built_in">print</span>(ny_time)  <span class="hljs-comment"># 输出: 当前日期和时间（纽约时区）</span><br><span class="hljs-number">1234567891011121314</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>pytz.timezone</code>方法创建了一个时区对象，然后通过 <code>astimezone()</code>方法将时间转换为其他时区。</p><h5 id="日历操作">日历操作</h5><p>Datetime 模块中的 <code>calendar</code>模块提供了一些日历相关的功能，包括判断某一年是否是闰年、获取某月的日历等。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span>import calendar  <br><span class="hljs-symbol">2 </span> <br><span class="hljs-number">3#</span> 判断是否是闰年  <br><span class="hljs-number">4</span>is_leap = calendar.isleap(<span class="hljs-number">2022</span>)  <br><span class="hljs-number">5</span><span class="hljs-keyword">print</span>(is_leap)  # 输出: False  <br><span class="hljs-symbol">6 </span> <br><span class="hljs-number">7#</span> 获取某月的日历  <br><span class="hljs-number">8</span>cal = calendar.month(<span class="hljs-number">2022</span>, <span class="hljs-number">1</span>)  <br><span class="hljs-number">9</span><span class="hljs-keyword">print</span>(cal)  # 输出: 一月份的日历  <br><br><span class="hljs-number">12345678910</span><br></code></pre></td></tr></table></figure><p>通过使用 <code>calendar</code>模块，我们可以方便地进行一些与日期相关的日历操作。</p><h4 id="datetime-库的格式化输出">Datetime 库的格式化输出</h4><h5 id="strftime-格式化字符串">strftime 格式化字符串</h5><p>在实际应用中，我们通常需要将日期和时间对象格式化为特定的字符串。这时可以使用<code>strftime()</code>方法，它接受一个格式化字符串作为参数，将日期和时间对象格式化为字符串。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span>import datetime  <br><span class="hljs-symbol">2 </span> <br><span class="hljs-number">3#</span> 创建日期时间对象  <br><span class="hljs-number">4</span>current_datetime = datetime.datetime.now()  <br><span class="hljs-symbol">5 </span> <br><span class="hljs-number">6#</span> 将日期时间对象格式化为字符串  <br><span class="hljs-number">7</span>formatted_str = current_datetime.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)  <br><span class="hljs-number">8</span><span class="hljs-keyword">print</span>(formatted_str)  # 输出: 当前日期和时间的字符串表示  <br><br><span class="hljs-number">123456789</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>%Y</code>、<code>%m</code>、<code>%d</code>、<code>%H</code>、<code>%M</code>、<code>%S</code>等是格式化字符串中的占位符，代表年、月、日、小时、分钟、秒等信息。</p><h5 id="strptime-解析字符串">strptime 解析字符串</h5><p>与 <code>strftime()</code> 相对应的是 <code>strptime()</code>方法，它用于将字符串解析为日期和时间对象。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span>import datetime  <br><span class="hljs-symbol">2 </span> <br><span class="hljs-number">3#</span> 字符串表示的日期时间  <br><span class="hljs-number">4</span>date_str = <span class="hljs-string">&quot;2022-01-01 00:00:00&quot;</span>  <br><span class="hljs-symbol">5 </span> <br><span class="hljs-number">6#</span> 解析字符串为日期时间对象  <br><span class="hljs-number">7</span>parsed_datetime = datetime.datetime.strptime(date_str, <span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)  <br><span class="hljs-number">8</span><span class="hljs-keyword">print</span>(parsed_datetime)  # 输出: 解析后的日期时间对象  <br><br><span class="hljs-number">123456789</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>%Y</code>、<code>%m</code>、<code>%d</code>、<code>%H</code>、<code>%M</code>、<code>%S</code>等占位符与 <code>strftime()</code>中的相对应，用于指定解析字符串的格式。</p><h5 id="自定义格式化字符串">自定义格式化字符串</h5><p>除了常见的占位符外，Datetime 模块还支持一些其他格式化选项，如<code>%a</code> 表示星期的缩写，<code>%B</code>表示月份的全称等。详细的格式化选项可以参考官方文档。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span>import datetime  <br><span class="hljs-symbol">2 </span> <br><span class="hljs-number">3#</span> 创建日期时间对象  <br><span class="hljs-number">4</span>current_datetime = datetime.datetime.now()  <br><span class="hljs-symbol">5 </span> <br><span class="hljs-number">6#</span> 自定义格式化字符串  <br><span class="hljs-number">7</span>custom_formatted_str = current_datetime.strftime(<span class="hljs-string">&quot;%A, %B %d, %Y %I:%M %p&quot;</span>)  <br><span class="hljs-number">8</span><span class="hljs-keyword">print</span>(custom_formatted_str)  # 输出: 当前日期和时间的自定义格式化字符串  <br><br><span class="hljs-number">123456789</span><br></code></pre></td></tr></table></figure><p>在实际应用中，根据需求可以灵活运用不同的格式化选项，创建符合项目要求的日期和时间格式。</p><h4 id="datetime-库高级应用">Datetime 库高级应用</h4><h5 id="使用-calendar-模块">使用 calendar 模块</h5><p>Datetime 模块中的 <code>calendar</code>模块提供了一些高级的日历和日期计算功能。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span>import calendar  <br><span class="hljs-symbol">2 </span> <br><span class="hljs-number">3#</span> 获取某个月的第一天和最后一天  <br><span class="hljs-number">4</span>first_day, last_day = calendar.monthrange(<span class="hljs-number">2022</span>, <span class="hljs-number">1</span>)  <br><span class="hljs-number">5</span><span class="hljs-keyword">print</span>(first_day, last_day)  # 输出: <span class="hljs-number">4</span>, <span class="hljs-number">31</span>  <br><span class="hljs-symbol">6 </span> <br><span class="hljs-number">7#</span> 获取某个月的第一周包含的天数  <br><span class="hljs-number">8</span>first_week_days = calendar.monthlen(<span class="hljs-number">2022</span>, <span class="hljs-number">1</span>)  <br><span class="hljs-number">9</span><span class="hljs-keyword">print</span>(first_week_days)  # 输出: <span class="hljs-number">31</span>  <br><br><span class="hljs-number">12345678910</span><br></code></pre></td></tr></table></figure><p>通过使用 <code>calendar</code>模块，我们可以获取某个月的第一天、最后一天以及第一周包含的天数等信息。</p><h5 id="使用-dateutil-库">使用 dateutil 库</h5><p><code>dateutil</code> 库是 Python中一个强大的日期时间处理库，提供了丰富的功能，包括相对时间、复杂的日期计算等。需要安装该库，可以使用<code>pip install python-dateutil</code> 进行安装。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span>from dateutil import relativedelta  <br><span class="hljs-symbol">2 </span> <br><span class="hljs-number">3#</span> 获取两个日期之间的相对时间差  <br><span class="hljs-number">4</span>date1 = datetime.date(<span class="hljs-number">2022</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)  <br><span class="hljs-number">5</span>date2 = datetime.date(<span class="hljs-number">2022</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)  <br><span class="hljs-number">6</span>delta = relativedelta.relativedelta(date2, date1)  <br><span class="hljs-number">7</span><span class="hljs-keyword">print</span>(delta)  # 输出: relativedelta(months=+<span class="hljs-number">1</span>)  <br><br><span class="hljs-number">12345678</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>relativedelta</code>类提供了方便的相对时间计算功能，可以轻松地获取两个日期之间的相对时间差。</p><h5 id="使用-arrow-库">使用 arrow 库</h5><p><code>arrow</code>库是一个用于处理日期和时间的优秀库，提供了简单易用的接口和强大的功能。需要安装该库，可以使用<code>pip install arrow</code> 进行安装。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span>import arrow  <br><span class="hljs-symbol">2 </span> <br><span class="hljs-number">3#</span> 获取当前时间  <br><span class="hljs-number">4</span>now = arrow.now()  <br><span class="hljs-number">5</span><span class="hljs-keyword">print</span>(now)  # 输出: 当前日期和时间  <br><span class="hljs-symbol">6 </span> <br><span class="hljs-number">7#</span> 格式化输出  <br><span class="hljs-number">8</span>formatted_str = now.format(<span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>)  <br><span class="hljs-number">9</span><span class="hljs-keyword">print</span>(formatted_str)  # 输出: 当前日期和时间的格式化字符串  <br><br><span class="hljs-number">12345678910</span><br></code></pre></td></tr></table></figure><p>通过使用 <code>arrow</code>库，我们可以更方便地进行日期和时间的处理，并轻松进行格式化输出。</p><h4 id="最佳实践与注意事项">最佳实践与注意事项</h4><p>在使用 Datetime 库处理日期与时间时，一些最佳实践和注意事项包括：</p><ul><li><strong>时区处理：</strong>在涉及到全球化应用或跨时区操作时，务必考虑时区的影响，使用<code>pytz</code> 等库进行时区处理。</li><li><strong>格式化与解析：</strong> 使用 <code>strftime</code>进行格式化输出时，要确保占位符的使用是正确的；使用 <code>strptime</code>解析字符串时，要确保字符串格式与占位符相匹配。</li><li><strong>使用 dateutil 和 arrow 库：</strong>对于更复杂的日期和时间操作，可以考虑使用 <code>dateutil</code> 和<code>arrow</code> 等第三方库，它们提供了更多便捷的功能。</li></ul><p>以上就是“轻松处理日期与时间：Python 的 Datetime库指南”的全部内容，希望对你有所帮助。</p>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manacher算法(马拉车算法)</title>
    <link href="/2024/05/08/Manacher%E7%AE%97%E6%B3%95-%E9%A9%AC%E6%8B%89%E8%BD%A6%E7%AE%97%E6%B3%95/"/>
    <url>/2024/05/08/Manacher%E7%AE%97%E6%B3%95-%E9%A9%AC%E6%8B%89%E8%BD%A6%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=1600778160&amp;bvid=BV172421F7CJ&amp;cid=1443775155&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><iframe src="//player.bilibili.com/player.html?aid=1600778160&amp;bvid=BV172421F7CJ&amp;cid=1443775155&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#最长回文子串</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">LongestPalindromicSubstring</span>(<span class="hljs-params">s</span>):<span class="hljs-comment">#中心扩展法</span><br>    sn=[<span class="hljs-string">&quot;^&quot;</span>,<span class="hljs-string">&quot;#&quot;</span>]+<span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;#&quot;</span>.join(s))+[<span class="hljs-string">&quot;#&quot;</span>,<span class="hljs-string">&quot;^&quot;</span>]<br>    ans=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(sn)-<span class="hljs-number">1</span>):<br>        ext=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span>(sn[i-ext-<span class="hljs-number">1</span>]==sn[i+ext+<span class="hljs-number">1</span>]):<br>            ext+=<span class="hljs-number">1</span><br>        ans=<span class="hljs-built_in">max</span>(ext,ans)<br>    <span class="hljs-keyword">return</span> ans<br><span class="hljs-built_in">print</span>(LongestPalindromicSubstring(<span class="hljs-string">&quot;abbacabaxabacabaa&quot;</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">LongestPalindromicSubstring</span>(<span class="hljs-params">s</span>):<span class="hljs-comment">#马拉车算法</span><br>    sn=[<span class="hljs-string">&quot;^&quot;</span>,<span class="hljs-string">&quot;#&quot;</span>]+<span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;#&quot;</span>.join(s))+[<span class="hljs-string">&quot;#&quot;</span>,<span class="hljs-string">&quot;^&quot;</span>]<br>    p=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(sn))]<br>    c=<span class="hljs-number">0</span><br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(sn)-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> i&lt;=r:<br>            p[i]=<span class="hljs-built_in">min</span>(r-i,p[<span class="hljs-number">2</span>*c-i])<br>        <span class="hljs-keyword">while</span>(sn[i-p[i]-<span class="hljs-number">1</span>]==sn[i+p[i]+<span class="hljs-number">1</span>]):<br>            p[i]+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> p[i]+i&gt;r:<br>            r=p[i]+i<br>            c=i<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(p)<br><span class="hljs-built_in">print</span>(LongestPalindromicSubstring(<span class="hljs-string">&quot;abbacabaxabacabaa&quot;</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥输入输出</title>
    <link href="/2024/04/12/%E8%93%9D%E6%A1%A5%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <url>/2024/04/12/%E8%93%9D%E6%A1%A5%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br><span class="hljs-comment">#这行代码接收用户的输入，并将输入转换为整数列表。</span><br><span class="hljs-comment">#首先，input()函数接收用户的输入，然后</span><br><span class="hljs-comment">#split()方法将这个输入拆分成一个字符串列表。</span><br><span class="hljs-comment">#接着，map()函数应用int()函数到列表的每个元素，</span><br><span class="hljs-comment">#将每个字符串元素转换为整数。最后，li()函数</span><br><span class="hljs-comment">#将映射对象转换为列表。</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, nums)))<br><span class="hljs-comment">#这行代码将整数列表转换回字符串，并以空格分隔每个元素，</span><br><span class="hljs-comment">#然后将整个字符串打印出来。首先，map()函数应用</span><br><span class="hljs-comment">#str()函数到列表的每个元素，将每个整数元素转换</span><br><span class="hljs-comment">#为字符串。然后，join()方法使用空格字符作为分隔符，</span><br><span class="hljs-comment">#将字符串列表连接成一个字符串。</span><br><span class="hljs-comment">#最后，print()函数打印这个字符串。</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#最大公约数</span><br><span class="hljs-comment">#约数︰如果整数a能被整数b整除，那么a叫做b的倍数，</span><br><span class="hljs-comment">#b叫做a的约数。</span><br><span class="hljs-comment">#给定两个整数a,b，两个数的所有公共约数中的最大值</span><br><span class="hljs-comment">#即为最大公约数(Greatest Common Divisor , GCD)。</span><br><span class="hljs-comment">#例:12与16的最大公约数是4</span><br><br><span class="hljs-comment">#如何计算两个数的最大公约数:</span><br><span class="hljs-comment">#欧几里得:辗转相除法(欧几里得算法)</span><br><span class="hljs-comment">#《九章算术》:更相减损术</span><br><span class="hljs-comment">#欧几里得算法: gcd(a, b) = gcd(b, a mod b)</span><br><span class="hljs-comment">#例: gcd(60, 21) = gcd(21, 18)= gcd(18, 3)= gcd(3, 0)= 3</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-keyword">if</span> b==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> a<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> gcd(b,(a%b))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd2</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-keyword">while</span> b&gt;<span class="hljs-number">0</span>:<br>        c=a%b<br>        a=b<br>        b=c<br>    <span class="hljs-keyword">return</span> a<br><span class="hljs-built_in">print</span>(gcd(<span class="hljs-number">12</span>,<span class="hljs-number">16</span>))<br><span class="hljs-built_in">print</span>(gcd2(<span class="hljs-number">12</span>,<span class="hljs-number">16</span>))<br><span class="hljs-comment">#应用:实现分数计算</span><br><span class="hljs-comment">#利用欧几里得算法实现一个分数类，支持分数的四则运算。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fraction</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,a,b</span>):<br>        <span class="hljs-variable language_">self</span>.a=a<br>        <span class="hljs-variable language_">self</span>.b=b<br>        x=<span class="hljs-variable language_">self</span>.gcd2(a,b)<br>        <span class="hljs-variable language_">self</span>.a /= x<br>        <span class="hljs-variable language_">self</span>.b /= x<br><br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd2</span>(<span class="hljs-params">self,a, b</span>):<br>        <span class="hljs-keyword">while</span> b &gt; <span class="hljs-number">0</span>:<br>            c = a % b<br>            a = b<br>            b = c<br>        <span class="hljs-keyword">return</span> a<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lcm</span>(<span class="hljs-params">self,a,b</span>):<br>        x=gcd2(a,b)<br>        <span class="hljs-keyword">return</span> x*(a/x)*(b/x)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__add__</span>(<span class="hljs-params">self, other</span>):<span class="hljs-comment">#加</span><br>        a=<span class="hljs-variable language_">self</span>.a<br>        b=<span class="hljs-variable language_">self</span>.b<br>        c=other.a<br>        d=other.b<br>        denominator=<span class="hljs-variable language_">self</span>.lcm(b,d)<br>        numerator=a*(denominator)/b+c*(denominator)/d<br>        <span class="hljs-keyword">return</span> Fraction(numerator,denominator)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__sub__</span>(<span class="hljs-params">self, other</span>):<span class="hljs-comment">#减</span><br>        a = <span class="hljs-variable language_">self</span>.a<br>        b = <span class="hljs-variable language_">self</span>.b<br>        c = other.a<br>        d = other.b<br>        denominator = <span class="hljs-variable language_">self</span>.lcm(b, d)<br>        numerator = a * (denominator) / b - c * (denominator) / d<br>        <span class="hljs-keyword">return</span> Fraction(numerator, denominator)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__mul__</span>(<span class="hljs-params">self, other</span>):<span class="hljs-comment">#乘</span><br>        a = <span class="hljs-variable language_">self</span>.a<br>        b = <span class="hljs-variable language_">self</span>.b<br>        c = other.a<br>        d = other.b<br>        denominator = b*d<br>        numerator = a*c<br>        <span class="hljs-keyword">return</span> Fraction(numerator, denominator)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__truediv__</span>(<span class="hljs-params">self, other</span>):<span class="hljs-comment">#除</span><br>        a = <span class="hljs-variable language_">self</span>.a<br>        b = <span class="hljs-variable language_">self</span>.b<br>        c = other.b<br>        d = other.a<br>        denominator = b * d<br>        numerator = a * c<br>        <span class="hljs-keyword">return</span> Fraction(numerator, denominator)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;%d/%d&quot;</span> %  (<span class="hljs-variable language_">self</span>.a,<span class="hljs-variable language_">self</span>.b)<br><br>a=Fraction(<span class="hljs-number">4</span>,<span class="hljs-number">12</span>)<br>b=Fraction(<span class="hljs-number">6</span>,<span class="hljs-number">24</span>)<br><span class="hljs-built_in">print</span>(a+b)<br><span class="hljs-built_in">print</span>(a-b)<br><span class="hljs-built_in">print</span>(a*b)<br><span class="hljs-built_in">print</span>(a/b)<br><br><span class="hljs-comment">#RSA加密算法</span><br><br><span class="hljs-comment">#密码与加密</span><br><span class="hljs-comment">#传统密码:加密算法是秘密的</span><br><span class="hljs-comment">#现代密码系统:加密算法是公开的，密钥是秘密的</span><br><span class="hljs-comment">#   对称加密</span><br><span class="hljs-comment">#   非对称加密(RSA属于，加密解密各一个密钥）</span><br><br><span class="hljs-comment">#RSA非对称加密系统:</span><br><span class="hljs-comment">#公钥:用来加密，是公开的</span><br><span class="hljs-comment">#私钥:用来解密，是私有的</span><br><br><span class="hljs-comment">#RSA加密算法过程</span><br><span class="hljs-comment">#1.随机选取两个质数p和q</span><br><span class="hljs-comment">#2.计算n=pq</span><br><span class="hljs-comment">#3.选取一个与中(n)互质的小奇数e,中(n)=(p-1)(q-1)</span><br><span class="hljs-comment">#4.对模φ(n),计算e的乘法逆元d, 即满足(e*d) mod φ(n) = 1</span><br><span class="hljs-comment">#5.公钥(e, n)  私钥(d, n)</span><br><span class="hljs-comment">#加密过程: c= (m^e) mod n</span><br><span class="hljs-comment">#解密过程: m= (c^d) mod n</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#贪心算法</span><br><span class="hljs-comment">#贪心算法(又称贪婪算法)是指，在对问题求解时，</span><br><span class="hljs-comment">#总是做出在当前看来是最好的选择。也就是说</span><br><span class="hljs-comment">#不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。</span><br><span class="hljs-comment">#贪心算法并不保证会得到最优解，但是在某些问题上贪心算法的解</span><br><span class="hljs-comment">#就是最优解。要会判断一个问题能否用贪心算法来计算。</span><br><br><span class="hljs-comment">#找零问题</span><br><span class="hljs-comment">#假设商店老板需要找零n元钱，钱币的面额有:100元、</span><br><span class="hljs-comment">#50元、20元、5元、1元，如何找零使得所需钱币的数量最少?</span><br>t=[<span class="hljs-number">100</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change_money</span>(<span class="hljs-params">t,n</span>):<br>    m=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(t))]<br>    <span class="hljs-keyword">for</span> i,money <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(t):<span class="hljs-comment">#enumerate(t)用于将一个可遍历的数据对象（如列表、元组或字符串）组合为一个索引序列，同时列出数据和数据下标</span><br>        m[i]=n//money<br>        n=n%money<br>    <span class="hljs-keyword">return</span> m,n<br><span class="hljs-built_in">print</span>(change_money(t,<span class="hljs-number">376</span>))<br><br><span class="hljs-comment">#背包问题</span><br><span class="hljs-comment">#一个小偷在某个商店发现有n个商品，第i个商品价值vi元，</span><br><span class="hljs-comment">#重wi千克。他希望拿走的价值尽量高，但他的背包最多</span><br><span class="hljs-comment">#只能容纳W千克的东西。他应该拿走哪些商品?</span><br><span class="hljs-comment">#O-1背包:对于一个商品，小偷要么把它完整拿走，要么留下。</span><br><span class="hljs-comment">#不能只拿走—部分，或把一个商品拿走多次。(商品为金条)</span><br><span class="hljs-comment">#分数背包∶对于一个商品，小偷可以拿走其中任意一部分。</span><br><span class="hljs-comment">#(商品为金砂)</span><br>goods=[(<span class="hljs-number">60</span>,<span class="hljs-number">10</span>),(<span class="hljs-number">100</span>,<span class="hljs-number">20</span>),(<span class="hljs-number">120</span>,<span class="hljs-number">30</span>)]<br>goods.sort(key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">0</span>]/x[<span class="hljs-number">1</span>],reverse=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment">#key=lambda x: x[0]/x[1]: 这是sort方法的key参数，它指定了一个函数，该函数用于从每个元素中提取一个用于排序的值。</span><br>    <span class="hljs-comment">#这里使用了一个lambda函数，该函数接受一个元素（在这里命名为x），并返回该元素第一个元素与第二个元素的商。</span><br>    <span class="hljs-comment">#reversed=True: 这告诉sort方法按照降序排序，而不是默认的升序。</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fractional_backpack</span>(<span class="hljs-params">goods,W</span>):<span class="hljs-comment">#分数背包∶对于一个商品，小偷可以拿走其中任意一部分。</span><br>    m = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(goods))]<br>    total_value=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i,(value,weight) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(goods):<br>        <span class="hljs-keyword">if</span> W&gt;=weight:<br>            m[i]=<span class="hljs-number">1</span><br>            W-=weight<br>            total_value+=value<br>        <span class="hljs-keyword">else</span>:<br>            m[i]=W/weight<br>            W=<span class="hljs-number">0</span><br>            total_value+=m[i]*value<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> m,total_value<br><br><span class="hljs-built_in">print</span>(fractional_backpack(goods,<span class="hljs-number">50</span>))<br><span class="hljs-comment">#拼接最大数字问题</span><br><span class="hljs-comment">#有n个非负整数，将其按照字符串拼接的方式拼接为一个整数。</span><br><span class="hljs-comment">#如何拼接可以使得得到的整数最大?</span><br><span class="hljs-comment">#例:32,94,128,1286,six.py,71</span><br><span class="hljs-comment">#可以拼接除的最大整数为94716321286128</span><br>li=[<span class="hljs-number">32</span>,<span class="hljs-number">94</span>,<span class="hljs-number">128</span>,<span class="hljs-number">1286</span>,<span class="hljs-number">6</span>,<span class="hljs-number">71</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">number_join</span>(<span class="hljs-params">li</span>):<br>    <span class="hljs-comment"># 定义一个内部函数 xy_cmp，用于比较两个数字的大小</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">xy_cmp</span>(<span class="hljs-params">x, y</span>):<br>        <span class="hljs-keyword">if</span> x + y &lt; y + x:  <span class="hljs-comment"># 如果 x+y 小于 y+x，返回 1</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> x + y &gt; y + x:  <span class="hljs-comment"># 如果 x+y 大于 y+x，返回 -1</span><br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 如果 x+y 等于 y+x，返回 0</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>            <span class="hljs-comment"># 从 functools 模块导入 cmp_to_key 函数，用于将比较函数转换为排序键函数</span><br><br>    <span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> cmp_to_key<br><br>    <span class="hljs-comment"># 将列表 li 中的每个元素转换为字符串</span><br>    li = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, li))<br>    <span class="hljs-comment"># map(str, li) 会将 li 中的每个元素转换成字符串。</span><br>    <span class="hljs-comment"># list() 函数将 map 返回的迭代器转换为列表。</span><br><br>    <span class="hljs-comment"># 使用自定义的比较函数 xy_cmp 对列表进行排序</span><br>    li.sort(key=cmp_to_key(xy_cmp))<br><br>    <span class="hljs-comment"># 使用 join 方法将排序后的列表转换为字符串并返回</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(li)<br><br><span class="hljs-built_in">print</span>(number_join(li))<br><br><span class="hljs-comment">#活动选择问题</span><br><span class="hljs-comment">#假设有n个活动，这些活动要占用同一片场地，</span><br><span class="hljs-comment">#而场地在某时刻只能供一个活动使用。</span><br><span class="hljs-comment">#每个活动都有一个开始时间s和结束时间f(题目中时间以整数表示),表示活动在[si,fi)区间占用场地。</span><br><span class="hljs-comment">#问:安排哪些活动能够使该场地举办的活动的个数最多?</span><br><span class="hljs-comment">#贪心结论:最先结束的活动一定是最优解的一部分。</span><br><span class="hljs-comment">#证明:假设a是所有活动中最先结束的活动，b是最优解中最先</span><br><span class="hljs-comment">#结束的活动。如果a=b，结论成立。</span><br><span class="hljs-comment">#如果a≠b，则b的结束时间一定晚于a的结束时间，则此时用a替</span><br><span class="hljs-comment">#换掉最优解中的b,a一定不与最优解中的其他活动时间重叠，因</span><br><span class="hljs-comment">#此替换后的解也是最优解。</span><br>activities=[(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>),(<span class="hljs-number">5</span>,<span class="hljs-number">9</span>),(<span class="hljs-number">6</span>,<span class="hljs-number">10</span>),(<span class="hljs-number">8</span>,<span class="hljs-number">11</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>),(<span class="hljs-number">8</span>,<span class="hljs-number">12</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">14</span>),(<span class="hljs-number">12</span>,<span class="hljs-number">16</span>),(<span class="hljs-number">0</span>,<span class="hljs-number">6</span>),(<span class="hljs-number">5</span>,<span class="hljs-number">7</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">9</span>)]<br><span class="hljs-comment">#保证活动是按结束时间排好序</span><br>activities.sort(key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">activities_selection</span>(<span class="hljs-params">a</span>):<br>    res=[a[<span class="hljs-number">0</span>]]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(a)):<br>        <span class="hljs-keyword">if</span> a[i][<span class="hljs-number">0</span>]&gt;=res[-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]:<span class="hljs-comment">#不冲突</span><br>            res.append(a[i])<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-built_in">print</span>(activities_selection(activities))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#栈和队列的应用——迷宫问题</span><br><span class="hljs-comment">#给一个二维列表,表示迷宫（0表示通道,1表示围墙）</span><br><span class="hljs-comment">#给出算法,求一条走出迷宫的路径</span><br><span class="hljs-comment">#栈——深度优先搜索</span><br><span class="hljs-comment">#回溯法</span><br><span class="hljs-comment">#思路:从一个节点开始,任意找下一个能走的点,</span><br><span class="hljs-comment">#当找不到能走的点时,退回上一个点寻找是否有其他方向的点。</span><br><span class="hljs-comment">#使用栈存储当前路径</span><br><span class="hljs-comment">#路径不一定为最短</span><br>maze=[<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br>]<br><br><br>dirs=[<br>    <span class="hljs-keyword">lambda</span> x,y:(x+<span class="hljs-number">1</span>,y),<br>    <span class="hljs-keyword">lambda</span> x,y:(x-<span class="hljs-number">1</span>,y),<br>    <span class="hljs-keyword">lambda</span> x,y:(x,y-<span class="hljs-number">1</span>),<br>    <span class="hljs-keyword">lambda</span> x,y:(x,y+<span class="hljs-number">1</span>),<br>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">maze_path_DFS</span>(<span class="hljs-params">x1,y1,x2,y2</span>):<br>    stack=[]<br>    stack.append((x1,y1))<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">len</span>(stack)&gt;<span class="hljs-number">0</span>):<br>        curNode=stack[-<span class="hljs-number">1</span>]<span class="hljs-comment">#当前节点</span><br>        <span class="hljs-comment">#四个方向，当前x,y</span><br>        <span class="hljs-comment">#上x+1,y;下x-1,y;左x,y-1;右x,y+1</span><br>        <span class="hljs-keyword">if</span> curNode[<span class="hljs-number">0</span>]==x2 <span class="hljs-keyword">and</span> curNode[<span class="hljs-number">1</span>]==y2:<br>            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> stack:<br>                <span class="hljs-built_in">print</span>(p)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> dirs:<br>            nextNode=<span class="hljs-built_in">dir</span>(curNode[<span class="hljs-number">0</span>],curNode[<span class="hljs-number">1</span>])<br>            <span class="hljs-comment">#如果下个节点能走</span><br>            <span class="hljs-keyword">if</span> maze[nextNode[<span class="hljs-number">0</span>]][nextNode[<span class="hljs-number">1</span>]]==<span class="hljs-number">0</span>:<br>                stack.append(nextNode)<br>                maze[nextNode[<span class="hljs-number">0</span>]][nextNode[<span class="hljs-number">1</span>]] =<span class="hljs-number">2</span><span class="hljs-comment">#标记已经走过了</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            maze[nextNode[<span class="hljs-number">0</span>]][nextNode[<span class="hljs-number">1</span>]] =<span class="hljs-number">2</span><span class="hljs-comment">#标记已经走过了</span><br>            stack.pop()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有路径&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>maze_path_DFS(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>)<br><span class="hljs-comment">#队列————广度优先搜索</span><br><span class="hljs-comment">#思路:从一个节点开始，寻找所有接下来能继续走的点，</span><br><span class="hljs-comment">#继续不断寻找,直到找到出口。</span><br><span class="hljs-comment">#使用队列存储当前正在考虑的节点</span><br><br>maze=[<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br>]<br><br>dirs=[<br>    <span class="hljs-keyword">lambda</span> x,y:(x+<span class="hljs-number">1</span>,y),<br>    <span class="hljs-keyword">lambda</span> x,y:(x-<span class="hljs-number">1</span>,y),<br>    <span class="hljs-keyword">lambda</span> x,y:(x,y-<span class="hljs-number">1</span>),<br>    <span class="hljs-keyword">lambda</span> x,y:(x,y+<span class="hljs-number">1</span>),<br>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">maze_path_BFS</span>(<span class="hljs-params">x1,y1,x2,y2</span>):<br>    <span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_p</span>(<span class="hljs-params">path</span>):<br>        curNode = path[-<span class="hljs-number">1</span>]<br>        realpath = []<br>        <span class="hljs-keyword">while</span> curNode[<span class="hljs-number">2</span>] != -<span class="hljs-number">1</span>:<br>            realpath.append(curNode[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])<br>            curNode = path[curNode[<span class="hljs-number">2</span>]]<br>        realpath.append(curNode[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])<br>        realpath.reverse()  <span class="hljs-comment"># 倒序</span><br>        <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> realpath:<br>            <span class="hljs-built_in">print</span>(node)<br>    queue=deque()<br>    queue.append((x1,y1,-<span class="hljs-number">1</span>))<br>    path=[]<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(queue)&gt;<span class="hljs-number">0</span>:<br>        curNode=queue.popleft()<br>        path.append(curNode)<br>        <span class="hljs-keyword">if</span> curNode[<span class="hljs-number">0</span>]==x2 <span class="hljs-keyword">and</span> curNode[<span class="hljs-number">1</span>]==y2:<br>            <span class="hljs-comment">#终点</span><br>            print_p(path)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> dirs:<br>            nextNode=<span class="hljs-built_in">dir</span>(curNode[<span class="hljs-number">0</span>],curNode[<span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">if</span> maze[nextNode[<span class="hljs-number">0</span>]][nextNode[<span class="hljs-number">1</span>]]==<span class="hljs-number">0</span>:<br>                queue.append((nextNode[<span class="hljs-number">0</span>],nextNode[<span class="hljs-number">1</span>],<span class="hljs-built_in">len</span>(path)-<span class="hljs-number">1</span>))<span class="hljs-comment">#后续节点进队，记录哪个节点</span><br>                maze[nextNode[<span class="hljs-number">0</span>]][nextNode[<span class="hljs-number">1</span>]] =<span class="hljs-number">2</span><span class="hljs-comment">#标记为已经走过</span><br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有路径&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>maze_path_BFS(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>技术在文化保护中的应用</title>
    <link href="/2024/04/10/%E6%8A%80%E6%9C%AF%E5%9C%A8%E6%96%87%E5%8C%96%E4%BF%9D%E6%8A%A4%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2024/04/10/%E6%8A%80%E6%9C%AF%E5%9C%A8%E6%96%87%E5%8C%96%E4%BF%9D%E6%8A%A4%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>​随着科技的不断发展，越来越多的技术被应用到了文化保护领域。文化保护是指对文化遗产、非物质文化遗产以及相关环境进行保护、传承和弘扬的过程。在这个过程中，技术发挥着至关重要的作用，它帮助我们更好地记录、传播和保护文化遗产。本文将探讨C++和Python在文化保护中的应用，并通过代码示例来展示它们的功能和实现方法。</p><p><strong>一、C++在文化保护中的应用</strong></p><p>C++是一种广泛使用的编程语言，它在文化保护中的应用主要体现在以下几个方面：</p><ol type="1"><li>数据结构与算法：C++提供了丰富的数据结构和算法库，可以用于处理大量的文化遗产数据。例如，我们可以使用C++的STL库中的map和set容器来存储和查询文化遗产的信息。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    map&lt;string, set&lt;string&gt;&gt; cultural_heritage;<br>    cultural_heritage[<span class="hljs-string">&quot;故宫&quot;</span>].<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;建筑&quot;</span>);<br>    cultural_heritage[<span class="hljs-string">&quot;故宫&quot;</span>].<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;文物&quot;</span>);<br>    cultural_heritage[<span class="hljs-string">&quot;长城&quot;</span>].<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;建筑&quot;</span>);<br>    cultural_heritage[<span class="hljs-string">&quot;长城&quot;</span>].<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;历史&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;item : cultural_heritage) &#123;<br>        cout &lt;&lt; item.first &lt;&lt; <span class="hljs-string">&quot;: &quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;tag : item.second) &#123;<br>            cout &lt;&lt; tag &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>图形处理：C++可以用于处理图像和视频数据，这对于文化遗产的数字化保护非常重要。例如，我们可以使用OpenCV库来实现对文化遗产图片的处理和分析。</li></ol><p><strong>二、Python在文化保护中的应用</strong></p><p>Python是一种简单易学的编程语言，它在文化保护中的应用主要体现在以下几个方面：</p><ol type="1"><li>网络爬虫：Python的网络爬虫库如BeautifulSoup和Scrapy可以帮助我们从互联网上获取大量的文化遗产信息。这些信息可以用于建立文化遗产数据库，为文化保护提供数据支持。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;https://www.example.com/cultural_heritage&quot;</span><br>response = requests.get(url)<br>soup = BeautifulSoup(response.text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>cultural_heritage_list = soup.find_all(<span class="hljs-string">&quot;div&quot;</span>, class_=<span class="hljs-string">&quot;cultural_heritage&quot;</span>)<br><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> cultural_heritage_list:<br>    <span class="hljs-built_in">print</span>(item.text)<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>数据可视化：Python的数据可视化库如Matplotlib和Seaborn可以帮助我们对文化遗产数据进行分析和展示。这有助于我们更好地了解文化遗产的特点和价值。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>cultural_heritage_data = [(<span class="hljs-string">&quot;故宫&quot;</span>, <span class="hljs-number">100</span>), (<span class="hljs-string">&quot;长城&quot;</span>, <span class="hljs-number">80</span>), (<span class="hljs-string">&quot;颐和园&quot;</span>, <span class="hljs-number">60</span>)]<br>names, values = <span class="hljs-built_in">zip</span>(*cultural_heritage_data)<br><br>plt.bar(names, values)<br>plt.xlabel(<span class="hljs-string">&quot;文化遗产&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;价值&quot;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>​C++和Python作为两种流行的编程语言，在文化保护领域发挥着重要作用。通过C++和Python的编程技术，我们可以更好地记录、分析和传播文化遗产，为文化保护事业做出贡献。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前缀和与差分算法</title>
    <link href="/2024/04/10/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86%E7%AE%97%E6%B3%95/"/>
    <url>/2024/04/10/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前缀和算法prefix-sum">前缀和算法(prefix sum)</h2><p>前缀和是一种简单的有效的优化算法，能把计算复杂度为O(n)的区间计算优化为O(1)的端点计算</p><h2 id="前缀和的概念">前缀和的概念</h2><p>一个长度为n的数组a[1]<sub>a[n]，前缀和sum[i]等于a[1]</sub>a[i]的和：</p><p>sum[i]=a[1]+a[2]+...+a[i]</p><p>利用递推，可以在O(n)时间内求得所有前缀和：</p><p>sum[i]=sum[i-1]+a[i]</p><p>如果预计算出前缀和，就能利用它快速计算出数组中任意一个区间a[i]~a[j]的和，即：</p><p>a[i]+a[i+1]+...+a[j-1]+a[j]=sum[j]-sum[j-1]</p><p>上式说明，复杂度为O(n)的区间求和计算，优化到了O(1)的前缀和计算</p><h2 id="前缀和例题">前缀和例题</h2><p><strong>如果建模时发现有区间求和操作，可以考虑使用前缀和优化</strong></p><h2 id="例一-0求和---蓝桥云课-lanqiao.cn">例一 <ahref="https://www.lanqiao.cn/problems/2080/learning/">0求和 - 蓝桥云课(lanqiao.cn)</a></h2><p>将给定的计算式子变换为：</p><p><span class="math display">\[S = (a_1 + a_2 + \ldots + a_{n-1}) \times a_n + (a_1 + a_2 + \ldots +a_{n-2}) \times a_{n-1} + (a_1 + a_2 + ldots + a_{n-3}) \times a_{n-2} +\ldots + (a_1 + a_2) \times a_3 + a_1 \times a_2\]</span></p><p>其中括号内的部分是前缀和 <span class="math display">\[sum[i] = a_1 + a_2 + \ldots + a_i\]</span> ，把上式改写为：</p><p><span class="math display">\[S = sum[n - 1] \times a_n + sum[n - 2] \times a_{n-1} + sum[n - 3]\times a_{n-2} + \ldots + sum[2] \times a_3 + sum[1] times a_2\]</span></p><p>式子中用到的前缀和 sum[1] ~ sum[n-1]，用递推公式 sum[i] = sum[i-1] +a[i]做一次for循环就能全部提前计算出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 一个长度为n的数组a[1]~a[n]，前缀和sum[i]等于a[1]~a[i]的和：</span><br><span class="hljs-comment"># sum[i]=a[1]+a[2]+...+a[i]</span><br><span class="hljs-comment"># 利用递推，可以在O(n)时间内求得所有前缀和：</span><br><span class="hljs-comment"># sum[i]=sum[i-1]+a[i]</span><br><span class="hljs-comment"># 如果预计算出前缀和，就能利用它快速计算出数组中任意一个区间a[i]~a[j]的和，即：</span><br><span class="hljs-comment"># a[i]+a[i+1]+...+a[j-1]+a[j]=sum[j]-sum[j-1]</span><br><span class="hljs-comment"># 上式说明，复杂度为O(n)的区间求和计算，优化到了O(1)的前缀和计算</span><br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a = [<span class="hljs-number">0</span>]+[<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>().split()]    <span class="hljs-comment">#读入a[1]~a[n]。a[0]不用</span><br><span class="hljs-built_in">sum</span> = [<span class="hljs-number">0</span>] * (n+<span class="hljs-number">1</span>) <span class="hljs-comment">#定义前缀和--&gt;[0, 0, 0, 0, 0, 0, 0]</span><br><span class="hljs-built_in">sum</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>    <span class="hljs-built_in">sum</span>[i] = a[i]+<span class="hljs-built_in">sum</span>[i-<span class="hljs-number">1</span>]  <span class="hljs-comment">#预计算前缀和sum[1]~sum[n-1]</span><br>s=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>    s += <span class="hljs-built_in">sum</span>[i]*a[i+<span class="hljs-number">1</span>]      <span class="hljs-comment">#计算和s</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h2 id="例二-0可获得的最小取值---蓝桥云课-lanqiao.cn">例二 <ahref="https://www.lanqiao.cn/problems/3142/learning/">0可获得的最小取值- 蓝桥云课 (lanqiao.cn)</a></h2><p>第一步肯定是排序，例如从小到大排序，然后再进行两种操作。操作（1）在<code>a[]</code>的尾部选一个数，操作（2）在<code>a[]</code>的头部选2个数。</p><p>容易想到一种简单方法：每次在操作（1）和操作（2）中选较小的值。这是贪心法的思路。但是贪心法对吗？分析之后发现贪心法是错误的，例如{3,1, 1, 1, 1, 1,1}，做<code>k=3</code>次操作，每次都按贪心法，做3次操作（2），结果是6。但是正确答案是做3次操作（1），结果是5。</p><p>回头重新考虑所有可能的情况。设操作（2）做<code>p</code>次，操作（1）做<code>k-p</code>次，求和：</p><p><span class="math display">\[\sum_{i=1}^{2p} a_i + \sum_{i=n+p-k+1}^{n} a_i\]</span></p><p>为了找最小的和，需要把所有的<code>p</code>都试一遍。如果直接按上面的公式计算，那么验证一个<code>p</code>的计算量是O(n)的，验证所有的<code>p</code>，1≤p≤k，总计算量O(kn)，超时。</p><p>容易发现公式的两个部分就是前缀和，分别等于<code>sum[2p]</code>、<code>sum[n] - sum[n+p-k]</code>。如果提前算出前缀和<code>sum[]</code>，那么验证一个<code>p</code>的时间是O(1)的，验证所有<code>p</code>的总计算量是O(n)的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">n, k = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>b = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>a=[<span class="hljs-number">0</span>] + <span class="hljs-built_in">sorted</span>(b)       <span class="hljs-comment"># a[0]不用，从a[1]开始</span><br>s = [<span class="hljs-number">0</span>] * (n+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):  <br>    s[i] = s[i-<span class="hljs-number">1</span>] + a[i]<br>ans = <span class="hljs-number">10</span>**<span class="hljs-number">18</span><br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, k+<span class="hljs-number">1</span>):<br>    ans = <span class="hljs-built_in">min</span>(s[n] - s[n+p-k] + s[<span class="hljs-number">2</span>*p], ans)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="例三-二维前缀和">例三 二维前缀和</h2><p>  前面的例子都是一位数组上的前缀和，下面介绍<strong>二维数组上的前缀和</strong>。例题：<a href="https://www.luogu.com.cn/problem/P2004">领地选择</a>  概况题意：在n×m的矩形中找一个边长为c的正方形，把正方形内所有坐标点的值相加，使价值最大。  本题是二维前缀和的直接应用。   一维前缀和定义在一维数组a[]上：sum[i] =a[1] + a[2] + … + a[i]  把一维数组a[]看成一条直线上的坐标，前缀和就是所有坐标值的和。 <imgsrc="https://img-blog.csdnimg.cn/direct/c8624238adc54d5cb0d77c8a97c848ff.png"alt="在这里插入图片描述" /></p><p>  二维前缀和是一维前缀和的推广。设二维数组a[][]有1<sub>n行，1</sub>m列，二维前缀和：    sum[i][j] = a[1][1]+a[1][2]+a[1][3]+…+a[1][j]         +a[2][1]+a[2][2]+a[2][3]+…+a[2][j]         + …         +a[i][1]+a[i][2]+a[i][3]+…+a[i][j]  把a[i][j]的(i,j)看成二维平面的坐标，那么sum[i][j]就是左下角坐标(1,1)和右上角坐标(i,j)围成的方形中所有坐标点的和。</p><p><imgsrc="https://img-blog.csdnimg.cn/direct/4347d57dad2d41f2a2285b124f7d1336.png"alt="在这里插入图片描述" />   二维前缀和sum[][]存在以下递推关系：  sum[i][j] = sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1]+a[i][j]  根据这个递推关系，用两种for循环可以算出sum[][]。  对照上图理解这个公式，sum[i-1][j]是坐标(1,1) ~ (i-1,j)内所有的点，sum[i][j-1]是(1,1) ~ (i,j-1)内所有的点，两者相加，其中sum[i-1][j-1]被加了两次，所以要减去一次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">n, m , c = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>a = []<br>a.append([<span class="hljs-number">0</span>]*(m+<span class="hljs-number">1</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n):<br>    a.append([<span class="hljs-built_in">int</span>(k) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>().split()])<br>    a[i+<span class="hljs-number">1</span>].insert(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>):<br>        a[i][j] = a[i][j] + a[i-<span class="hljs-number">1</span>][j] + a[i][j-<span class="hljs-number">1</span>] - a[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]<br>Max = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;-inf&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">2</span>-c):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m+<span class="hljs-number">2</span>-c):<br>        ans = a[i+c-<span class="hljs-number">1</span>][j+c-<span class="hljs-number">1</span>] - a[i+c-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>] - a[i-<span class="hljs-number">1</span>][j+c-<span class="hljs-number">1</span>] + a[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> ans &gt; Max:<br>            Max = ans<br>            x = i<br>            y = j<br><span class="hljs-built_in">print</span>(x, y)<br></code></pre></td></tr></table></figure><h1 id="差分算法">差分算法</h1><p>前缀和的主要应用是差分：<strong>差分是前缀和的逆运算</strong>。  与一维数组a[]对应的差分数组d[]的定义：     d[k]=a[k]-a[k-1]  即原数组a[]的相邻元素的差。根据d[]的定义，可以推出：    a[k]=d[1]+d[2]+…+d[k]  即a[]是d[]的前缀和，所以“差分是前缀和的逆运算”。  为方便理解，把每个a[]看成直线上的坐标。每个d[]看成直线上的小线段，它的两端是相邻的a[]。这些小线段相加，就得到了从起点开始的长线段a[]。<imgsrc="https://img-blog.csdnimg.cn/direct/470129757e104b1abc91c3ca77c3a16a.png"alt="在这里插入图片描述" />  差分是一种处理数据的巧妙而简单的方法，它应用于区间的修改和询问问题。把给定的数据元素集A分成很多区间，对这些区间做很多次操作，每次操作是对某个区间内的所有元素做相同的加减操作，若一个个地修改这个区间内的每个元素，非常耗时。引入“差分数组”，当修改某个区间时，只需要修改这个区间的“端点”，就能记录整个区间的修改</p>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>帮派弟位</title>
    <link href="/2024/04/08/%E5%B8%AE%E6%B4%BE%E5%BC%9F%E4%BD%8D/"/>
    <url>/2024/04/08/%E5%B8%AE%E6%B4%BE%E5%BC%9F%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述">问题描述</h1><p>小明在游戏中参加了一个帮派，这一天他突然想知道自己在帮派中是什么地位，但是帮派的查询系统突然坏了，目前只能知道每个人的附属关系，请问你能帮帮他重建关系网并找出他的地位吗? 给定一个正整数n，代表该帮派的总人数，并且小明的序号是m给出这n个人中每个人的附属关系，确保给出的关系网为一棵树。帮派地位的定义是按照自己手下有多少帮众决定的，<strong>注意手下的手下也算是自己的手下</strong>。如果手下的帮众相同则按序号较小的在前面。你能帮助小明找到自己的帮派地位吗?</p><h1 id="输入格式">输入格式</h1><p>第一行，两个正整数n(1&lt;n&lt;10^5)和m(1&lt;=m&lt;=n)代表该帮派的总人数以及小明的序号接下来n-1行，每行两个正整数，格式如下: L r(1&lt;L,r&lt;n)，代表序号为的L人附属于序号为r的人。</p><h1 id="输出格式">输出格式</h1><p>一行，包含1个正整数，输出按手下人数多少排序后小明的排名。</p><h1 id="mycode">Mycode</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">n,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>li=[]<br>person=[[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>person_num=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>    l,r=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    li.append((l,r))<br>li.sort(key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>    a=li[i]<span class="hljs-comment">#(2, 1)</span><br>    person[a[<span class="hljs-number">1</span>]].append(a[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(person[i])!=<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> person[i]:<span class="hljs-comment">#[2, 3]</span><br>            person[i]=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(person[i]+person[j]))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    a,b=i,<span class="hljs-built_in">len</span>(person[i])<br>    person_num.append((a,b))<br>person_num.sort(key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>],reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> person_num:<br>    <span class="hljs-keyword">if</span> i[<span class="hljs-number">0</span>]==m:<br>        <span class="hljs-built_in">print</span>(person_num.index(i)+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01串的熵</title>
    <link href="/2024/04/08/01%E4%B8%B2%E7%9A%84%E7%86%B5/"/>
    <url>/2024/04/08/01%E4%B8%B2%E7%9A%84%E7%86%B5/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.lanqiao.cn/problems/3498/learning/">001串的熵 -蓝桥云课 (lanqiao.cn)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># import os</span><br><span class="hljs-comment"># import sys</span><br><span class="hljs-comment"># import math</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># # 请在此输入您的代码</span><br><span class="hljs-comment"># x = 23333333</span><br><span class="hljs-comment"># for i in range(1,x//2):  # 0出现的次数,小于x/2就能保证1的次数大于0的</span><br><span class="hljs-comment">#    j=x-i</span><br><span class="hljs-comment">#    if round((j/x)*(math.log2(j/x))*j+(i/x)*(math.log2(i/x))*i,4)==-11625907.5798:</span><br><span class="hljs-comment">#      print(i)</span><br><span class="hljs-comment">#      break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">11027421</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>幸运数</title>
    <link href="/2024/04/08/%E5%B9%B8%E8%BF%90%E6%95%B0/"/>
    <url>/2024/04/08/%E5%B9%B8%E8%BF%90%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述">问题描述</h1><p>小蓝认为如果一个数含有偶数个数位，并且前面一半的数位之和等于后面一半的数位之和，则这个数是他的幸运数字。例如2314是一个幸运数字,因为它有4个数位,并且2+3=1+4。现在请你帮他计算从1至100000000之间共有多少个不同的幸运数字。</p><h1 id="答案提交">答案提交</h1><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h1 id="mycode">Mycode</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#def lucky_num(x):</span><br><span class="hljs-comment">#     len_x=len(x)</span><br><span class="hljs-comment">#     if len_x%2==0:#含有偶数个数位</span><br><span class="hljs-comment">#         a=x[:len_x//2]</span><br><span class="hljs-comment">#         a_sum=0</span><br><span class="hljs-comment">#         for i in a:</span><br><span class="hljs-comment">#             a_sum+=int(i)</span><br><span class="hljs-comment">#         b=x[len_x//2:]</span><br><span class="hljs-comment">#         b_sum=0</span><br><span class="hljs-comment">#         for j in b:</span><br><span class="hljs-comment">#             b_sum+=int(j)</span><br><span class="hljs-comment">#         if a_sum==b_sum:</span><br><span class="hljs-comment">#             return 1</span><br><span class="hljs-comment">#         else:</span><br><span class="hljs-comment">#             return 0</span><br><span class="hljs-comment">#     else:</span><br><span class="hljs-comment">#         return 0</span><br><span class="hljs-comment"># res=0</span><br><span class="hljs-comment"># for i in range(1,100000001):</span><br><span class="hljs-comment">#     res+=lucky_num(str(i))</span><br><span class="hljs-comment"># print(res)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">4430091</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修建灌木</title>
    <link href="/2024/04/08/%E4%BF%AE%E5%BB%BA%E7%81%8C%E6%9C%A8/"/>
    <url>/2024/04/08/%E4%BF%AE%E5%BB%BA%E7%81%8C%E6%9C%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述">问题描述</h1><p>爱丽丝要完成一项修剪灌木的工作有N棵灌木整齐的从左到右排成一排。爱丽丝在每天傍晚会修剪一棵灌木让灌木的高度变为0厘米。爱丽丝修剪灌木的顺序是从最左侧的灌木开始每天向右修剪一棵灌木。当修剪了最右侧的灌木后,她会调转方向,下一天开始向左修剪灌木。直到修剪了最左的灌木后再次调转方向。然后如此循环往复灌木每天从早上到傍晚会长高1厘米而其余时间不会长高。在第一天的早晨，所有灌木的高度都是厘米。爱丽丝想知道每灌木最高长到多高</p><h1 id="输入格式">输入格式</h1><p>一个正整数N含义如题面所述</p><h1 id="输出格式">输出格式</h1><p>输出N行每行一个整数第行表示从左到右第棵最高能长到多高。</p><h1 id="mycode">Mycode</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(i-<span class="hljs-number">1</span>,n-i)*<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最小砝码</title>
    <link href="/2024/04/08/%E6%9C%80%E5%B0%8F%E7%A0%9D%E7%A0%81/"/>
    <url>/2024/04/08/%E6%9C%80%E5%B0%8F%E7%A0%9D%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述">问题描述</h1><p>你有一架天平。现在你要设计一套砝码，使得利用这些砝码可以称出任意小于等于N的正整数重量那么这套砝码最少需要包含多少个砝码? 注意砝码可以放在天平两边</p><h1 id="输入格式">输入格式</h1><p>输入包含一个正整数N</p><h1 id="输出格式">输出格式</h1><p>输出一个整数代表答案</p><h1 id="mycode">Mycode</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">li=[<span class="hljs-number">0</span>]<br>N=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">while</span>(li[-<span class="hljs-number">1</span>]&lt;N):<br>    li.append(li[-<span class="hljs-number">1</span>]*<span class="hljs-number">3</span>+<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(li.index(li[-<span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>幸运数字</title>
    <link href="/2024/04/08/%E5%B9%B8%E8%BF%90%E6%95%B0%E5%AD%97/"/>
    <url>/2024/04/08/%E5%B9%B8%E8%BF%90%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述">问题描述</h1><p>哈沙德数是指在某个固定的进位制当中，可以被各位数字之和整除的正整数。例如126是十进制下的一个哈沙德数，因为(126)10mod(1+2+6)0;126 也是进制下的哈沙德数，因为(126)10 =(176)8，(126)10mod(1+7+6)=0;同时 126也是16进制下的哈沙德数，因为(126)10(7e)16，(126)10mod(7+e)=0。小蓝认为，如果一个整数在二进制、八进制、十进制、十六进制下均为哈沙德数，那么这个数字就是幸运数字，第1至第10个幸运数字的+进制表示为:1,2,4,6,8,40,48,72,120,126...。现在他想知道第2023个幸运数字是多少?你只需要告诉小蓝这个整数的十进制表示即可。</p><h1 id="答案提交">答案提交</h1><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h1 id="mycode">Mycode</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">harshad_num</span>(<span class="hljs-params">a,<span class="hljs-built_in">str</span></span>):<br>    num_sum=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">if</span> i==<span class="hljs-string">&quot;a&quot;</span>:<br>            num_sum +=<span class="hljs-number">10</span><br>        <span class="hljs-keyword">elif</span> i==<span class="hljs-string">&quot;b&quot;</span>:<br>            num_sum += <span class="hljs-number">11</span><br>        <span class="hljs-keyword">elif</span> i==<span class="hljs-string">&quot;c&quot;</span>:<br>            num_sum += <span class="hljs-number">12</span><br>        <span class="hljs-keyword">elif</span> i==<span class="hljs-string">&quot;d&quot;</span>:<br>            num_sum += <span class="hljs-number">13</span><br>        <span class="hljs-keyword">elif</span> i==<span class="hljs-string">&quot;e&quot;</span>:<br>            num_sum += <span class="hljs-number">14</span><br>        <span class="hljs-keyword">elif</span> i==<span class="hljs-string">&quot;f&quot;</span>:<br>            num_sum += <span class="hljs-number">15</span><br>        <span class="hljs-keyword">else</span>:<br>            num_sum += <span class="hljs-built_in">int</span>(i)<br>    <span class="hljs-keyword">if</span> num_sum==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">elif</span> a%num_sum==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>times=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000000000000</span>):<br>    bin_num=<span class="hljs-built_in">bin</span>(i)[<span class="hljs-number">2</span>:]<br>    oct_num=<span class="hljs-built_in">oct</span>(i)[<span class="hljs-number">2</span>:]<br>    hex_num=<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">if</span> harshad_num(i,bin_num)==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> harshad_num(i,<span class="hljs-built_in">str</span>(i)) <span class="hljs-keyword">and</span> harshad_num(i,oct_num)==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> harshad_num(i,hex_num)==<span class="hljs-number">1</span>:<br>        times+=<span class="hljs-number">1</span><span class="hljs-comment">#注意十进制整除</span><br>    <span class="hljs-keyword">if</span> times==<span class="hljs-number">2023</span>:<br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>串的处理</title>
    <link href="/2024/04/08/%E4%B8%B2%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <url>/2024/04/08/%E4%B8%B2%E7%9A%84%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><p>在实际的开发工作中，对字符串的处理是最常见的编程任务。本题目即是要求程序对用户输入的串进行处理。具体规则如下1.把每个单词的首字母变为大写 2.把数字与字母之间用下划线字符(_)分开，使得更清晰 3把单词中间有多个空格的调整为1个空格</p><h1 id="输入描述">输入描述</h1><p>用户输入的串中只有小写字母，空格和数字，不含其它的字母或符号。每个单词间由1个或多个空格分隔。假设用户输入的串长度不超过200个字符</p><h1 id="输出描述">输出描述</h1><p>输出处理好的字符串</p><h1 id="mycode">Mycode</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-built_in">input</span>().split()<br>l_new = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>    i = <span class="hljs-built_in">list</span>(i)<br>    new=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(i)-<span class="hljs-number">1</span>):<br>        new+=i[j]<br>        <span class="hljs-keyword">if</span> i[j].isdigit() <span class="hljs-keyword">and</span> i[j+<span class="hljs-number">1</span>].isalpha():new+=<span class="hljs-string">&#x27;_&#x27;</span><br>        <span class="hljs-keyword">if</span> i[j].isalpha() <span class="hljs-keyword">and</span> i[j+<span class="hljs-number">1</span>].isdigit():new+=<span class="hljs-string">&#x27;_&#x27;</span><br>    new+=i[-<span class="hljs-number">1</span>]<br>    l_new.append(new)<br>s_new = <span class="hljs-string">&quot; &quot;</span>.join([i[<span class="hljs-number">0</span>].upper()+i[<span class="hljs-number">1</span>:] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l_new])<br><span class="hljs-built_in">print</span>(s_new)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优美的数组</title>
    <link href="/2024/04/08/%E4%BC%98%E7%BE%8E%E7%9A%84%E6%95%B0%E7%BB%84/"/>
    <url>/2024/04/08/%E4%BC%98%E7%BE%8E%E7%9A%84%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p>问题描述给定一个长度为n的数组a，数组中的元素分别是a~an。数组中的每一个元素都有一个美丽值。美丽值的定义如下:假设当前元素为 ai，该元素位置左侧第一个严格小于a;的元素的值为 ，如果不存在则a0，该元素右侧第一个严格大于a;的元素值为y，如果不存在则y0，a的美丽值定义为 x*y给定一个整数m，如果数组a所有元素的美丽值之和至少为m那么整个数组是优美的，否则不是。</p><h1 id="输入格式">输入格式</h1><p>第一行包含两个正整数n,m，其含义如上所述 第二行包含n个正整数 a1~an，表示数组中的每一个元素</p><h1 id="输出格式">输出格式</h1><p>输出仅包含1行，如果整个数组是优美的，则输出YES，否则输出NO</p><h1 id="样例输入">样例输入</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs input">5 10<br>2 3 4 5<br></code></pre></td></tr></table></figure><h1 id="样例输出">样例输出</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs output">YES<br></code></pre></td></tr></table></figure><h1 id="说明">说明</h1><p>在样例中，第一个元素的美丽值为0，第二个元素的美丽值为1x3=3，第三个元素的美丽值为2x4=8，第四个元素的美丽值为3x5=15，第五个元素的美丽值为0。因此总美丽值为26，大于给定的m的值，因此答案为 YES。 评测数据规模 对于100%的评测数据，1&lt;n &lt; <span class="math display">\[1&lt;n&lt;10^5，1&lt;a\]</span> ，1a 10，1 m&lt;1018</p>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>交换瓶子(冒泡排序)</title>
    <link href="/2024/04/08/%E4%BA%A4%E6%8D%A2%E7%93%B6%E5%AD%90-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/04/08/%E4%BA%A4%E6%8D%A2%E7%93%B6%E5%AD%90-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><p>有N个瓶子，编号1~N，放在架子上 比如有5个瓶子 21 354要求每次拿起2个瓶子，交换它们的位置 经过若干次后，使得瓶子的序号为:12345 对于这么简单的情况，显然，至少需要交换2次就可以复位如果瓶子更多呢?你可以通过编程来解决</p><h1 id="输入描述">输入描述</h1><p>输入格式为两行 第一行:一个正整数N(N&lt;104)表示瓶子的数目第二行:个正整数，用空格分开，表示瓶子目前的排列情况</p><h1 id="输出描述">输出描述</h1><p>输出数据为一行一个正整数，表示至少交换多少次，才能完成排序。</p><h1 id="mycode">Mycode</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">N=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>li=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>change=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(li)):<br>    <span class="hljs-keyword">if</span> li[i]!=i+<span class="hljs-number">1</span>:<span class="hljs-comment">#如果li[i]不等于（序列号+1）</span><br>        a=li.index(i+<span class="hljs-number">1</span>)<br>        li[i],li[a]=li[a],li[i]<br>        change+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(change)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图像模糊</title>
    <link href="/2024/04/08/%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A/"/>
    <url>/2024/04/08/%E5%9B%BE%E5%83%8F%E6%A8%A1%E7%B3%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><p>小蓝有一张黑白图像，由nxm个像素组成，其中从上到下共n行，每行从左到右m列。每个像素由一个0到255之间的灰度值表示。现在，小蓝准备对图像进行模糊操作，操作的方法为:对于每个像素，将以它为中心3x3区域内的所有像素(可能是9个像素或少于9个像素)求和后除以这个范围内的像素个数(取下整)，得到的值就是模糊后的结果请注意每个像素都要用原图中的灰度值计算求和。</p><h1 id="输入描述">输入描述</h1><p>输入的第一行包含两个整数n,m。第2行到第n+1行每行包含m个整数，表示每个像素的灰度值，相邻整数之间用一个空格分隔其中，1&lt;n,m&lt;100</p><h1 id="输出描述">输出描述</h1><p>输出n行，每行m个整数，相邻整数之间用空格分隔，表示模糊后的图像。</p><h1 id="mycode">Mycode</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">n,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>a=[]<br>b=[[<span class="hljs-number">0</span>]*m <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    a.append(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>        suma=<span class="hljs-number">0</span><br>        c=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i-<span class="hljs-number">1</span>,i+<span class="hljs-number">2</span>):<br>            <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(j-<span class="hljs-number">1</span>,j+<span class="hljs-number">2</span>):<br>                <span class="hljs-keyword">if</span> <span class="hljs-number">0</span>&lt;=k&lt;n <span class="hljs-keyword">and</span> <span class="hljs-number">0</span>&lt;=l&lt;m:<br>                    suma=suma+a[k][l]<br>                    c=c+<span class="hljs-number">1</span><br>        b[i][j]=suma//c<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,i)))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无尽的石头</title>
    <link href="/2024/04/08/%E6%97%A0%E5%B0%BD%E7%9A%84%E7%9F%B3%E5%A4%B4/"/>
    <url>/2024/04/08/%E6%97%A0%E5%B0%BD%E7%9A%84%E7%9F%B3%E5%A4%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述">问题描述</h1><p>在一个古老的迷宫中，有一道无尽的通道。通道上每隔一定的距离就会有一块神秘的石头，石头上刻着从1开始的连续整数。从1号石头开始，每块石头的编号都比前一块大1。石头上的数字有特殊的意义。如果你站在编号为n的石头上，并向前走，你将会瞬间移动到编号为n+x的石头上，其中x为的各位数字之和。例如，如果你站在编号为 16的石头上，由于1+6=7，所以下一步你会移动到编号为16+7=23的石头上。现在，会有多次询问，你需要对每个询问输出从1号石头出发到达指定编号石头的最少步数，如果无法到达，则输出-1。</p><h1 id="输入格式">输入格式</h1><p>输入包含一个整数t，(1&lt;t100)，表示有t个询问</p><p>接下来t行，每行一个整数n，(1n10)，表示目标石头 的编号。</p><h1 id="输出格式">输出格式</h1><p>对于每个询问，输出一行，表示从 1 号石头到达目标石头的最少步数。如果无法到达，输出 -1。</p><h1 id="mycode">Mycode</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">num_sum</span>(<span class="hljs-params">num</span>):<br>    num=<span class="hljs-built_in">str</span>(num)<br>    res=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> num:<br>        res+=<span class="hljs-built_in">int</span>(i)<br>    <span class="hljs-keyword">return</span> res<br>stone_li=[<span class="hljs-number">1</span>]<br>t=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>    n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> stone_li:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(stone_li[:stone_li.index(n)+<span class="hljs-number">1</span>])-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">while</span> stone_li[-<span class="hljs-number">1</span>] &lt; n:<br>            a = num_sum(stone_li[-<span class="hljs-number">1</span>]) + stone_li[-<span class="hljs-number">1</span>]<br>            stone_li.append(a)<br>        <span class="hljs-keyword">if</span> stone_li[-<span class="hljs-number">1</span>] == n:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(stone_li) - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(-<span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>math</title>
    <link href="/2024/04/08/math/"/>
    <url>/2024/04/08/math/</url>
    
    <content type="html"><![CDATA[<p>平方和公式 <span class="math display">\[n\cdot(n+1)\cdot(2n+1)\over6\]</span></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>小蓝和小桥的挑战</title>
    <link href="/2024/04/08/%E5%B0%8F%E8%93%9D%E5%92%8C%E5%B0%8F%E6%A1%A5%E7%9A%84%E6%8C%91%E6%88%98/"/>
    <url>/2024/04/08/%E5%B0%8F%E8%93%9D%E5%92%8C%E5%B0%8F%E6%A1%A5%E7%9A%84%E6%8C%91%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>小蓝和小桥是游戏世界里的两个好友，他们正在玩一个有趣的挑战。他们手中有一个长度为n的神秘物品序列，每个物品都有一个数字a;表示它的价值。他们可以执行以下操作:选择一个物品，并将其价值加1。小蓝和小桥希望通过若干次操作使得这个序列的价值之和与价值的积都不为0。请你帮他们计算，至少需要执行多少次操作才能完成这个挑战</p><h1 id="输入格式">输入格式</h1><p>第一行包含一个整数t(1t100)，表示测试用例的数量接下来t行，每行包含两行数据，第一行为一个整数n(1&lt;n&lt;1000)，表示物品的数量。第二行为n个整数a1,a2,...,an(-1000 &lt;ai 1000)，表示初始的物品价值。</p><h1 id="输出格式">输出格式</h1><p>对于每个测试用例，输出一行一个整数，表示至少需要执行的操作次数。</p><h1 id="mycode">MyCode</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">t=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>    n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    li=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>    change=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">if</span> li[j]==<span class="hljs-number">0</span>:<br>            li[j]=<span class="hljs-number">1</span><br>            change+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>(li) == <span class="hljs-number">0</span>:<br>        change+=<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(change)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最少砝码</title>
    <link href="/2024/04/02/%E6%9C%80%E5%B0%91%E7%A0%9D%E7%A0%81/"/>
    <url>/2024/04/02/%E6%9C%80%E5%B0%91%E7%A0%9D%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述">问题描述</h1><p>你有一架天平。现在你要设计一套砝码，使得利用这些磁码可以称出任意小于等于 的正整数重量 那么这套砝码最少需要包含多少个砝码?注意砝码可以放在天平两边。</p><h1 id="输入格式">输入格式</h1><p>输入包含一个正整数 N。</p><h1 id="输出格式">输出格式</h1><p>输出一个整数代表答案</p><h1 id="样例输入">样例输入</h1><p>7</p><h1 id="样例输出">样例输出</h1><p>3</p><h1 id="样例说明">样例说明</h1><p>3个砝码重量是1、4、6，可以称出1至7的所有重量 1=1;2=6-4(天平一边放6，另一边放 4); 3=4-1; 4=4; 5=6-1; 6=6; 7=1+6;少于3个砝码不可能称出1至7的所有重</p><h1 id="评测用例规模与约定">评测用例规模与约定</h1><p>对于所有评测用例，1&lt;=N&lt;=000000000</p><p>MyCode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#1 (1)-&gt;1</span><br><span class="hljs-comment">#2 (1+1)-&gt;2</span><br><span class="hljs-comment">#3 (2+1)-&gt;2</span><br><span class="hljs-comment">#4 (2+1+1)-&gt;3</span><br><span class="hljs-comment">#5 (3+1+1)-&gt;3</span><br><span class="hljs-comment">#6 (2+3+1)-&gt;3</span><br><span class="hljs-comment">#7 (1+4+6)-&gt;3</span><br><span class="hljs-comment">#8 (4+2+1+1)-&gt;4</span><br><span class="hljs-comment">#9 (4+2+1+2)-&gt;4</span><br><span class="hljs-comment">#10 (5+1+3+1)-&gt;4</span><br><span class="hljs-comment">#11 (6+1+3+1)-&gt;4</span><br><span class="hljs-comment">#12 (6+2+3+1)-&gt;4</span><br><span class="hljs-comment">#13 (7+2+3+1)-&gt;4</span><br><span class="hljs-comment">#14 (8+2+3+1)-&gt;4</span><br><span class="hljs-comment">#15 (9+2+3+1)-&gt;4</span><br><span class="hljs-comment">#16 (9+2+3+1+1)-&gt;5</span><br><br>li=[<span class="hljs-number">0</span>]<br>N=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">while</span>(li[-<span class="hljs-number">1</span>]&lt;N):<br>    li.append(li[-<span class="hljs-number">1</span>]*<span class="hljs-number">3</span>+<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(li.index(li[-<span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>缩位求和(迭代,递归)</title>
    <link href="/2024/03/27/%E7%BC%A9%E4%BD%8D%E6%B1%82%E5%92%8C/"/>
    <url>/2024/03/27/%E7%BC%A9%E4%BD%8D%E6%B1%82%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>在电子计算机普及以前，人们经常用一个粗略的方法来验算四则运算是否正确。比如: 248 x15 =3720把乘数和被乘数分别逐位求和，如果是多位数再逐位求和，直到是1位数，得2+4+8=14==&gt;1+4=5; 1+5=6; 5x6 而结果逐位求和为3。5x6的结果逐位求和与3符合，说明正确的可能性很大!! (不能排除错误)请你写一个计算机程序，对给定的字符串逐位求和。</p><h2 id="输入描述">输入描述</h2><p>输入为一个由数字组成的串，表示n(n&lt;1000)位数</p><h2 id="输出描述">输出描述</h2><p>输出为一位数，表示反复逐位求和的结果</p><h2 id="mycode">MyCode</h2><p>递归算法：递归算法是一种通过将问题分解为更小的子问题来解决问题的方法。在递归算法中，函数会调用自身来解决子问题，直到达到基本情况（basecase）为止。递归算法通常具有简洁的代码，但可能会导致栈溢出等问题。</p><p>迭代算法：迭代算法是一种通过重复执行一系列操作来解决问题的方法。在迭代算法中，不需要使用递归调用，而是通过循环结构来实现。迭代算法通常具有较好的性能，但可能需要更多的代码来实现相同的功能。</p><h3 id="迭代写法">迭代写法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>x = num<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">num_sum</span>(<span class="hljs-params">a</span>):<br>    a = <span class="hljs-built_in">str</span>(a)<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>        res += <span class="hljs-built_in">int</span>(i)<br>    <span class="hljs-keyword">return</span> res<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(x)) != <span class="hljs-number">1</span>:<br>    x = num_sum(x)<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><p>这段代码实现了一个迭代算法，用于计算一个数字的各个位数之和，直到结果为一位数为止。首先，将输入的数字转换为字符串，然后遍历字符串中的每个字符，将其转换为整数并累加到结果中。最后，当结果为一位数时，输出结果。</p><h3 id="递归写法">递归写法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">num_sum</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(a)) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> a<br>    <span class="hljs-keyword">else</span>:<br>        a = <span class="hljs-built_in">str</span>(a)<br>        res = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>            res += <span class="hljs-built_in">int</span>(i)<br>        <span class="hljs-keyword">return</span> num_sum(res)<br><br>num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-built_in">print</span>(num_sum(num))<br></code></pre></td></tr></table></figure><p>这段代码实现了一个递归算法，用于计算一个数字的各个位数之和，直到结果为一位数为止。首先判断输入的数字是否只有一位，如果是，则直接返回该数字；否则，将输入的数字转换为字符串，遍历字符串中的每个字符（即数字的每一位），将其转换为整数并累加到结果中。然后，将累加得到的结果作为参数，再次调用递归函数进行求和操作。这样，每次递归都会将数字的各个位数相加，直到结果只剩下一位数为止。最后，输出最终的结果。</p>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最大距离</title>
    <link href="/2024/03/26/%E6%9C%80%E5%A4%A7%E8%B7%9D%E7%A6%BB/"/>
    <url>/2024/03/26/%E6%9C%80%E5%A4%A7%E8%B7%9D%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<figure><img src="/images/LQ155.png" alt="图片" /><figcaption aria-hidden="true">图片</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><br>li=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br><br><span class="hljs-built_in">max</span>=-<span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">distance</span>(<span class="hljs-params">i, j</span>):<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(i-j)+<span class="hljs-built_in">abs</span>(li[i]-li[j])<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(li)):<br><br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(li)):<br><br>     <span class="hljs-keyword">if</span> distance(i,j)&gt;<span class="hljs-built_in">max</span>:<br><br>       <span class="hljs-built_in">max</span>=distance(i,j)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>灌溉</title>
    <link href="/2024/03/26/%E7%81%8C%E6%BA%89/"/>
    <url>/2024/03/26/%E7%81%8C%E6%BA%89/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>小蓝负责花园的灌溉工作花园可以看成一个n行m列的方格图形。中间有一部分位置上安装有出水管小蓝可以控制一个按钮同时打开所有的出水管，打开时，有出水管的位置可以被认为已经灌溉好每经过一分钟，水就会向四面扩展一个方格，被扩展到的方格可以被认为已经灌溉好。即如果前一分钟某一个方格被灌溉好，则下一分钟它上下左右的四个方格也被灌溉好给定花园水管的位置，请问k分钟后，有多少个方格被灌溉好?</p><h2 id="输入描述">输入描述</h2><p>输入的第一行包含两个整数n,m。 第二行包含一个整数t，表示出水管的数量接下来t行描述出水管的位置，其中第行包含两个数rc表示第r行第c列有一个排水管。接下来一行包含一个整数 k。 其中，1&lt;=n,m&lt;=100,1&lt;=t&lt;=10,1&lt;= k&lt;=100.</p><h2 id="输出描述">输出描述</h2><p>输出一个整数，表示答案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">n,m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>t = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]  <span class="hljs-comment">#初始的方格</span><br>b = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]  <span class="hljs-comment">#灌溉后的方格</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>    r,c = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    a[r-<span class="hljs-number">1</span>][c-<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>   <span class="hljs-comment">#初始化出水口</span><br>k = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-comment">#遍历</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):    <span class="hljs-comment">#一分钟灌溉一次</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            <span class="hljs-keyword">if</span> a[i][j]==<span class="hljs-number">1</span>:<br>                b[i][j]=<span class="hljs-number">1</span>  <span class="hljs-comment">#中心值标记</span><br>                <span class="hljs-keyword">if</span> i-<span class="hljs-number">1</span>&gt;=<span class="hljs-number">0</span>:  <span class="hljs-comment">#合格范围编辑四个方向的水管</span><br>                    b[i-<span class="hljs-number">1</span>][j]=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span>&lt;n:<br>                    b[i+<span class="hljs-number">1</span>][j]=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> j-<span class="hljs-number">1</span>&gt;=<span class="hljs-number">0</span>:<br>                    b[i][j-<span class="hljs-number">1</span>]=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> j+<span class="hljs-number">1</span>&lt;m:<br>                    b[i][j+<span class="hljs-number">1</span>]=<span class="hljs-number">1</span><br>    a = b                   <span class="hljs-comment">#灌溉完毕递归下一次</span><br><span class="hljs-comment">#输出</span><br>cnt = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>        cnt += j<br><span class="hljs-built_in">print</span>(cnt)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最长递增</title>
    <link href="/2024/03/26/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E/"/>
    <url>/2024/03/26/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E/</url>
    
    <content type="html"><![CDATA[<figure><img src="/images/LQ158_1.png" alt="图片" /><figcaption aria-hidden="true">图片</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>li=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>len_list=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(li)):<br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(li)):<br>     temp=li[i:j]<br>     <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(temp)!=<span class="hljs-number">0</span>:<br>       sort_temp = <span class="hljs-built_in">sorted</span>(temp)<br>       <span class="hljs-keyword">if</span> sort_temp == temp:<br>         len_list.append(<span class="hljs-built_in">len</span>(temp))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(len_list))<br></code></pre></td></tr></table></figure><figure><img src="/images/LQ158_2.png" alt="图片" /><figcaption aria-hidden="true">图片</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><br>ls = [*<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())]<br><br>countmax = <span class="hljs-number">1</span><br>count = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ls)-<span class="hljs-number">1</span>):<br>  <span class="hljs-keyword">if</span> ls[i] &lt; ls[i+<span class="hljs-number">1</span>]:<br>    count += <span class="hljs-number">1</span><br>  <span class="hljs-keyword">else</span>:<br>    count = <span class="hljs-number">1</span><br>  countmax = <span class="hljs-built_in">max</span>(countmax,count)<br><br><span class="hljs-built_in">print</span>(countmax)<br></code></pre></td></tr></table></figure><figure><img src="/images/LQ158_3.png" alt="图片" /><figcaption aria-hidden="true">图片</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天干地支</title>
    <link href="/2024/03/25/%E5%A4%A9%E5%B9%B2%E5%9C%B0%E6%94%AF/"/>
    <url>/2024/03/25/%E5%A4%A9%E5%B9%B2%E5%9C%B0%E6%94%AF/</url>
    
    <content type="html"><![CDATA[<figure><img src="/images/LQ1029.png" alt="图片" /><figcaption aria-hidden="true">图片</figcaption></figure><h2 id="mycode">MyCode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">TianGan=[<span class="hljs-string">&quot;jia&quot;</span>,<span class="hljs-string">&quot;yi&quot;</span>,<span class="hljs-string">&quot;bing&quot;</span>,<span class="hljs-string">&quot;ding&quot;</span>,<span class="hljs-string">&quot;wu&quot;</span>,<span class="hljs-string">&quot;ji&quot;</span>,<span class="hljs-string">&quot;geng&quot;</span>,<span class="hljs-string">&quot;xin&quot;</span>,<span class="hljs-string">&quot;ren&quot;</span>,<span class="hljs-string">&quot;gui&quot;</span>]<br><br>DiZhi=[<span class="hljs-string">&quot;zi&quot;</span>,<span class="hljs-string">&quot;chou&quot;</span>,<span class="hljs-string">&quot;yin&quot;</span>,<span class="hljs-string">&quot;mao&quot;</span>,<span class="hljs-string">&quot;chen&quot;</span>,<span class="hljs-string">&quot;si&quot;</span>,<span class="hljs-string">&quot;wu&quot;</span>,<span class="hljs-string">&quot;wei&quot;</span>,<span class="hljs-string">&quot;shen&quot;</span>,<span class="hljs-string">&quot;you&quot;</span>,<span class="hljs-string">&quot;xu&quot;</span>,<span class="hljs-string">&quot;hai&quot;</span>]<br><br>year=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())-<span class="hljs-number">4</span><br><br>t=year%<span class="hljs-number">10</span><br><br>d=year%<span class="hljs-number">12</span><br><br><span class="hljs-built_in">print</span>(TianGan[t]+DiZhi[d])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>金币</title>
    <link href="/2024/03/25/%E9%87%91%E5%B8%81/"/>
    <url>/2024/03/25/%E9%87%91%E5%B8%81/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>国王将金币作为工资，发放给忠诚的骑士。第一天，骑士收到一枚金币;之后两天(第二天和第三天)，每天收到两枚金币;之后三天(第四、五、六天)，每天收到三枚金币;之后四天(第七、八、九、十天)，每天收到四枚金币......;这种工资发放模式会一直这样延续下去:当连续N天每天收到金币后，骑士会在之后的连续N+1天里，每天收到N+1枚金币。请计算在前K天里，骑士一共获得了多少金币。</p><h2 id="输入描述">输入描述</h2><p>输入只有1行，包含一个正整数K (1104)，表示发放金币的天数。</p><h2 id="输出描述">输出描述</h2><p>输出只有1行，包含一个正整数，即骑士收到的金币数</p><h2 id="mycode">MyCode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">K=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><br>li=[<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,K+<span class="hljs-number">1</span>):<br><br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br><br>     li.append(i)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(li[:K+<span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>扫雷</title>
    <link href="/2024/03/24/%E6%89%AB%E9%9B%B7/"/>
    <url>/2024/03/24/%E6%89%AB%E9%9B%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>在一个n行m列的方格图上有一些位置有地雷，另外一些位置为空。请为每个空位置标一个整数，表示周围八个相邻的方格中有多少个地雷。</p><h2 id="输入描述">输入描述</h2><p>输入的第一行包含两个整数n,m。第2行到第n+1行每行包含m个整数，相整数之间用一个空格分隔。如果对应的整数为0，表示这一格没有地雷。如果对应的整数为1，表示这一格有地雷</p><h2 id="输出描述">输出描述</h2><p>输出n行，每行m个整数，相邻整数之间用空格分隔对于没有地雷的方格，输出这格周围的地雷数量。对于有地雷的方格，输出9。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">i</span>-<span class="hljs-number">1</span>,j-<span class="hljs-number">1</span>  i-<span class="hljs-number">1</span>,j  i-<span class="hljs-number">1</span>,j+<span class="hljs-number">1</span><br><br><span class="hljs-attribute">i</span>,j-<span class="hljs-number">1</span>    i,j  i,j+<span class="hljs-number">1</span><br><br><span class="hljs-attribute">i</span>+<span class="hljs-number">1</span>,j-<span class="hljs-number">1</span>  i+<span class="hljs-number">1</span>,j  i+<span class="hljs-number">1</span>,j+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="mycode">MyCode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python">n,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>maps=[[<span class="hljs-number">3</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+<span class="hljs-number">2</span>)]]<br>res=[[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    a=[<span class="hljs-number">3</span>]+<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))+[<span class="hljs-number">3</span>]<br>    maps.append(a)<br>maps.append([<span class="hljs-number">3</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+<span class="hljs-number">2</span>)])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> maps[i][j]==<span class="hljs-number">1</span>:<br>            res[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]=<span class="hljs-number">9</span><br>        <span class="hljs-keyword">else</span>:<br>            temp=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> maps[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>:<br>                temp+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> maps[i-<span class="hljs-number">1</span>][j]==<span class="hljs-number">1</span>:<br>                temp+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> maps[i-<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>:<br>                temp+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> maps[i][j-<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>:<br>                temp+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> maps[i][j+<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>:<br>                temp+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> maps[i+<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>:<br>                temp+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> maps[i+<span class="hljs-number">1</span>][j]==<span class="hljs-number">1</span>:<br>                temp+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> maps[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>:<br>                temp+=<span class="hljs-number">1</span><br>            res[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]=temp<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,i)))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>硬币兑换(???)</title>
    <link href="/2024/03/24/%E7%A1%AC%E5%B8%81%E5%85%91%E6%8D%A2/"/>
    <url>/2024/03/24/%E7%A1%AC%E5%B8%81%E5%85%91%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<figure><img src="/images/LQ3501_1.png" alt="图片" /><figcaption aria-hidden="true">图片</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">result=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4047</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2024</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>,<span class="hljs-number">2024</span>):<br>        result[i+j]+=i<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(result))<br></code></pre></td></tr></table></figure><figure><img src="/images/LQ3501_2.png" alt="图片" /><figcaption aria-hidden="true">图片</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>平均</title>
    <link href="/2024/03/23/%E5%B9%B3%E5%9D%87/"/>
    <url>/2024/03/23/%E5%B9%B3%E5%9D%87/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>有一个长度为n的数组(n是10的倍数)，每个数ai都是区间0-9中的整数。小明发现数组里每种数出现的次数不太平均，而更改第个数的代价为b，他想更改若干个数的值使得这10种数出现的次数相等(都等于)，请问代价和最少为多少。</p><h2 id="输入格式">输入格式</h2><p>输入的第一行包含一个正整数n。 接下来n行，第i行包含两个整数ai,bi，用一个空格分隔</p><h2 id="输出格式">输出格式</h2><p>输出一行包含一个正整数表示答案</p><h2 id="code">Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><br><span class="hljs-comment">#每个数ai都是区间[0，9]的整数，所以创建列表，里面存放0-10中每个数字是第几个数</span><br>numbers = [[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><br><span class="hljs-comment">#长度为n的数组输入</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    a, b = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    numbers[a].append(b)                <span class="hljs-comment">#例如数字1，是第1,2,3个</span><br><br>ans = <span class="hljs-number">0</span>                         <span class="hljs-comment">#代价为0</span><br>k = n//<span class="hljs-number">10</span>                       <span class="hljs-comment">#长度为n，有n//10个10</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br><span class="hljs-comment">#对numbers[i]中的数进行从小到大排序，因为不用替换的数为最大的数</span><br><span class="hljs-comment">#例如：1，是第1，2，3，不用替换的数为3，即最大的数3</span><br>    ls = <span class="hljs-built_in">sorted</span>(numbers[i])     <br><span class="hljs-comment">#代价和为-k前面的数的和;因为有k个代价最大的数，为保证代价尽可能小，这些k个代价就不用，就加到倒数第k个之前的代价</span><br>    ans += <span class="hljs-built_in">sum</span>(ls[:-k])<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>填充</title>
    <link href="/2024/03/23/%E5%A1%AB%E5%85%85/"/>
    <url>/2024/03/23/%E5%A1%AB%E5%85%85/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>有一个长度为n的01串，其中有一些位置标记为?，这些位置上可以任意填充0或者1，请问如何填充这些位置使得这个01串中出现互不重叠的00和11子串最多，输出子串个数。</p><h2 id="输入格式">输入格式</h2><p>输入一行包含一个字符串。</p><h2 id="输出格式">输出格式</h2><p>输出一行包含一个整数表示答案</p><h2 id="样例输入">样例输入</h2><p>1110?0</p><h2 id="样例输出">样例输出</h2><p>2</p><h2 id="样例说明">样例说明</h2><p>如果在问号处填0，则最多出现一个 00 和一个11:111000</p><p>解法</p><p>暴力：假设一共有m个问号，那么每个问号要么写0要么写1，则一共有2……m种写法</p><p>贪心：你找到了一个最优策略，利用这个策略可以直接找出最优解</p><p>假设字符串固定了，那么你该怎样让字符组成字串，使得合法字串最多？</p><p><strong><u>对于中间的字符而言，优先和前面的匹配</u></strong></p><iframe src="//player.bilibili.com/player.html?aid=836970357&amp;bvid=BV1Dg4y1e73q&amp;cid=1422985208&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>=<span class="hljs-built_in">input</span>()<br>ans=<span class="hljs-number">0</span><br>li=[<span class="hljs-literal">False</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>))]<span class="hljs-comment">#记录i位置是否匹配过</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>[i]!=<span class="hljs-string">&quot;?&quot;</span>:<br>        <span class="hljs-keyword">if</span> li[i]==<span class="hljs-literal">False</span>:<br>            <span class="hljs-keyword">if</span> (i-<span class="hljs-number">1</span>)&gt;=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">str</span>[i-<span class="hljs-number">1</span>]==<span class="hljs-built_in">str</span>[i] <span class="hljs-keyword">and</span> (li[i-<span class="hljs-number">1</span>]==<span class="hljs-literal">False</span>):<br>                li[i-<span class="hljs-number">1</span>]=<span class="hljs-literal">True</span><br>                li[i]=<span class="hljs-literal">True</span><br>                ans+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> (i+<span class="hljs-number">1</span>)&lt;<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">str</span>[i+<span class="hljs-number">1</span>]==<span class="hljs-built_in">str</span>[i] <span class="hljs-keyword">and</span> (li[i+<span class="hljs-number">1</span>]==<span class="hljs-literal">False</span>):<br>                li[i]=<span class="hljs-literal">True</span><br>                li[i+<span class="hljs-number">1</span>]=<span class="hljs-literal">True</span><br>                ans+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> (li[i]):<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> (i-<span class="hljs-number">1</span>)&gt;=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> (li[i-<span class="hljs-number">1</span>]==<span class="hljs-literal">False</span>):<br>            li[i-<span class="hljs-number">1</span>]=<span class="hljs-literal">True</span><br>            li[i]=<span class="hljs-literal">True</span><br>            ans+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> (i+<span class="hljs-number">1</span>)&lt;<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>) <span class="hljs-keyword">and</span> (li[i+<span class="hljs-number">1</span>]==<span class="hljs-literal">False</span>):<br>            li[i]=<span class="hljs-literal">True</span><br>            li[i+<span class="hljs-number">1</span>]=<span class="hljs-literal">True</span><br>            ans+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023</title>
    <link href="/2024/03/22/2023/"/>
    <url>/2024/03/22/2023/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>请求出在12345678(含)至98765432 (含)中，有多少个数中完全不包含2023</p><p>完全不包含2023是指无论将这个数的哪些数位移除都不能得到2023。例如20322175，33220022都完全不包含2023，而20230415，20193213则含有 2023 (后者取第 1，2，6个数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>():<br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12345678</span>, <span class="hljs-number">98765433</span>):<br>        str1 = [<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>]<span class="hljs-comment">#栈</span><br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(num):<br>            <span class="hljs-keyword">if</span> x <span class="hljs-keyword">in</span> str1:<br>                <span class="hljs-keyword">if</span> str1[<span class="hljs-number">0</span>] == x:<br>                    str1.pop(<span class="hljs-number">0</span>)<span class="hljs-comment">#出栈</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(str1) != <span class="hljs-number">0</span>:<br>            k += <span class="hljs-number">1</span><br><br>    <span class="hljs-built_in">print</span>(k)<br><br>find()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分糖果</title>
    <link href="/2024/03/21/%E5%88%86%E7%B3%96%E6%9E%9C/"/>
    <url>/2024/03/21/%E5%88%86%E7%B3%96%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p><ahref="https://www.lanqiao.cn/problems/2928/learning/?problem_list_id=19&amp;page=2&amp;sort=students_count&amp;asc=0">11.分糖果- 蓝桥云课 (lanqiao.cn)</a></p><p>最近暑期特训算法班的同学们表现出色，他们的老师肖恩决定给他们分发糖果。肖恩购买了个不同种类的糖果，用小写的阿拉字母表示。每个糖果必须分发给一个同学，并且每个同学至少要分到一个糖果。同学们的开心程度定义为他们所分到的糖果组成的字符串s的字典序。肖恩希望同学们的开心程度相差尽量小，因此他要找到一种方案，使得所有糖果组成的字符串中字典序最大的字符串尽可能小。请输出能够实现字典序最小可能的 max(s1,2,s3,...,st)。</p><h2 id="输入描述">输入描述</h2><p>第一行输入两个整数n和2，分别表示有n个糖果个同学第二行输入一个长度为n的字符串S，S表示第i个糖果的种类</p><h2 id="输出描述">输出描述</h2><p>输出一个字符串，为所有糖果组成的字符串中字典序最大的字符串最小的可能值。</p><p>&lt;iframesrc="//player.bilibili.com/player.html?aid=794169633&amp;bvid=BV1FC4y1k7sv&amp;cid=1416149200&amp;p=1"scrolling="no" border="0" frameborder="no" framespacing="0"allowfullscreen="true" width="100%" height="650px"</iframe></p><h2 id="mycode">MyCode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#https://www.bilibili.com/video/BV1FC4y1k7sv?t=871.0</span><br><span class="hljs-keyword">import</span> math<br>n,x=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<span class="hljs-comment"># n是糖果个数 x是同学人数</span><br>s=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">input</span>())<br>s.sort()<br>s=[<span class="hljs-string">&#x27;&#x27;</span>]+s<span class="hljs-comment">#让下标从1开始</span><br><span class="hljs-keyword">if</span> s[<span class="hljs-number">1</span>]==s[x]:<span class="hljs-comment">#因为已经排序，如果第一个和最后一个相同，即所有的糖果都相同</span><br>    <span class="hljs-keyword">if</span> s[x+<span class="hljs-number">1</span>]==s[-<span class="hljs-number">1</span>]:<br>        <span class="hljs-built_in">print</span>(s[x],end=<span class="hljs-string">&quot;&quot;</span>)<span class="hljs-comment">#先每人分一个糖果</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x+<span class="hljs-number">1</span>,x+math.ceil(((n-x)/x)+<span class="hljs-number">1</span>)):<span class="hljs-comment">#剩下的糖果平均分，ceil向上取整</span><br>            <span class="hljs-built_in">print</span>(s[i],end=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(s[x:]))<span class="hljs-comment">#剩下的糖果平均分给一人</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(s[x])<span class="hljs-comment">#剩下的糖果平均分给一人</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++的类</title>
    <link href="/2024/03/20/C-%E7%9A%84%E7%B1%BB/"/>
    <url>/2024/03/20/C-%E7%9A%84%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="array_max.h">array_max.h</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//array_max.h</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> &amp;lt;bits/stdc++.h&amp;gt;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Array_max</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_value</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&amp;lt;<span class="hljs-number">10</span>;i++)<br>&#123;<br>cin&amp;gt;&amp;gt;array[i];<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">max_value</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>max=array[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&amp;lt;<span class="hljs-number">10</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(array[i]&amp;gt;max)max=array[i];<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show_value</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout&amp;lt;&amp;lt;<span class="hljs-string">&quot;max=&quot;</span>&amp;lt;&amp;lt;max;<br>&#125;;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> max;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="array_max.cpp">array_max.cpp</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//array_max.cpp</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> &amp;lt;iostream&amp;gt;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;array_max.h&quot;</span></span><br><span class="hljs-comment">/* run this program using the console pauser or add your own getch, system(&quot;pause&quot;) or input loop */</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> </span>&#123;<br>Array_max arrmax;<br>arrmax.<span class="hljs-built_in">set_value</span>();<br>arrmax.<span class="hljs-built_in">max_value</span>();<br>arrmax.<span class="hljs-built_in">show_value</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码展示了一个名为Array_max的类的定义和使用。该类具有以下知识点：</p><ol type="1"><li>类定义：使用关键字"class"来定义一个类，后面跟着类名Array_max。</li><li>访问修饰符：在类中定义的成员变量和成员函数可以有不同的访问权限。在这里，array和max是私有成员变量，set_value、max_value和show_value是公有成员函数。</li><li>构造函数：类的构造函数用于初始化对象的状态。在这个例子中，没有显式地定义构造函数，所以编译器会自动生成默认的构造函数。</li><li>成员函数：类的成员函数用于执行特定的操作。在这个例子中，有三个成员函数：set_value用于设置数组的值，max_value用于计算最大值，show_value用于显示最大值。</li><li>循环语句：for循环用于遍历数组并执行相应的操作。在这里，使用了两个for循环，分别用于输入数组的值和计算最大值。</li><li>条件语句：if语句用于比较数组中的每个元素与当前最大值的大小关系，如果大于当前最大值，则更新最大值。</li><li>输入输出流：cin用于从标准输入读取数据，cout用于向标准输出打印数据。</li><li>头文件包含：使用#include指令将所需的头文件包含到源代码中。这里包含了&lt;bits/stdc++.h&gt;和<iostream>头文件。</li><li>命名空间：使用namespacestd来引入标准库的命名空间，以便可以直接使用其中的函数和对象。</li><li>主函数：main函数是程序的入口点，它创建了一个Array_max对象arrmax，并调用其成员函数来设置数组的值、计算最大值并显示结果。</li></ol><p>通过这个示例代码，我们可以了解到如何定义一个类、创建对象、调用成员函数以及实现一些基本的功能。</p>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>曲园</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Floyd最短路径算法的python函数实现</title>
    <link href="/2024/03/19/Floyd%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95%E7%9A%84python%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/03/19/Floyd%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95%E7%9A%84python%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=751265795&amp;bvid=BV19k4y1Q7Gj&amp;cid=1413631056&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="650px"></iframe><h2 id="示例图">示例图：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">inf=<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>graph = [<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, inf, inf, inf, inf, inf, <span class="hljs-number">8</span>, inf],<br>    [<span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, inf, inf, inf, inf, <span class="hljs-number">11</span>, inf],<br>    [inf, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, inf, <span class="hljs-number">4</span>, inf, inf, <span class="hljs-number">2</span>],<br>    [inf, inf, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, inf, inf, inf],<br>    [inf, inf, inf, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, inf, inf, inf],<br>    [inf, inf, <span class="hljs-number">4</span>, <span class="hljs-number">14</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, inf, inf],<br>    [inf, inf, inf, inf, inf, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">11</span>, inf, inf, inf, inf, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>],<br>    [inf, inf, <span class="hljs-number">2</span>, inf, inf, inf, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>]<br>]<br></code></pre></td></tr></table></figure><h2id="floyd最短路径算法的python函数实现">Floyd最短路径算法的python函数实现：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">floyd</span>(<span class="hljs-params">graph</span>):<br>    FMAX=<span class="hljs-number">999</span><br>    n=<span class="hljs-built_in">len</span>(graph)<br>    d=[[graph[i][j] <span class="hljs-keyword">if</span> graph[i][j]!=<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> FMAX <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<span class="hljs-comment">#中转节点</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<span class="hljs-comment">#起始节点</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<span class="hljs-comment">#结束节点</span><br>                <span class="hljs-comment">#起始节点-&gt;结束节点 和 起始节点-&gt;中转节点-&gt;结束节点 之间的最小值</span><br>                d[i][j]=<span class="hljs-built_in">min</span>(d[i][j],d[i][k]+d[k][j])<br>    <span class="hljs-keyword">return</span> d<br><br><span class="hljs-built_in">print</span>(floyd(graph))<br></code></pre></td></tr></table></figure><h2 id="result">Result：</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[<span class="hljs-comment">[8, 4, 12, 19, 21, 11, 9, 8, 14]</span>, </span><br><span class="hljs-comment"> <span class="hljs-comment">[4, 8, 8, 15, 22, 12, 12, 11, 10]</span>, </span><br><span class="hljs-comment"> <span class="hljs-comment">[12, 8, 4, 7, 14, 4, 6, 7, 2]</span>, </span><br><span class="hljs-comment"> <span class="hljs-comment">[19, 15, 7, 14, 9, 11, 13, 14, 9]</span>, </span><br><span class="hljs-comment"> <span class="hljs-comment">[21, 22, 14, 9, 18, 10, 12, 13, 16]</span>, </span><br><span class="hljs-comment"> <span class="hljs-comment">[11, 12, 4, 11, 10, 4, 2, 3, 6]</span>, </span><br><span class="hljs-comment"> <span class="hljs-comment">[9, 12, 6, 13, 12, 2, 2, 1, 6]</span>, </span><br><span class="hljs-comment"> <span class="hljs-comment">[8, 11, 7, 14, 13, 3, 1, 2, 7]</span>, </span><br><span class="hljs-comment"> <span class="hljs-comment">[14, 10, 2, 9, 16, 6, 6, 7, 4]</span>]</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>路径</title>
    <link href="/2024/03/19/%E8%B7%AF%E5%BE%84/"/>
    <url>/2024/03/19/%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<p><strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所</strong><strong>填结果输出即可</strong></p><p>小蓝学习了最短路径之后特别高兴，他定义了一个特别的图，希望找到图中的最短路径。</p><p>小蓝的图由2021个结点组成，依次编号1至2021。</p><p>对于两个不同的结点ab，如果a和b的差的绝对值大于21，则两个结点之间没有边相连;如果a和b的差的绝对值小于等于21，则两个点之间有一条长度为a和b的最小公倍数的无向边相连。</p><p>例如: 结点1和结点23 之间没有边相连;结点3 和结点24之间有一条无向边，长度为24;结点15 和结点25之间有一条无向边，长度为75。</p><p>请计算，结点1和结点2021之间的最短路径长度是多少</p><p>提示:建议使用计算机编程解决问题</p><h2 id="mycode">MyCode</h2><p><ahref="https://ianwusb.blog/2024/03/19/Dijkstra最短路径算法的python函数实现/">Dijkstra最短路径算法的python函数实现| Ianwusb's Blog</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">lcm</span>(<span class="hljs-params">a,b</span>):<br>    x,y=a,b<br>    <span class="hljs-keyword">while</span> y:<br>        x,y=y,x%y<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>((a*b)/x)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dijkstra</span>(<span class="hljs-params">graph,starting_node,node_num</span>):<span class="hljs-comment">#graph[u][v]表示边e=(u,v)的权值，不存在时设为inf</span><br>    <span class="hljs-comment"># 起始节点starting_node,节点数量node_num</span><br>    used = [<span class="hljs-literal">False</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(node_num)]  <span class="hljs-comment"># 标记数组，used[v]值为False说明该顶点还没有访问过，在S中，否则在U中！</span><br>    distance = [<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(node_num)]  <span class="hljs-comment"># 距离数组，distance[i]表示从原点s到i的最短距离，distance[s]=0</span><br>    <span class="hljs-comment">#cost = [[float(&#x27;inf&#x27;) for _ in range(node_num)] for _ in range(node_num)]  # cost[u][v]表示边e=(u,v)的权值，不存在时设为inf</span><br>    distance[starting_node]=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        v=-<span class="hljs-number">1</span><span class="hljs-comment">#v在这里相当于是一个哨兵，对包含起点s做统一处理！</span><br>        <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(node_num):<span class="hljs-comment">#从未使用过的顶点中选择一个距离最小的顶点</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> used[u] <span class="hljs-keyword">and</span> (v==-<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> distance[u]&lt;distance[v]):<br>                v=u<br>        <span class="hljs-keyword">if</span> v==-<span class="hljs-number">1</span>:<span class="hljs-comment">#说明所有顶点都维护到S中了！</span><br>            <span class="hljs-keyword">break</span><br>        used[v]=<span class="hljs-literal">True</span><span class="hljs-comment">#将选定的顶点加入到S中，同时进行距离更新</span><br>        <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(node_num):<span class="hljs-comment">#更新U中各个顶点到起点s的距离.之所以更新U中顶点的距离，是因为上一步中确定了k是求出的最短路径节点</span><br>            distance[u]=<span class="hljs-built_in">min</span>(distance[u],distance[v]+graph[v][u])<br><br>    <span class="hljs-keyword">return</span> distance<br><br><span class="hljs-comment">#建图....begin</span><br>cost = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2021</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2021</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2021</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2021</span>):<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>((i+<span class="hljs-number">1</span>)-(j+<span class="hljs-number">1</span>))&lt;=<span class="hljs-number">21</span>):<br>            w=lcm(i+<span class="hljs-number">1</span>,j+<span class="hljs-number">1</span>)<br>            cost[i][j]=w<br>        <span class="hljs-keyword">elif</span> (<span class="hljs-built_in">abs</span>((i+<span class="hljs-number">1</span>)-(j+<span class="hljs-number">1</span>))&gt;<span class="hljs-number">21</span>):<br>            cost[i][j]=<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>        <span class="hljs-keyword">if</span> (i==j):<br>            cost[i][j] = <span class="hljs-number">0</span><br><span class="hljs-comment">#建图....end</span><br><span class="hljs-built_in">print</span>(dijkstra(cost,<span class="hljs-number">0</span>,<span class="hljs-number">2021</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dijkstra最短路径算法的python函数实现</title>
    <link href="/2024/03/19/Dijkstra%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95%E7%9A%84python%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/03/19/Dijkstra%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95%E7%9A%84python%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=586430293&amp;bvid=BV1zz4y1m7Nq&amp;cid=289260026&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="650px"></iframe><h2 id="视频中的图的邻接矩阵表示法">视频中的图的邻接矩阵表示法：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">inf=<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>graph = [<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, inf, inf, inf, inf, inf, <span class="hljs-number">8</span>, inf],<br>    [<span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, inf, inf, inf, inf, <span class="hljs-number">11</span>, inf],<br>    [inf, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, inf, <span class="hljs-number">4</span>, inf, inf, <span class="hljs-number">2</span>],<br>    [inf, inf, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, inf, inf, inf],<br>    [inf, inf, inf, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, inf, inf, inf],<br>    [inf, inf, <span class="hljs-number">4</span>, <span class="hljs-number">14</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, inf, inf],<br>    [inf, inf, inf, inf, inf, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">11</span>, inf, inf, inf, inf, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>],<br>    [inf, inf, <span class="hljs-number">2</span>, inf, inf, inf, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>]<br>]<br></code></pre></td></tr></table></figure><h2id="dijkstra最短路径算法的python函数实现">Dijkstra最短路径算法的python函数实现：</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs prolog">def dijkstra(graph,starting_node,node_num):#graph[u][v]表示边e=(u,v)的权值，不存在时设为inf<br>    # 起始节点starting_node,节点数量node_num<br>    used = [<span class="hljs-symbol">False</span> for <span class="hljs-symbol">_</span> in range(node_num)]  # 标记数组，used[v]值为<span class="hljs-symbol">False</span>说明该顶点还没有访问过，在<span class="hljs-symbol">S</span>中，否则在<span class="hljs-symbol">U</span>中！<br>    distance = [float(<span class="hljs-string">&#x27;inf&#x27;</span>) for <span class="hljs-symbol">_</span> in range(node_num)]  # 距离数组，distance[i]表示从原点s到i的最短距离，distance[s]=<span class="hljs-number">0</span><br>    #cost = [[float(<span class="hljs-string">&#x27;inf&#x27;</span>) for <span class="hljs-symbol">_</span> in range(node_num)] for <span class="hljs-symbol">_</span> in range(node_num)]  # cost[u][v]表示边e=(u,v)的权值，不存在时设为inf<br>    distance[starting_node]=<span class="hljs-number">0</span><br>    while <span class="hljs-symbol">True</span>:<br>        v=<span class="hljs-number">-1</span>#v在这里相当于是一个哨兵，对包含起点s做统一处理！<br>        for u in range(node_num):#从未使用过的顶点中选择一个距离最小的顶点<br>            if not used[u] and (v==<span class="hljs-number">-1</span> or distance[u]&lt;distance[v]):<br>                v=u<br>        if v==<span class="hljs-number">-1</span>:#说明所有顶点都维护到<span class="hljs-symbol">S</span>中了！<br>            break<br>        used[v]=<span class="hljs-symbol">True</span>#将选定的顶点加入到<span class="hljs-symbol">S</span>中，同时进行距离更新<br>        for u in range(node_num):#更新<span class="hljs-symbol">U</span>中各个顶点到起点s的距离.之所以更新<span class="hljs-symbol">U</span>中顶点的距离，是因为上一步中确定了k是求出的最短路径节点<br>            distance[u]=min(distance[u],distance[v]+graph[v][u])<br><br>    return distance<br><br>inf=float(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>graph = [<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, inf, inf, inf, inf, inf, <span class="hljs-number">8</span>, inf],<br>    [<span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, inf, inf, inf, inf, <span class="hljs-number">11</span>, inf],<br>    [inf, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, inf, <span class="hljs-number">4</span>, inf, inf, <span class="hljs-number">2</span>],<br>    [inf, inf, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, inf, inf, inf],<br>    [inf, inf, inf, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, inf, inf, inf],<br>    [inf, inf, <span class="hljs-number">4</span>, <span class="hljs-number">14</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, inf, inf],<br>    [inf, inf, inf, inf, inf, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">11</span>, inf, inf, inf, inf, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>],<br>    [inf, inf, <span class="hljs-number">2</span>, inf, inf, inf, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>]<br>]<br><br>print(dijkstra(graph,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>))<br></code></pre></td></tr></table></figure><h2 id="result">Result：</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[0, 4, 12, 19, 21, 11, 9, 8, 14]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++程序设计课后题</title>
    <link href="/2024/03/19/C-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BE%E5%90%8E%E9%A2%98/"/>
    <url>/2024/03/19/C-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BE%E5%90%8E%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="p36">P36</h2><h2 id="section">10.</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string a,b;<br>a=<span class="hljs-string">&quot;abcd&quot;</span>;<br>b=<span class="hljs-string">&quot;qwer&quot;</span>;<br>a=a+b;<br>cout&lt;&lt;a;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="section-1">11.</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string a;<br>cin &gt;&gt; a;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = (a.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>); i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>cout &lt;&lt; a[i];<br>&#125;<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="section-2">13.</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 重载函数，用于整数排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sortData</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; data)</span> </span>&#123;<br><span class="hljs-built_in">sort</span>(data.<span class="hljs-built_in">begin</span>(), data.<span class="hljs-built_in">end</span>());<br>&#125;<br><br><span class="hljs-comment">// 重载函数，用于单精度浮点数排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sortData</span><span class="hljs-params">(vector&lt;<span class="hljs-type">float</span>&gt;&amp; data)</span> </span>&#123;<br><span class="hljs-built_in">sort</span>(data.<span class="hljs-built_in">begin</span>(), data.<span class="hljs-built_in">end</span>());<br>&#125;<br><br><span class="hljs-comment">// 重载函数，用于双精度浮点数排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sortData</span><span class="hljs-params">(vector&lt;<span class="hljs-type">double</span>&gt;&amp; data)</span> </span>&#123;<br><span class="hljs-built_in">sort</span>(data.<span class="hljs-built_in">begin</span>(), data.<span class="hljs-built_in">end</span>());<br>&#125;<br><br><span class="hljs-comment">//template&lt;typename T&gt;</span><br><span class="hljs-comment">//T sortData(vector&lt;T&gt;&amp; data)&#123;</span><br><span class="hljs-comment">//sort(data.begin(), data.end());</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; intData = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>&#125;;<br>vector&lt;<span class="hljs-type">float</span>&gt; floatData = &#123;<span class="hljs-number">5.5f</span>, <span class="hljs-number">3.3f</span>, <span class="hljs-number">1.1f</span>, <span class="hljs-number">4.4f</span>, <span class="hljs-number">2.2f</span>&#125;;<br>vector&lt;<span class="hljs-type">double</span>&gt; doubleData = &#123;<span class="hljs-number">5.55</span>, <span class="hljs-number">3.33</span>, <span class="hljs-number">1.11</span>, <span class="hljs-number">4.44</span>, <span class="hljs-number">2.22</span>&#125;;<br><br><span class="hljs-built_in">sortData</span>(intData);<br><span class="hljs-built_in">sortData</span>(floatData);<br><span class="hljs-built_in">sortData</span>(doubleData);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;Sorted integers: &quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : intData) &#123;<br>cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;Sorted floats: &quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">float</span> f : floatData) &#123;<br>cout &lt;&lt; f &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;Sorted doubles: &quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">double</span> d : doubleData) &#123;<br>cout &lt;&lt; d &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="section-3">14.</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//// 重载函数，用于整数排序</span><br><span class="hljs-comment">//void sortData(vector&lt;int&gt;&amp; data) &#123;</span><br><span class="hljs-comment">//sort(data.begin(), data.end());</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//// 重载函数，用于单精度浮点数排序</span><br><span class="hljs-comment">//void sortData(vector&lt;float&gt;&amp; data) &#123;</span><br><span class="hljs-comment">//sort(data.begin(), data.end());</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//// 重载函数，用于双精度浮点数排序</span><br><span class="hljs-comment">//void sortData(vector&lt;double&gt;&amp; data) &#123;</span><br><span class="hljs-comment">//sort(data.begin(), data.end());</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">sortData</span><span class="hljs-params">(vector&lt;T&gt;&amp; data)</span></span>&#123;<br><span class="hljs-built_in">sort</span>(data.<span class="hljs-built_in">begin</span>(), data.<span class="hljs-built_in">end</span>());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; intData = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>&#125;;<br>vector&lt;<span class="hljs-type">float</span>&gt; floatData = &#123;<span class="hljs-number">5.5f</span>, <span class="hljs-number">3.3f</span>, <span class="hljs-number">1.1f</span>, <span class="hljs-number">4.4f</span>, <span class="hljs-number">2.2f</span>&#125;;<br>vector&lt;<span class="hljs-type">double</span>&gt; doubleData = &#123;<span class="hljs-number">5.55</span>, <span class="hljs-number">3.33</span>, <span class="hljs-number">1.11</span>, <span class="hljs-number">4.44</span>, <span class="hljs-number">2.22</span>&#125;;<br><br><span class="hljs-built_in">sortData</span>(intData);<br><span class="hljs-built_in">sortData</span>(floatData);<br><span class="hljs-built_in">sortData</span>(doubleData);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;Sorted integers: &quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : intData) &#123;<br>cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;Sorted floats: &quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">float</span> f : floatData) &#123;<br>cout &lt;&lt; f &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;Sorted doubles: &quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">double</span> d : doubleData) &#123;<br>cout &lt;&lt; d &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="p70">P70</h1><h2 id="section-4">6.</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cuboid</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setdata</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> w,<span class="hljs-type">int</span> h)</span></span>&#123;length=l;width=w;height=h;&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">volume</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> length*width*height;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> length;<br><span class="hljs-type">int</span> width;<br><span class="hljs-type">int</span> height;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Cuboid cuboid[<span class="hljs-number">3</span>];<br><span class="hljs-type">int</span> a,b,c;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>cuboid[i].<span class="hljs-built_in">setdata</span>(a,b,c);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;No.&quot;</span>&lt;&lt;(i<span class="hljs-number">+1</span>)&lt;&lt;<span class="hljs-string">&quot;&#x27;s voiume is &quot;</span>&lt;&lt;cuboid[i].<span class="hljs-built_in">volume</span>()&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="p122">P122</h1><h2 id="section-5">1.</h2><p>构造函数和析构函数在面向对象编程中扮演着至关重要的角色。它们主要用于对象的创建和销毁过程，确保对象在使用前后能够保持有效的状态。下面将详细介绍这两个特殊成员函数的作用及自定义它们的情况。</p><h3 id="一构造函数的作用">一、构造函数的作用</h3><ul><li><strong>初始化对象</strong>：构造函数用于初始化对象的成员变量，确保每个成员变量都有一个合适的初始值。</li><li><strong>资源分配</strong>：如果对象需要占用额外的资源（如动态内存、文件描述符等），构造函数是申请这些资源的合适地点。</li><li><strong>满足特定条件的对象创建</strong>：在某些情况下，只有当特定条件满足时才能创建对象，构造函数可以包含逻辑来检查这些条件。</li><li><strong>依赖性注入</strong>：构造函数可以接收参数，用于注入依赖，如服务、配置或其他对象，实现解耦和可测试性。</li></ul><h3 id="二析构函数的作用">二、析构函数的作用</h3><ul><li><strong>资源释放</strong>：析构函数负责释放对象在生命周期中申请的资源，如动态内存、文件描述符等，以防止资源泄露。</li><li><strong>状态更新</strong>：对象销毁前可能需要更新某些状态或通知其他部分的代码，析构函数是执行这些操作的理想地点。</li><li><strong>持久化数据</strong>：如果对象在生命周期中有状态改变且需要保存到磁盘，析构函数可以是实施这一操作的好地方。</li><li><strong>对象清理</strong>：在对象被销毁之前，析构函数确保与之相关的所有操作都已经妥善完成或回滚，保持系统的稳定性。</li></ul><h3id="三什么时候需要自定义构造函数和析构函数">三、什么时候需要自定义构造函数和析构函数</h3><ul><li><strong>当类的成员变量需要在对象创建时进行特定的初始化</strong>：如果仅仅依靠编译器生成的默认构造函数无法正确初始化对象，就需要自定义构造函数。</li><li><strong>当类需要管理资源</strong>：如果类的对象会分配动态内存、文件、网络连接或其他任何形式的资源，就需要自定义构造函数来分配（和析构函数来释放）这些资源。</li><li><strong>当需要限制对象创建的方式</strong>：如果类的实例化需要满足特定条件，或者想要控制如何以及何时创建对象，自定义构造函数是实现这一点的方式。</li><li><strong>当类的对象需要在某些条件下持续追踪或修改状态</strong>：如果对象的状态改变需要在销毁前保存或处理，就需要自定义析构函数来确保这些操作的正确执行。</li></ul><p>综上所述，通过自定义构造函数和析构函数，可以精确控制对象的创建和销毁过程，确保资源的合理使用和及时回收，以及满足特定的业务逻辑需求。这不仅有助于提高代码的可维护性和可读性，也是实现某些复杂功能的关键所在。</p><h2 id="section-6">2.</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>);<br><span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>);<br><span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span>);<br><span class="hljs-built_in">Date</span>( );<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">( )</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> month;<br><span class="hljs-type">int</span> day;<br><span class="hljs-type">int</span> year;<br>&#125;;<br>Date::<span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> d, <span class="hljs-type">int</span> y): <span class="hljs-built_in">month</span>(m), <span class="hljs-built_in">day</span>(d), <span class="hljs-built_in">year</span>(y)<br>&#123; &#125;<br>Date::<span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> d): <span class="hljs-built_in">month</span>(m), <span class="hljs-built_in">day</span>(d) &#123;<br>year = <span class="hljs-number">2005</span>;<br>&#125;<br>Date::<span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> m): <span class="hljs-built_in">month</span>(m) &#123;<br>day = <span class="hljs-number">1</span>;<br>year = <span class="hljs-number">2005</span>;<br>&#125;<br>Date::<span class="hljs-built_in">Date</span>( ) &#123;<br>month = <span class="hljs-number">1</span>;<br>day = <span class="hljs-number">1</span>;<br>year = <span class="hljs-number">2005</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Date::display</span><span class="hljs-params">( )</span> </span>&#123;<br>cout &lt;&lt; month &lt;&lt; <span class="hljs-string">&quot;/&quot;</span> &lt;&lt; day &lt;&lt; <span class="hljs-string">&quot;/&quot;</span> &lt;&lt; year &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span> </span>&#123;<br><span class="hljs-function">Date <span class="hljs-title">d1</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">2005</span>)</span></span>;<br><span class="hljs-function">Date <span class="hljs-title">d2</span><span class="hljs-params">(<span class="hljs-number">12</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Date <span class="hljs-title">d3</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>Date d4;<br>d<span class="hljs-number">1.</span><span class="hljs-built_in">display</span>( );<br>d<span class="hljs-number">2.</span><span class="hljs-built_in">display</span>( );<br>d<span class="hljs-number">3.</span><span class="hljs-built_in">display</span>( );<br>d<span class="hljs-number">4.</span><span class="hljs-built_in">display</span>( );<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="section-7">3.</h2><p>修改后报错：</p><table><thead><tr><th><strong>文件名</strong></th><th><strong>行</strong></th><th><strong>列</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><u><strong><em>D:/Files/Documents/untitled1.cpp</em></strong></u></td><td><u><strong><em>6</em></strong></u></td><td><u><strong><em>2</em></strong></u></td><td><u><strong><em>[错误] 'Date::Date(int, int, int)' cannot beoverloaded with 'Date::Date(int, int, int)'</em></strong></u></td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>5</td><td>2</td><td>[说明] previous declaration 'Date::Date(int, int, int)'</td></tr><tr><td><u><strong><em>D:/Files/Documents/untitled1.cpp</em></strong></u></td><td><u><strong><em>17</em></strong></u></td><td><u><strong><em>1</em></strong></u></td><td><u><strong><em>[错误] no declaration matches 'Date::Date(int,int)'</em></strong></u></td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>3</td><td>7</td><td>[说明] candidates are: 'constexpr Date::Date(Date&amp;&amp;)'</td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>3</td><td>7</td><td>[说明] 'constexpr Date::Date(const Date&amp;)'</td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>8</td><td>2</td><td>[说明] 'Date::Date()'</td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>7</td><td>2</td><td>[说明] 'Date::Date(int)'</td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>15</td><td>1</td><td>[说明] 'Date::Date(int, int, int)'</td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>3</td><td>7</td><td>[说明] 'class Date' defined here</td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>0</td><td>-1</td><td>In function 'int main()':</td></tr><tr><td><u><strong><em>D:/Files/Documents/untitled1.cpp</em></strong></u></td><td><u><strong><em>34</em></strong></u></td><td><u><strong><em>16</em></strong></u></td><td><u><strong><em>[错误] no matching function for call to'Date::Date(int, int)'</em></strong></u></td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>24</td><td>1</td><td>[说明] candidate: 'Date::Date()'</td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>24</td><td>1</td><td>[说明] candidate expects 0 arguments, 2 provided</td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>20</td><td>1</td><td>[说明] candidate: 'Date::Date(int)'</td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>20</td><td>1</td><td>[说明] candidate expects 1 argument, 2 provided</td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>15</td><td>1</td><td>[说明] candidate: 'Date::Date(int, int, int)'</td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>15</td><td>1</td><td>[说明] candidate expects 3 arguments, 2 provided</td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>3</td><td>7</td><td>[说明] candidate: 'constexpr Date::Date(const Date&amp;)'</td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>3</td><td>7</td><td>[说明] candidate expects 1 argument, 2 provided</td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>3</td><td>7</td><td>[说明] candidate: 'constexpr Date::Date(Date&amp;&amp;)'</td></tr><tr><td>D:/Files/Documents/untitled1.cpp</td><td>3</td><td>7</td><td>[说明] candidate expects 1 argument, 2 provided</td></tr></tbody></table><p>修改后：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span>=<span class="hljs-number">1</span>,<span class="hljs-type">int</span>=<span class="hljs-number">1</span>,<span class="hljs-type">int</span>=<span class="hljs-number">20005</span>);<span class="hljs-comment">//Date(int, int);</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">( )</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> month;<br><span class="hljs-type">int</span> day;<br><span class="hljs-type">int</span> year;<br>&#125;;<br>Date::<span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> d, <span class="hljs-type">int</span> y): <span class="hljs-built_in">month</span>(m), <span class="hljs-built_in">day</span>(d), <span class="hljs-built_in">year</span>(y)<br>&#123; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Date::display</span><span class="hljs-params">( )</span> </span>&#123;<br>cout &lt;&lt; month &lt;&lt; <span class="hljs-string">&quot;/&quot;</span> &lt;&lt; day &lt;&lt; <span class="hljs-string">&quot;/&quot;</span> &lt;&lt; year &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span> </span>&#123;<br><span class="hljs-function">Date <span class="hljs-title">d1</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">2005</span>)</span></span>;<br><span class="hljs-function">Date <span class="hljs-title">d2</span><span class="hljs-params">(<span class="hljs-number">12</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Date <span class="hljs-title">d3</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>Date d4;<br>d<span class="hljs-number">1.</span><span class="hljs-built_in">display</span>( );<br>d<span class="hljs-number">2.</span><span class="hljs-built_in">display</span>( );<br>d<span class="hljs-number">3.</span><span class="hljs-built_in">display</span>( );<br>d<span class="hljs-number">4.</span><span class="hljs-built_in">display</span>( );<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="section-8">4.</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Student</span>(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)&#123;id=a;grade=b;&#125;<br><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; output,Student&amp; stu)<br>&#123;<br>output&lt;&lt;stu.id&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;stu.grade&lt;&lt;endl;<br><span class="hljs-keyword">return</span> output;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> id;<br><span class="hljs-type">int</span> grade;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Student students[<span class="hljs-number">5</span>]=&#123;<br><span class="hljs-built_in">Student</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),<br><span class="hljs-built_in">Student</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>),<br><span class="hljs-built_in">Student</span>(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>),<br><span class="hljs-built_in">Student</span>(<span class="hljs-number">7</span>,<span class="hljs-number">8</span>),<br><span class="hljs-built_in">Student</span>(<span class="hljs-number">9</span>,<span class="hljs-number">10</span>)<br>&#125;;<br>Student* p = students; <span class="hljs-comment">// 指针指向数组首元素</span><br>cout &lt;&lt; *p &lt;&lt; *(p + <span class="hljs-number">2</span>) &lt;&lt; *(p + <span class="hljs-number">4</span>) &lt;&lt; endl; <span class="hljs-comment">// 输出第1，3，5个学生的数据</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="section-9">5.</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Student</span>(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)&#123;id=a;grade=b;&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getGrade</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> grade;<br>&#125;<br><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; output,Student&amp; stu)<br>&#123;<br>output&lt;&lt;stu.id&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;stu.grade&lt;&lt;endl;<br><span class="hljs-keyword">return</span> output;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> id;<br><span class="hljs-type">int</span> grade;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> num, Student* pt)</span></span>&#123;<br><span class="hljs-type">int</span> maxnum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)&#123;<br><span class="hljs-keyword">if</span>(maxnum &lt; pt[i].<span class="hljs-built_in">getGrade</span>())&#123;<br>maxnum = pt[i].<span class="hljs-built_in">getGrade</span>();<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> maxnum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Student students[<span class="hljs-number">5</span>]=&#123;<br><span class="hljs-built_in">Student</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),<br><span class="hljs-built_in">Student</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>),<br><span class="hljs-built_in">Student</span>(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>),<br><span class="hljs-built_in">Student</span>(<span class="hljs-number">7</span>,<span class="hljs-number">8</span>),<br><span class="hljs-built_in">Student</span>(<span class="hljs-number">9</span>,<span class="hljs-number">10</span>)<br>&#125;;<br>cout&lt;&lt;<span class="hljs-built_in">max</span>(<span class="hljs-number">5</span>,students)&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="section-10">9.</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> <br>&#123;<span class="hljs-keyword">public</span>: <br><span class="hljs-built_in">Product</span>(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> q, <span class="hljs-type">float</span> p): <span class="hljs-built_in">num</span>(m), <span class="hljs-built_in">quantity</span>(q), <span class="hljs-built_in">price</span>(p) &#123;&#125;; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">total</span><span class="hljs-params">()</span></span>; <br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">float</span> <span class="hljs-title">average</span><span class="hljs-params">()</span></span>; <br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>; <br><span class="hljs-keyword">private</span>: <br><span class="hljs-type">int</span> num;                         <span class="hljs-comment">//销货员号 </span><br><span class="hljs-type">int</span> quantity;                    <span class="hljs-comment">//销货件数 </span><br><span class="hljs-type">float</span> price;                     <span class="hljs-comment">//销货单价 </span><br><span class="hljs-type">static</span> <span class="hljs-type">float</span> discount;           <span class="hljs-comment">//商店统一折扣 </span><br><span class="hljs-type">static</span> <span class="hljs-type">float</span> sum;                <span class="hljs-comment">//总销售款 </span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> n;                    <span class="hljs-comment">//商品销售总件数 </span><br>&#125;; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Product::total</span><span class="hljs-params">()</span>                   <span class="hljs-comment">//求销售款和销售件数 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">float</span> rate = <span class="hljs-number">1.0</span>; <br><span class="hljs-keyword">if</span> (quantity &gt; <span class="hljs-number">10</span>) rate = <span class="hljs-number">0.98</span> * rate; <br>sum = sum + quantity * price * rate * (<span class="hljs-number">1</span> - discount); <span class="hljs-comment">//累计销售款 </span><br>n = n + quantity;                                 <span class="hljs-comment">//累计销售件数 </span><br>&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Product::display</span><span class="hljs-params">()</span>                  <span class="hljs-comment">//输出销售总件数和平均价 </span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; sum &lt;&lt; endl; <br>cout &lt;&lt; <span class="hljs-built_in">average</span>() &lt;&lt; endl; <br>&#125; <br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">Product::average</span><span class="hljs-params">()</span>               <span class="hljs-comment">//求平均价 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> (sum / n);<br>&#125; <br><br><span class="hljs-type">float</span> Product::discount = <span class="hljs-number">0.05</span>;       <span class="hljs-comment">//对静态数据成员初始化 </span><br><span class="hljs-type">float</span> Product::sum = <span class="hljs-number">0</span>;               <span class="hljs-comment">//对静态数据成员初始化 </span><br><span class="hljs-type">int</span> Product::n = <span class="hljs-number">0</span>;                   <span class="hljs-comment">//对静态数据成员初始化 </span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>Product Prod[<span class="hljs-number">3</span>] = &#123;<span class="hljs-built_in">Product</span>(<span class="hljs-number">101</span>, <span class="hljs-number">5</span>, <span class="hljs-number">23.5</span>), <span class="hljs-built_in">Product</span>(<span class="hljs-number">102</span>, <span class="hljs-number">12</span>, <span class="hljs-number">24.56</span>), <span class="hljs-built_in">Product</span>(<span class="hljs-number">103</span>, <span class="hljs-number">100</span>, <span class="hljs-number">21.5</span>)&#125;; <br><span class="hljs-comment">//定义Product类对象数组， 并给出数据 </span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)          <span class="hljs-comment">//统计3个销货员的销货情况 </span><br>Prod[i].<span class="hljs-built_in">total</span>(); <br>Product::<span class="hljs-built_in">display</span>();                   <span class="hljs-comment">//输出结果 </span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="p157">P157</h2><h3 id="section-11">7.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> num;<br><span class="hljs-type">int</span> grade;<br>string name;<br><span class="hljs-type">char</span> sex;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Teacher</span>(Student&amp; stu, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> d)&#123;<br>num = stu.num;<br>name = stu.name;<br>sex = stu.sex;<br>salary = s;<br>discipline = d;<br>&#125;<br><span class="hljs-type">int</span> num;<br><span class="hljs-type">int</span> salary;<br><span class="hljs-type">int</span> discipline;<br>string name;<br><span class="hljs-type">char</span> sex;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Student student1;<br>student<span class="hljs-number">1.</span>num = <span class="hljs-number">1</span>;<br>student<span class="hljs-number">1.</span>grade = <span class="hljs-number">3</span>;<br>student<span class="hljs-number">1.</span>name = <span class="hljs-string">&quot;张三&quot;</span>;<br>student<span class="hljs-number">1.</span>sex = <span class="hljs-string">&#x27;M&#x27;</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;学生姓名：&quot;</span> &lt;&lt; student<span class="hljs-number">1.</span>name &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;学生学号：&quot;</span> &lt;&lt; student<span class="hljs-number">1.</span>num &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;学生性别：&quot;</span> &lt;&lt; (student<span class="hljs-number">1.</span>sex == <span class="hljs-string">&#x27;M&#x27;</span> ? <span class="hljs-string">&quot;男&quot;</span> : <span class="hljs-string">&quot;女&quot;</span>) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;学生年级：&quot;</span> &lt;&lt; student<span class="hljs-number">1.</span>grade &lt;&lt; endl&lt;&lt;endl;<br><br><span class="hljs-function">Teacher <span class="hljs-title">teacher1</span><span class="hljs-params">(student1, <span class="hljs-number">5000</span>, <span class="hljs-number">10</span>)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;教师编号：&quot;</span> &lt;&lt; teacher<span class="hljs-number">1.</span>num &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;教师姓名：&quot;</span> &lt;&lt; teacher<span class="hljs-number">1.</span>name &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;教师性别：&quot;</span> &lt;&lt; teacher<span class="hljs-number">1.</span>sex &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;教师薪水：&quot;</span> &lt;&lt; teacher<span class="hljs-number">1.</span>salary &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;教师学科：&quot;</span> &lt;&lt; teacher<span class="hljs-number">1.</span>discipline &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="p203">P203</h2><h3 id="section-12">5.</h3><p>有以下程序结构，请分析访问属性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f1</span><span class="hljs-params">( )</span></span>;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f2</span><span class="hljs-params">( )</span></span>;<br><span class="hljs-type">int</span> j;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> k;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>: <span class="hljs-keyword">public</span> A &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f3</span><span class="hljs-params">( )</span></span>;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">int</span> m;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> n;<br><span class="hljs-comment">//A 为基类</span><br><span class="hljs-comment">//B 为 A的公用派生类</span><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>: <span class="hljs-keyword">public</span> B &#123;         <span class="hljs-comment">//C为B的公用派生类</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f4</span><span class="hljs-params">( )</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> p;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span> </span>&#123;<br>A a1;                      <span class="hljs-comment">//a1是基类A的对象</span><br>B b1;                        <span class="hljs-comment">//b1是派生类B的对象</span><br>C c1;                       <span class="hljs-comment">//c1是派生类C的对象</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>请问：</p><p>（1）在 main 函数中能否用b1.i,b1.j和bl.k 引用派生类B对象bI中基类A的成员？</p><p>（2）派生类B 中的成员函数能否调用基类A中的成员函数f1和f2？</p><p>（3）派生类B 中的成员函数能否引用基类A中的数据成员i，j，k？</p><p>（4）能否在main 函数中用cl.i,cl.j,cl.k,cl.m,cl.n,cl.p引用基类A的成员i，j，k，派生类B 的成员 m，n，以及派生类C的成员 P？</p><p>（5）能否在main函数中用cl.f1（），c1.c2（），c1.f3（）和c1.f4（）调用f1，f2,f3，f4成员函数</p><p>（6）派生类C的成员函数f4能否调用基类A中的成员函数f1，f2和派生类中的成员函数f3？</p><p>——————</p><p>（1）在 main 函数中不能直接用b1.i,b1.j和b1.k引用派生类B对象b1中基类A的成员，因为基类A的公共成员在派生类B中是保护成员。</p><p>（2）派生类B中的成员函数可以调用基类A中的成员函数f1和f2，但需要通过基类A的对象或指针来调用。例如：a1.f1()或 a1.f2()。</p><p>（3）派生类B中的成员函数可以引用基类A中的数据成员i，j，k，但需要通过基类A的对象或指针来引用。例如：a1.i,a1.j, a1.k。</p><p>（4）不能在main 函数中用cl.i, cl.j, cl.k, cl.m, cl.n, cl.p引用基类A的成员i，j，k，派生类B 的成员 m，n，以及派生类C的成员P。因为这些成员都是私有的，只能在它们所在的类内部访问。</p><p>（5）不能在main函数中用cl.f1（），c1.f2（），c1.f3（）和c1.f4（）调用f1，f2,f3，f4成员函数。因为f1和f2是基类A的私有成员函数，只能在基类A的内部访问；f3是派生类B的公共成员函数，可以在派生类B及其派生类的对象上调用；f4是派生类C的公共成员函数，可以在派生类C及其派生类的对象上调用。</p><p>（6）派生类C的成员函数f4能够调用基类A中的成员函数f1，但不能直接调用f2和派生类中的成员函数f3</p><hr /><p>在C++中，访问权限分为公有（public）、保护（protected）和私有（private）。继承关系可以通过这些访问权限来控制基类成员在派生类中的可见性。</p><p>下面分析每个类的成员在各自类及其派生类中的访问属性：</p><h4 id="基类-a-的成员">基类 A 的成员</h4><ul><li><code>void f1()</code>:公有成员函数，可以在类A及其所有派生类中直接访问。</li><li><code>int i</code>:公有数据成员，可以在类A及其所有派生类中直接访问。</li><li><code>void f2()</code>:保护成员函数，在类A及其派生类B、C、D中可以访问，但在类外不可访问。</li><li><code>int j</code>:保护数据成员，在类A及其派生类B、C、D中可以访问，但在类外不可访问。</li><li><code>int k</code>:私有数据成员，只能在类A中访问，在派生类B、C、D中均不可直接访问。</li></ul><h4 id="派生类-b-的成员">派生类 B 的成员</h4><ul><li><code>void f3()</code>:公有成员函数，可以在类B及其所有派生类中直接访问。</li><li><code>int m</code>:保护数据成员，可以在类B及其派生类C、D中访问，但在类A中不能直接访问。</li><li><code>int n</code>:私有数据成员，只能在类B中访问，在派生类C、D中不可直接访问。</li></ul><h4 id="派生类-c-的成员">派生类 C 的成员</h4><ul><li><code>void f4()</code>:公有成员函数，可以在类C及其所有派生类中直接访问。</li><li><code>int p</code>:私有数据成员，只能在类C中访问，在派生类D中不可直接访问。</li></ul><h4 id="派生类-d-的成员">派生类 D 的成员</h4><p>由于D是C的私有派生类，D的成员在C的外部是不可见的。因此，我们无法确定D的成员在D以外的范围的访问属性。</p><h4 id="main函数中的访问情况">main函数中的访问情况</h4><p>在main函数中，我们可以创建对象a1、b1和c1，并访问它们的公有成员。以下是各个对象的公有成员的访问情况：</p><ul><li><code>a1.f1()</code>: 可以调用，因为f1是公有成员函数。</li><li><code>a1.i</code>: 可以访问，因为i是公有数据成员。</li><li><code>b1.f1()</code>: 可以调用，因为f1是继承自A的公有成员函数。</li><li><code>b1.f3()</code>: 可以调用，因为f3是B的公有成员函数。</li><li><code>b1.i</code>: 可以访问，因为i是继承自A的公有数据成员。</li><li><code>c1.f1()</code>: 可以调用，因为f1是继承自A的公有成员函数。</li><li><code>c1.f3()</code>: 可以调用，因为f3是继承自B的公有成员函数。</li><li><code>c1.f4()</code>: 可以调用，因为f4是C的公有成员函数。</li><li><code>c1.i</code>: 可以访问，因为i是继承自A的公有数据成员。</li></ul><p>注意：对于保护成员和私有成员，它们不能在类的外部直接访问，但可以在派生类中通过特定的方式访问（如通过公有成员函数间接访问）。</p><hr /><h3 id="section-13">6.</h3><p>有以下程序结构，请分析所有成员在各类的范围内的访问属性：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;                       <span class="hljs-comment">//基类</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f1</span><span class="hljs-params">( )</span></span>;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f2</span><span class="hljs-params">( )</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> i;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>: <span class="hljs-keyword">public</span> A &#123;              <span class="hljs-comment">// B为A的公用派生类</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f3</span><span class="hljs-params">( )</span></span>;<br><span class="hljs-type">int</span> k;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>: <span class="hljs-keyword">protected</span> B &#123;         <span class="hljs-comment">//C为B的保护派生类</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f4</span><span class="hljs-params">( )</span></span>;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> p;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span>: <span class="hljs-keyword">private</span> C &#123;          <span class="hljs-comment">//D为C的私有派生类</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f5</span><span class="hljs-params">( )</span></span>;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">int</span> q;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> r;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>A a1;                       <span class="hljs-comment">//a1是基类A的对象</span><br>B b1;                      <span class="hljs-comment">//b1是派生类B的对象</span><br>C c1;                      <span class="hljs-comment">//c1是派生类C的对象</span><br>D d1;                      <span class="hljs-comment">//d1是派生类D的对象</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>在分析所有成员在各类范围内的访问属性之前，我们需要了解C++中的访问控制和继承关系。在C++中，访问权限分为公有（public）、保护（protected）和私有（private）。继承关系可以通过这些访问权限来控制基类成员在派生类中的可见性。</p><p>下面分析每个类的成员在各自类及其派生类中的访问属性：</p><h4 id="基类-a-的成员-1">基类 A 的成员</h4><ul><li><code>void f1()</code>:公有成员函数，可以在类A及其所有派生类中直接访问。</li><li><code>void f2()</code>:保护成员函数，在类A及其派生类B、C、D中可以访问，但在类外不可访问。</li><li><code>int i</code>:私有数据成员，只能在类A中访问，在派生类B、C、D中均不可直接访问。</li></ul><h4 id="派生类-b-的成员-1">派生类 B 的成员</h4><ul><li><code>void f3()</code>:公有成员函数，可以在类B及其所有派生类中直接访问。</li><li><code>int k</code>:公有数据成员，可以在类B及其所有派生类中直接访问。</li><li><code>int m</code>:私有数据成员，只能在类B中访问，在派生类C、D中不可直接访问。</li></ul><h4 id="派生类-c-的成员-1">派生类 C 的成员</h4><ul><li><code>void f4()</code>:公有成员函数，可以在类C及其派生类D中直接访问，但在类B中不能直接访问（因为C是B的保护派生类）。</li><li><code>int n</code>:保护数据成员，可以在类C及其派生类D中访问，在类B中不能直接访问。</li><li><code>int p</code>:私有数据成员，只能在类C中访问，在派生类D中不可直接访问。</li></ul><h4 id="派生类-d-的成员-1">派生类 D 的成员</h4><ul><li><code>void f5()</code>:公有成员函数，只能在类D中访问，因为D是C的私有派生类，f5在类D外部不可直接访问。</li><li><code>int q</code>: 保护数据成员，只能在类D中访问。</li><li><code>int r</code>: 私有数据成员，只能在类D中访问。</li></ul><h4 id="总结">总结</h4><ul><li>在<code>main()</code>函数中，只有公有成员可以直接被访问。对于类A、B、C、D的对象a1、b1、c1、d1，只有各自的公有成员函数和数据成员可以被直接访问。</li><li>保护成员和私有成员不能在类的外部直接访问，但可以在派生类中通过特定的方式访问（如通过公有成员函数间接访问）。</li><li>特别注意，由于D是C的私有派生类，D的成员在C的外部是不可见的，这意味着即使f4在C中是公有的，也不能在D的对象上直接调用f4，除非在D内部提供了相应的接口。</li></ul><h2 id="section-14">7.</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <br>&#123; <br><span class="hljs-keyword">public</span>: <br><span class="hljs-built_in">A</span>( )&#123;a=<span class="hljs-number">0</span>;b=<span class="hljs-number">0</span>;&#125; <br><span class="hljs-built_in">A</span>(<span class="hljs-type">int</span> i)&#123;a=i;b=<span class="hljs-number">0</span>;&#125; <br><span class="hljs-built_in">A</span>(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)&#123;a=i;b=j;&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">( )</span></span>&#123;cout&lt;&lt;<span class="hljs-string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; b=&quot;</span>&lt;&lt;b;&#125; <br><span class="hljs-keyword">private</span>: <br><span class="hljs-type">int</span> a; <br><span class="hljs-type">int</span> b; <br>&#125;; <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>: <span class="hljs-keyword">public</span> A <br>&#123; <br><span class="hljs-keyword">public</span>: <br><span class="hljs-built_in">B</span>( )&#123;c=<span class="hljs-number">0</span>;&#125; <br><span class="hljs-built_in">B</span>(<span class="hljs-type">int</span> i):<span class="hljs-built_in">A</span>(i)&#123;c=<span class="hljs-number">0</span>;&#125; <br><span class="hljs-built_in">B</span>(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j):<span class="hljs-built_in">A</span>(i,j)&#123;c=<span class="hljs-number">0</span>;&#125; <br><span class="hljs-built_in">B</span>(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j,<span class="hljs-type">int</span> k):<span class="hljs-built_in">A</span>(i,j)&#123;c=k;&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display1</span><span class="hljs-params">( )</span> </span><br><span class="hljs-function"></span>&#123;<span class="hljs-built_in">display</span>( ); <br>cout&lt;&lt;<span class="hljs-string">&quot; c=&quot;</span>&lt;&lt;c&lt;&lt;endl; <br>&#125; <br><span class="hljs-keyword">private</span>: <br><span class="hljs-type">int</span> c; <br>&#125;; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span> </span><br><span class="hljs-function"></span>&#123; B b1; <br><span class="hljs-function">B <span class="hljs-title">b2</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>; <br><span class="hljs-function">B <span class="hljs-title">b3</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)</span></span>; <br><span class="hljs-function">B <span class="hljs-title">b4</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>)</span></span>; <br>b<span class="hljs-number">1.</span><span class="hljs-built_in">display1</span>( ); <br>b<span class="hljs-number">2.</span><span class="hljs-built_in">display1</span>( ); <br>b<span class="hljs-number">3.</span><span class="hljs-built_in">display1</span>( ); <br>b<span class="hljs-number">4.</span><span class="hljs-built_in">display1</span>( ); <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>程序执行过程如下：</p><ol type="1"><li><p>定义了一个名为A的类，包含三个构造函数和一个display成员函数。构造函数分别接受不同数量的参数，用于初始化类的成员变量a和b。display函数用于输出成员变量a和b的值。</p></li><li><p>定义了一个名为B的类，继承自A类。B类包含四个构造函数和一个display1成员函数。构造函数分别接受不同数量的参数，用于初始化基类A的成员变量a、b和派生类B的成员变量c。display1函数调用基类的display函数并输出成员变量c的值。</p></li><li><p>在main函数中，创建了四个B类的对象：b1、b2、b3和b4。分别使用不同的构造函数进行初始化。</p></li><li><p>调用每个对象的display1函数，输出它们的成员变量a、b和c的值。</p></li></ol><p>具体执行过程如下：</p><ul><li>b1: 使用默认构造函数A()，a和b都被初始化为0，c被初始化为0。输出结果为"a=0 b=0 c=0"。</li><li>b2: 使用带一个整数参数的构造函数A(inti)，a被初始化为1，b被初始化为0，c被初始化为0。输出结果为 "a=1 b=0c=0"。</li><li>b3: 使用带两个整数参数的构造函数A(int i, intj)，a被初始化为1，b被初始化为3，c被初始化为0。输出结果为 "a=1 b=3c=0"。</li><li>b4: 使用带三个整数参数的构造函数B(int i, int j, intk)，a被初始化为1，b被初始化为3，c被初始化为5。输出结果为 "a=1 b=3c=5"。</li></ul><h2 id="section-15">8.</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <br>&#123;<span class="hljs-keyword">public</span>: <br><span class="hljs-built_in">A</span>( )&#123;cout&lt;&lt;<span class="hljs-string">&quot;constructing A &quot;</span>&lt;&lt;endl;&#125; <br>~<span class="hljs-built_in">A</span>( )&#123;cout&lt;&lt;<span class="hljs-string">&quot;destructing A &quot;</span>&lt;&lt;endl;&#125; <br>&#125;; <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<span class="hljs-keyword">public</span> A <br>&#123; <br><span class="hljs-keyword">public</span>: <br><span class="hljs-built_in">B</span>( )&#123;cout&lt;&lt;<span class="hljs-string">&quot;constructing B &quot;</span>&lt;&lt;endl;&#125; <br>~<span class="hljs-built_in">B</span>( )&#123;cout&lt;&lt;<span class="hljs-string">&quot;destructing B &quot;</span>&lt;&lt;endl;&#125; <br>&#125;; <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>:<span class="hljs-keyword">public</span> B <br>&#123;<span class="hljs-keyword">public</span>: <br><span class="hljs-built_in">C</span>( )&#123;cout&lt;&lt;<span class="hljs-string">&quot;constructing C &quot;</span>&lt;&lt;endl;&#125; <br>~<span class="hljs-built_in">C</span>( )&#123;cout&lt;&lt;<span class="hljs-string">&quot;destructing C &quot;</span>&lt;&lt;endl;&#125; <br>&#125;; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span> </span><br><span class="hljs-function"></span>&#123;C c1; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125; <br></code></pre></td></tr></table></figure><p>程序执行过程如下：</p><ol type="1"><li>进入main函数。</li><li>创建C类的对象c1。</li><li>调用C类的构造函数，输出 "constructing C"。</li><li>在C类的构造函数中，由于C类继承自B类，因此需要先调用B类的构造函数。</li><li>调用B类的构造函数，输出 "constructing B"。</li><li>在B类的构造函数中，由于B类继承自A类，因此需要先调用A类的构造函数。</li><li>调用A类的构造函数，输出 "constructing A"。</li><li>A类的构造函数执行完毕，返回到B类的构造函数。</li><li>B类的构造函数执行完毕，返回到C类的构造函数。</li><li>C类的构造函数执行完毕，对象c1的创建完成。</li><li>main函数结束，开始执行对象的析构。</li><li>首先调用C类的析构函数，输出 "destructing C"。</li><li>在C类的析构函数中，由于C类继承自B类，因此需要先调用B类的析构函数。</li><li>调用B类的析构函数，输出 "destructing B"。</li><li>在B类的析构函数中，由于B类继承自A类，因此需要先调用A类的析构函数。</li><li>调用A类的析构函数，输出 "destructing A"。</li><li>A类的析构函数执行完毕，返回到B类的析构函数。</li><li>B类的析构函数执行完毕，返回到C类的析构函数。</li><li>C类的析构函数执行完毕，对象c1的析构完成。</li><li>main函数结束，程序执行完毕。</li></ol><h3 id="section-16">9.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <br>&#123;<span class="hljs-keyword">public</span>: <br><span class="hljs-built_in">Teacher</span>(string nam,<span class="hljs-type">int</span> a,<span class="hljs-type">char</span> s,string tit,string ad,string t); <span class="hljs-comment">//构造函数 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">( )</span></span>;                            <span class="hljs-comment">//输出姓名、性别、年龄、职称、地址、电话 </span><br><span class="hljs-keyword">protected</span>: <br>string name; <br><span class="hljs-type">int</span> age; <br><span class="hljs-type">char</span> sex; <br>string title; <br>string addr; <br>string tel; <br>&#125;; <br>Teacher::<span class="hljs-built_in">Teacher</span>(string nam,<span class="hljs-type">int</span> a,<span class="hljs-type">char</span> s,string tit,string ad,string t):<br><span class="hljs-built_in">name</span>(nam),<span class="hljs-built_in">age</span>(a),<span class="hljs-built_in">sex</span>(s),<span class="hljs-built_in">title</span>(tit),<span class="hljs-built_in">addr</span>(ad),<span class="hljs-built_in">tel</span>(t)&#123; &#125; <span class="hljs-comment">//此两行为构造函数定义 </span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Teacher::display</span><span class="hljs-params">( )</span> </span><br><span class="hljs-function"></span>&#123;cout&lt;&lt;<span class="hljs-string">&quot;name:&quot;</span>&lt;&lt;name&lt;&lt;endl; <br>cout&lt;&lt;<span class="hljs-string">&quot;age:&quot;</span>&lt;&lt;age&lt;&lt;endl; <br>cout&lt;&lt;<span class="hljs-string">&quot;sex:&quot;</span>&lt;&lt;sex&lt;&lt;endl; <br>cout&lt;&lt;<span class="hljs-string">&quot;title:&quot;</span>&lt;&lt;title&lt;&lt;endl; <br>cout&lt;&lt;<span class="hljs-string">&quot;address:&quot;</span>&lt;&lt;addr&lt;&lt;endl; <br>cout&lt;&lt;<span class="hljs-string">&quot;tel:&quot;</span>&lt;&lt;tel&lt;&lt;endl; <br>&#125; <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cadre</span> <br>&#123;<span class="hljs-keyword">public</span>: <br><span class="hljs-built_in">Cadre</span>(string nam,<span class="hljs-type">int</span> a,<span class="hljs-type">char</span> s,string p,string ad,string t); <span class="hljs-comment">//构造函数 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">( )</span></span>; <br><span class="hljs-keyword">protected</span>: <br>string name; <br><span class="hljs-type">int</span> age; <br><span class="hljs-type">char</span> sex; <br>string post; <br>string addr; <br>string tel; <br>&#125;; <br>Cadre::<span class="hljs-built_in">Cadre</span>(string nam,<span class="hljs-type">int</span> a,<span class="hljs-type">char</span> s,string p,string ad,string t):<br><span class="hljs-built_in">name</span>(nam),<span class="hljs-built_in">age</span>(a),<span class="hljs-built_in">sex</span>(s),<span class="hljs-built_in">post</span>(p), <span class="hljs-built_in">addr</span>(ad),<span class="hljs-built_in">tel</span>(t)&#123;&#125;<span class="hljs-comment">//此两行为构造函数定义 </span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Cadre::display</span><span class="hljs-params">( )</span> </span><br><span class="hljs-function"></span>&#123;cout&lt;&lt;<span class="hljs-string">&quot;name:&quot;</span>&lt;&lt;name&lt;&lt;endl; <br>cout&lt;&lt;<span class="hljs-string">&quot;age:&quot;</span>&lt;&lt;age&lt;&lt;endl; <br>cout&lt;&lt;<span class="hljs-string">&quot;sex:&quot;</span>&lt;&lt;sex&lt;&lt;endl; <br>cout&lt;&lt;<span class="hljs-string">&quot;post:&quot;</span>&lt;&lt;post&lt;&lt;endl; <br>cout&lt;&lt;<span class="hljs-string">&quot;address:&quot;</span>&lt;&lt;addr&lt;&lt;endl; <br>cout&lt;&lt;<span class="hljs-string">&quot;tel:&quot;</span>&lt;&lt;tel&lt;&lt;endl; <br>&#125; <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<span class="hljs-keyword">public</span> Teacher,<span class="hljs-keyword">public</span> Cadre <br>&#123;<span class="hljs-keyword">public</span>: <br><span class="hljs-built_in">Person</span>(string nam,<span class="hljs-type">int</span> a,<span class="hljs-type">char</span> s,string tit,string p,string ad,string t,<span class="hljs-type">float</span> w); <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">( )</span></span>; <br><span class="hljs-keyword">private</span>: <br><span class="hljs-type">float</span> wage; <br>&#125;; <br><br>Person::<span class="hljs-built_in">Person</span>(string nam,<span class="hljs-type">int</span> a,<span class="hljs-type">char</span> s,string t,string p,string ad,string tel,<span class="hljs-type">float</span> w): <br><span class="hljs-built_in">Teacher</span>(nam,a,s,t,ad,tel),<br><span class="hljs-built_in">Cadre</span>(nam,a,s,p,ad,tel),<br><span class="hljs-built_in">wage</span>(w) &#123; &#125; <span class="hljs-comment">//以上为构造函数定义</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Person::show</span><span class="hljs-params">( )</span> </span><br><span class="hljs-function"></span>&#123;Teacher::<span class="hljs-built_in">display</span>( );                                  <span class="hljs-comment">//指定作用域teacher类 </span><br>cout&lt;&lt;<span class="hljs-string">&quot;post:&quot;</span>&lt;&lt;Cadre::post&lt;&lt;endl;                     <span class="hljs-comment">//指定作用域Cadre类 </span><br>cout&lt;&lt;<span class="hljs-string">&quot;wages:&quot;</span>&lt;&lt;wage&lt;&lt;endl; <br>&#125; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span> </span><br><span class="hljs-function"></span>&#123;<span class="hljs-function">Person <span class="hljs-title">person1</span><span class="hljs-params">(<span class="hljs-string">&quot;Wang-li&quot;</span>,<span class="hljs-number">50</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&quot;prof.&quot;</span>,<span class="hljs-string">&quot;president&quot;</span>,<span class="hljs-string">&quot;135 Beijing Road,Shanghai&quot;</span>,  </span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-string">&quot;(021)61234567&quot;</span>,<span class="hljs-number">1534.5</span>)</span></span>; <br>person<span class="hljs-number">1.</span><span class="hljs-built_in">show</span>( ); <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>曲园</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>压缩字符串</title>
    <link href="/2024/03/17/%E5%8E%8B%E7%BC%A9%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2024/03/17/%E5%8E%8B%E7%BC%A9%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1><p>实现一个算法来压缩一个字符串。压缩的要求如下1.需要判断压缩能不能节省空间，仅在压缩后字符串比原字符串长度更短时进行压缩。2.压缩的格式是将连续相同字符替换为字符+数字形式，例如"AAABCCDDDD"变为"A3BC2D4"。</p><h1 id="输入描述">输入描述</h1><p>输入一行字符串，长度不超过 500.</p><h1 id="输出描述">输出描述</h1><p>输出一行。若输入的字符串可压缩，则输出压缩后的字符串，否则输出NO。</p><h2 id="mycode">MyCode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">yasuo</span>(<span class="hljs-params">txt</span>):<br>    a=<span class="hljs-number">1</span><br>    txt+=<span class="hljs-string">&quot;@&quot;</span><br>    result=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(txt)-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> txt[i]==txt[i+<span class="hljs-number">1</span>]:<br>            a+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> a!=<span class="hljs-number">1</span>:<br>                result += txt[i] + <span class="hljs-built_in">str</span>(a)<br>            <span class="hljs-keyword">else</span>:<br>                result+=txt[i]<br>            a=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> result<br>a=<span class="hljs-built_in">input</span>()<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(yasuo(a))&lt;<span class="hljs-built_in">len</span>(a):<br>    <span class="hljs-built_in">print</span>(yasuo(a))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>统计数字</title>
    <link href="/2024/03/17/%E7%BB%9F%E8%AE%A1%E6%95%B0%E5%AD%97/"/>
    <url>/2024/03/17/%E7%BB%9F%E8%AE%A1%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<figure><img src="/images/lanqiaoOJ535.png" alt="图片" /><figcaption aria-hidden="true">图片</figcaption></figure><h2 id="mycode">MyCode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-built_in">dir</span>=&#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    num=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    <span class="hljs-keyword">if</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>:<br>        <span class="hljs-built_in">dir</span>[num]+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">dir</span>[num]=<span class="hljs-number">1</span><br><span class="hljs-built_in">dir</span>=<span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">dir</span>.items(),key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>:<br>    <span class="hljs-built_in">print</span>(i[<span class="hljs-number">0</span>],i[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CLZ银行问题</title>
    <link href="/2024/03/17/CLZ%E9%93%B6%E8%A1%8C%E9%97%AE%E9%A2%98/"/>
    <url>/2024/03/17/CLZ%E9%93%B6%E8%A1%8C%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>题目描述</p><p>CLZ银行只有两个接待窗口，VIP窗口和普通窗口。VIP用户进入VIP窗口排队，剩下的用户进入普通窗口排队。现有M 次操作，操作有四种类型，如下：</p><p>· IN name V:表示一名叫 name 的用户到 VIP 窗口排队。</p><p>· OUT V:表示 VIP 窗口队头的用户离开排队。 · IN name N:表示一名叫 name的用户到普通窗口排队。</p><p>· OUT N:表示普通窗口队头的用户离开排队。</p><p>求 I 次操作结束后 VIP 窗囗队列和普通窗口队列中的姓名。</p><p>输入描述</p><p>第一行是一个整数 M(1 ≤ M ≤ 1000)，表示一共有 M 次操作。 第二行到第 M+1行输入操作，格式如下：</p><p>IN name V</p><p>OUT V</p><p>IN name N</p><p>OUT N</p><p>输出描述</p><p>输出 M 次操作后 VIP 窗囗队列和普通窗口队列中的姓名(从头到尾)，先输出VIP 窗口队列后输出普通窗口队列。</p><h2 id="mycode">MyCode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">V=[]<br>N=[]<br>M=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M):<br>    txt=<span class="hljs-built_in">input</span>()<br>    <span class="hljs-keyword">if</span> txt[:txt.index(<span class="hljs-string">&quot; &quot;</span>)] == <span class="hljs-string">&quot;IN&quot;</span>:<br>        a = txt[txt.index(<span class="hljs-string">&quot; &quot;</span>)+<span class="hljs-number">1</span>:]<br>        <span class="hljs-keyword">if</span> a[-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;V&quot;</span>:<br>            V.append(a[:a.index(<span class="hljs-string">&quot; &quot;</span>)])<br>        <span class="hljs-keyword">elif</span> a[-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;N&quot;</span>:<br>            N.append(a[:a.index(<span class="hljs-string">&quot; &quot;</span>)])<br>    <span class="hljs-keyword">else</span>:<br>        a = txt[txt.index(<span class="hljs-string">&quot; &quot;</span>)+<span class="hljs-number">1</span>:]<br>        <span class="hljs-keyword">if</span> a[-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;V&quot;</span>:<br>            V.pop(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">elif</span> a[-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;N&quot;</span>:<br>            N.pop(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> V:<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> N:<br>    <span class="hljs-built_in">print</span>(j)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一元三次方程求解</title>
    <link href="/2024/03/17/%E4%B8%80%E5%85%83%E4%B8%89%E6%AC%A1%E6%96%B9%E7%A8%8B%E6%B1%82%E8%A7%A3/"/>
    <url>/2024/03/17/%E4%B8%80%E5%85%83%E4%B8%89%E6%AC%A1%E6%96%B9%E7%A8%8B%E6%B1%82%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>有形如：ax3+bx2+cx+d=0这样的一个一元三次方程。给出该方程中各项的系数(a，b，c，d均为实数)，并约定该方程存在三个不同实根(根的范围在-100至100之间)，且根与根之差的绝对值&gt;=1。要求由小到大依次在同一行输出这三个实根(根与根之间留有空格)，并精确到小数点后2位。</p><h2 id="mycode">MyCode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">a,b,c,d=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">y</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> a*x**<span class="hljs-number">3</span>+b*x**<span class="hljs-number">2</span>+c*x+d<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">100</span>,<span class="hljs-number">100</span>):<br>    left=i<br>    right=i+<span class="hljs-number">1</span><br>    y1=y(left)<br>    y2=y(right)<br>    <span class="hljs-keyword">if</span> y1==<span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(left), end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-keyword">if</span> y1*y2&lt;<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">while</span> right-left&gt;=<span class="hljs-number">0.001</span>:<br>            mid=(left+right)/<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> y(mid)*y(right)&lt;=<span class="hljs-number">0</span>:<br>                left=mid<br>            <span class="hljs-keyword">else</span>:<br>                right=mid<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(right), end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>约瑟夫环</title>
    <link href="/2024/03/17/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/"/>
    <url>/2024/03/17/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<p>已知 n 个人（以编号1，2，3…n分别表示）围坐在一张圆桌周围。从编号为 k的人开始报数，数到 m 的那个人出圈；他的下一个人又从 1 开始报数，数到 m的那个人又出圈；依此规律重复下去，直到剩余最后一个胜利者。</p><h2 id="mycode">MyCode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">josephus_problem</span>(<span class="hljs-params">maxnum, startnum, stepnum</span>):<br>    <span class="hljs-comment"># 创建一个包含从startnum%maxnum到maxnum+1的列表，再加上从1到startnum%maxnum-1的列表</span><br>    data = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(startnum % maxnum, maxnum + <span class="hljs-number">1</span>)) + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, startnum % maxnum))<br>    num = <span class="hljs-number">0</span>  <span class="hljs-comment"># 初始化计数器</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(data) &gt; <span class="hljs-number">1</span>:  <span class="hljs-comment"># 当列表长度大于1时执行循环</span><br>        num += <span class="hljs-number">1</span>  <span class="hljs-comment"># 计数器加1</span><br>        temp = data.pop(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 弹出列表中的第一个元素</span><br>        <span class="hljs-keyword">if</span> num == stepnum:  <span class="hljs-comment"># 如果计数器等于步长</span><br>            <span class="hljs-built_in">print</span>(temp)  <span class="hljs-comment"># 输出当前元素</span><br>            num = <span class="hljs-number">0</span>  <span class="hljs-comment"># 重置计数器</span><br>        <span class="hljs-keyword">else</span>:<br>            data.append(temp)  <span class="hljs-comment"># 将当前元素添加到列表末尾</span><br>    <span class="hljs-built_in">print</span>(data[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 输出列表中剩余的唯一元素</span><br><br>n, k, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())  <span class="hljs-comment"># 读取输入的三个整数</span><br>josephus_problem(n, k, m)  <span class="hljs-comment"># 调用约瑟夫问题函数</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024年曲阜师范大学网络空间安全学院天体赛选拔赛</title>
    <link href="/2024/03/16/2024%E5%B9%B4%E6%9B%B2%E9%98%9C%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8%E5%AD%A6%E9%99%A2%E5%A4%A9%E4%BD%93%E8%B5%9B%E9%80%89%E6%8B%94%E8%B5%9B/"/>
    <url>/2024/03/16/2024%E5%B9%B4%E6%9B%B2%E9%98%9C%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8%E5%AD%A6%E9%99%A2%E5%A4%A9%E4%BD%93%E8%B5%9B%E9%80%89%E6%8B%94%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1id="年曲阜师范大学网络空间安全学院天体赛选拔赛"><strong>2024年曲阜师范大学网络空间安全学院天体赛选拔赛</strong></h1><figure><img src="/images/TianTi_2024.png" alt="图片" /><figcaption aria-hidden="true">图片</figcaption></figure><h2 id="l1-1-宇宙无敌大招呼"><strong>L1-1 宇宙无敌大招呼</strong></h2><p>分数 5</p><p>据说所有程序员学习的第一个程序都是在屏幕上输出一句“HelloWorld”，跟这个世界打个招呼。作为天梯赛中的程序员，你写的程序得高级一点，要能跟任意指定的星球打招呼。</p><h3 id="输入格式">输入格式：</h3><p>输入在第一行给出一个星球的名字<code>S</code>，是一个由不超过7个英文字母组成的单词，以回车结束。</p><h3 id="输出格式">输出格式：</h3><p>在一行中输出<code>Hello S</code>，跟输入的<code>S</code>星球打个招呼。</p><h3 id="输入样例">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">Mars<br></code></pre></td></tr></table></figure><h3 id="输出样例">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">Hello Mars<br></code></pre></td></tr></table></figure><p>代码长度限制 16 KB</p><p>时间限制 400 ms</p><p>内存限制 64 MB</p><h3 id="mycode">MyCode</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">S=<span class="hljs-built_in">input</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello %s&quot;</span> % (S))<br></code></pre></td></tr></table></figure><h2 id="l1-2-考试周"><strong>L1-2 考试周</strong></h2><p>分数 5</p><figure><imgsrc="https://images.ptausercontent.com/6ea1fd32-0cef-4111-b263-5ef29393be2b.jpg"alt="ksz.jpg" /><figcaption aria-hidden="true">ksz.jpg</figcaption></figure><p>考试周快到了，浙江大学的电子屏又调皮了……本题请你帮小编写一个自动倒计时的程序，对给定的日期（例如“腊八”就对应8）和倒计时天数（例如电子屏上的“四天之后”就对应4），自动调整公式里的分母（例如 8/2=4 里面的那个 2）。</p><h3 id="输入格式-1">输入格式：</h3><p>输入在一行中给出两个正整数：<em>A</em> 是给定的日期，不超过30；<em>B</em> 是倒计时天数，不超过 10。</p><h3 id="输出格式-1">输出格式：</h3><p>在一行中输出公式 <em>A</em>/<em>X</em>=<em>B</em>，其中 <em>X</em>是满足等式的数字，输出时保留小数点后 1 位即可。</p><h3 id="输入样例-1">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">8 3<br></code></pre></td></tr></table></figure><h3 id="输出样例-1">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">8/2.7=3<br></code></pre></td></tr></table></figure><p>代码长度限制 16 KB</p><p>时间限制 400 ms</p><p>内存限制 64 MB</p><h3 id="mycode-1">MyCode</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">A,B=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>X=A/B<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d/%.1f=%d&quot;</span> % (A,X,B))<br></code></pre></td></tr></table></figure><h2 id="l1-3-真的恭喜你"><strong>L1-3 真的恭喜你</strong></h2><p>分数 10</p><p>当别人告诉你自己考了 x 分的时候，你要回答说：“恭喜你考了 x分！”比如小明告诉你他考了90分，你就用汉语拼音打出来<code>gong xi ni kao le 90 fen!</code>。</p><p>但是如果小明没考好，比如只考了 20分，你也“恭喜”人家就不对了。这时候你应该安慰他说：“考了 20分别泄气！”用汉语拼音写出来就是<code>kao le 20 fen bie xie qi!</code>。</p><h3 id="输入格式-2">输入格式：</h3><p>输入在一行里给出一位小朋友的分数。这个分数是一个 0 到 100之间的整数。</p><h3 id="输出格式-2">输出格式：</h3><p>在一行中输出你对这位小朋友说的话。如果人家考到不低于 90 分，就说<code>gong xi ni kao le X fen!</code>；如果不到 90 分，就说<code>kao le X fen bie xie qi!</code>。其中 <code>X</code>是小朋友输入的分数。</p><h3 id="输入样例-1-1">输入样例 1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">95<br></code></pre></td></tr></table></figure><h3 id="输出样例-1-1">输出样例 1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">gong xi ni kao le 95 fen!<br></code></pre></td></tr></table></figure><h3 id="输入样例-2">输入样例 2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">89<br></code></pre></td></tr></table></figure><h3 id="输出样例-2">输出样例 2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">kao le 89 fen bie xie qi!<br></code></pre></td></tr></table></figure><p>代码长度限制 16 KB</p><p>时间限制 400 ms</p><p>内存限制 64 MB</p><h3 id="mycode-2">MyCode</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">grade=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> grade&gt;=<span class="hljs-number">90</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;gong xi ni kao le %d fen!&quot;</span> % (grade))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;kao le %d fen bie xie qi!&quot;</span> % (grade))<br></code></pre></td></tr></table></figure><h2 id="l1-4-cassels方程"><strong>L1-4 Cassels方程</strong></h2><p>分数 10</p><p>Cassels方程是一个在数论界产生了巨大影响的不定方程：<em>x</em>2+<em>y</em>2+<em>z</em>2=3*x**yz*。该方程有无穷多自然数解。</p><p>本题并不是要你求解这个方程，只是判断给定的一组(<em>x</em>,<em>y</em>,<em>z</em>) 是不是这个方程的解。</p><h3 id="输入格式-3">输入格式：</h3><p>输入在第一行给出一个不超过 10 的正整数 <em>N</em>，随后 <em>N</em>行，每行给出 3 个正整数 0&lt;<em>x</em>≤<em>y</em>≤<em>z</em>≤1000。</p><h3 id="输出格式-3">输出格式：</h3><p>对于每一组输入，如果是一组解，就在一行中输出<code>Yes</code>，否则输出 <code>No</code>。</p><h3 id="输入样例-3">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">2<br>1 1 1<br>5 6 7<br></code></pre></td></tr></table></figure><h3 id="输出样例-3">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs out">Yes<br>No<br></code></pre></td></tr></table></figure><p>代码长度限制 16 KB</p><p>时间限制 400 ms</p><p>内存限制 64 MB</p><h3 id="mycode-3">MyCode</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">N=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    x,y,z=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-keyword">if</span> x**<span class="hljs-number">2</span>+y**<span class="hljs-number">2</span>+z**<span class="hljs-number">2</span>==<span class="hljs-number">3</span>*x*y*z:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="l1-5-6翻了"><strong>L1-5 6翻了</strong></h2><p>分数 15</p><figure><imgsrc="https://images.ptausercontent.com/f490fec2-60be-4f14-87fc-a8cd26cb2b33.JPG"alt="666.JPG" /><figcaption aria-hidden="true">666.JPG</figcaption></figure><p>“666”是一种网络用语，大概是表示某人很厉害、我们很佩服的意思。最近又衍生出另一个数字“9”，意思是“6翻了”，实在太厉害的意思。如果你以为这就是厉害的最高境界，那就错啦—— 目前的最高境界是数字“27”，因为这是 3 个 “9”！</p><p>本题就请你编写程序，将那些过时的、只会用一连串“6666……6”表达仰慕的句子，翻译成最新的高级表达。</p><h3 id="输入格式-4">输入格式：</h3><p>输入在一行中给出一句话，即一个非空字符串，由不超过 1000个英文字母、数字和空格组成，以回车结束。</p><h3 id="输出格式-4">输出格式：</h3><p>从左到右扫描输入的句子：如果句子中有超过 3 个连续的 6，则将这串连续的6 替换成 9；但如果有超过 9 个连续的 6，则将这串连续的 6 替换成27。其他内容不受影响，原样输出。</p><h3 id="输入样例-4">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">it is so 666 really 6666 what else can I say 6666666666<br></code></pre></td></tr></table></figure><h3 id="输出样例-4">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">it is so 666 really 9 what else can I say 27<br></code></pre></td></tr></table></figure><p>代码长度限制 16 KB</p><p>时间限制 400 ms</p><p>内存限制 64 MB</p><h3 id="mycode-4">MyCode</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">x=<span class="hljs-built_in">input</span>()<br>txt=x+<span class="hljs-string">&quot;@&quot;</span><br>num_for_6=<span class="hljs-number">0</span><br>result=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">replace_6</span>(<span class="hljs-params">num_for_6</span>):<br>    result=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> num_for_6&lt;=<span class="hljs-number">3</span>:<br>        result+=num_for_6*<span class="hljs-string">&quot;6&quot;</span><br>    <span class="hljs-keyword">elif</span> num_for_6&gt;<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> num_for_6&lt;=<span class="hljs-number">9</span>:<br>        result+=<span class="hljs-string">&quot;9&quot;</span><br>    <span class="hljs-keyword">elif</span> num_for_6&gt;<span class="hljs-number">9</span>:<br>        result+=<span class="hljs-string">&quot;27&quot;</span><br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> txt:<br>    <span class="hljs-keyword">if</span> i==<span class="hljs-string">&quot;6&quot;</span>:<br>        num_for_6+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> i!=<span class="hljs-string">&quot;6&quot;</span>:<br>        result+=replace_6(num_for_6)<br>        result += i<br>        num_for_6=<span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(result[:-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h2 id="l1-6-不变初心数"><strong>L1-6 不变初心数</strong></h2><p>分数 15</p><p>不变初心数是指这样一种特别的数，它分别乘 2、3、4、5、6、7、8、9时，所得乘积各位数之和却不变。例如 18 就是这样的数：18 的 2 倍是36，3+6=9；18 的 3 倍是 54，5+4=9；…… 18 的 9 倍是 162，1+6+2=9。对于 18而言，9 就是它的初心。本题要求你判断任一个给定的数是否有不变的初心。</p><h3 id="输入格式-5">输入格式：</h3><p>输入在第一行中给出一个正整数 N（≤ 100）。随后 N行，每行给出一个不超过 105 的正整数。</p><h3 id="输出格式-5">输出格式：</h3><p>对每个给定的数字，如果它有不变的初心，就在一行中输出它的初心；否则输出<code>NO</code>。</p><h3 id="输入样例-5">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs in">4<br>18<br>256<br>99792<br>88672<br></code></pre></td></tr></table></figure><h3 id="输出样例-5">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs out">9<br>NO<br>36<br>NO<br></code></pre></td></tr></table></figure><p>代码长度限制 16 KB</p><p>时间限制 400 ms</p><p>内存限制 64 MB</p><h3 id="mycode-5">MyCode</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ge_wei_num_sum</span>(<span class="hljs-params">x</span>):<br>    x=<span class="hljs-built_in">str</span>(x)<br>    result=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>        result+=<span class="hljs-built_in">int</span>(i)<br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">chu_xin</span>(<span class="hljs-params">x</span>):<br>    a=ge_wei_num_sum(x)<br>    flag=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">if</span> ge_wei_num_sum(x*i)==a:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            flag=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> flag==<span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(a)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO&quot;</span>)<br><br>N=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    chu_xin(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>()))<br></code></pre></td></tr></table></figure><h2 id="l1-7-整除光棍"><strong>L1-7 整除光棍</strong></h2><p>分数 20</p><p>这里所谓的“光棍”，并不是指单身汪啦~说的是全部由1组成的数字，比如1、11、111、1111等。传说任何一个光棍都能被一个不以5结尾的奇数整除。比如，111111就可以被13整除。现在，你的程序要读入一个整数<code>x</code>，这个整数一定是奇数并且不以5结尾。然后，经过计算，输出两个数字：第一个数字<code>s</code>，表示<code>x</code>乘以<code>s</code>是一个光棍，第二个数字<code>n</code>是这个光棍的位数。这样的解当然不是唯一的,题目要求你输出最小的解。</p><p>提示：一个显然的办法是逐渐增加光棍的位数，直到可以整除<code>x</code>为止。但难点在于，<code>s</code>可能是个非常大的数——比如，程序输入31，那么就输出3584229390681和15，因为31乘以3584229390681的结果是111111111111111，一共15个1。</p><h3 id="输入格式-6">输入格式：</h3><p>输入在一行中给出一个不以5结尾的正奇数<code>x</code>（&lt;1000）。</p><h3 id="输出格式-6">输出格式：</h3><p>在一行中输出相应的最小的<code>s</code>和<code>n</code>，其间以1个空格分隔。</p><h3 id="输入样例-6">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">31<br></code></pre></td></tr></table></figure><h3 id="输出样例-6">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">3584229390681 15<br></code></pre></td></tr></table></figure><p>代码长度限制 16 KB</p><p>时间限制 400 ms</p><p>内存限制 64 MB</p><h3 id="mycode-6">MyCode</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<span class="hljs-comment">#631</span><br>guang_gun=<span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">int</span>(guang_gun)%x!=<span class="hljs-number">0</span>:<br>    guang_gun+=<span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(guang_gun)//<span class="hljs-built_in">int</span>(x),<span class="hljs-built_in">len</span>(guang_gun))<br></code></pre></td></tr></table></figure><h2 id="l1-8-编程团体赛"><strong>L1-8 编程团体赛</strong></h2><p>分数 20</p><p>编程团体赛的规则为：每个参赛队由若干队员组成；所有队员独立比赛；参赛队的成绩为所有队员的成绩和；成绩最高的队获胜。</p><p>现给定所有队员的比赛成绩，请你编写程序找出冠军队。</p><h3 id="输入格式-7">输入格式：</h3><p>输入第一行给出一个正整数 <em>N</em>（≤104），即所有参赛队员总数。随后<em>N</em>行，每行给出一位队员的成绩，格式为：<code>队伍编号-队员编号 成绩</code>，其中<code>队伍编号</code>为1 到 1000 的正整数，<code>队员编号</code>为 1 到 10的正整数，<code>成绩</code>为 0 到 100 的整数。</p><h3 id="输出格式-7">输出格式：</h3><p>在一行中输出冠军队的编号和总成绩，其间以一个空格分隔。注意：题目保证冠军队是唯一的。</p><h3 id="输入样例-7">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs in">6<br>3-10 99<br>11-5 87<br>102-1 0<br>102-3 100<br>11-9 89<br>3-2 61<br></code></pre></td></tr></table></figure><h3 id="输出样例-7">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">11 176<br></code></pre></td></tr></table></figure><p>代码长度限制 16 KB</p><p>时间限制 400 ms</p><p>内存限制 64 MB</p><h3 id="mycode-7">MyCode</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">N=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-built_in">dir</span>=&#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    a=<span class="hljs-built_in">input</span>()<br>    dui_wu=<span class="hljs-built_in">int</span>(a[:a.index(<span class="hljs-string">&quot;-&quot;</span>)])<br>    grade=<span class="hljs-built_in">int</span>(a[a.index(<span class="hljs-string">&quot; &quot;</span>)+<span class="hljs-number">1</span>:])<br>    <span class="hljs-keyword">if</span> dui_wu <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>:<br>        <span class="hljs-built_in">dir</span>[dui_wu]+=grade<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">dir</span>[dui_wu]=grade<br><span class="hljs-built_in">dir</span>=<span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">dir</span>.items(),key= <span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>[-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],<span class="hljs-built_in">dir</span>[-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h2 id="l2-1-彩虹瓶"><strong>L2-1 彩虹瓶</strong></h2><p>分数 25</p><figure><imgsrc="https://images.ptausercontent.com/5612216c-1cbd-4dba-b9da-4f653ad00c7b.JPG"alt="rb.JPG" /><figcaption aria-hidden="true">rb.JPG</figcaption></figure><p>彩虹瓶的制作过程（并不）是这样的：先把一大批空瓶铺放在装填场地上，然后按照一定的顺序将每种颜色的小球均匀撒到这批瓶子里。</p><p>假设彩虹瓶里要按顺序装 N 种颜色的小球（不妨将顺序就编号为 1 到N）。现在工厂里有每种颜色的小球各一箱，工人需要一箱一箱地将小球从工厂里搬到装填场地。如果搬来的这箱小球正好是可以装填的颜色，就直接拆箱装填；如果不是，就把箱子先码放在一个临时货架上，码放的方法就是一箱一箱堆上去。当一种颜色装填完以后，先看看货架顶端的一箱是不是下一个要装填的颜色，如果是就取下来装填，否则去工厂里再搬一箱过来。</p><p>如果工厂里发货的顺序比较好，工人就可以顺利地完成装填。例如要按顺序装填7 种颜色，工厂按照 7、6、1、3、2、5、4 这个顺序发货，则工人先拿到 7、6两种不能装填的颜色，将其按照 7 在下、6 在上的顺序堆在货架上；拿到 1时可以直接装填；拿到 3 时又得临时码放在 6 号颜色箱上；拿到 2时可以直接装填；随后从货架顶取下 3 进行装填；然后拿到 5，临时码放到 6上面；最后取了 4 号颜色直接装填；剩下的工作就是顺序从货架上取下 5、6、7依次装填。</p><p>但如果工厂按照 3、1、5、4、2、6、7这个顺序发货，工人就必须要愤怒地折腾货架了，因为装填完 2号颜色以后，不把货架上的多个箱子搬下来就拿不到 3号箱，就不可能顺利完成任务。</p><p>另外，货架的容量有限，如果要堆积的货物超过容量，工人也没办法顺利完成任务。例如工厂按照7、6、5、4、3、2、1 这个顺序发货，如果货架够高，能码放 6只箱子，那还是可以顺利完工的；但如果货架只能码放 5只箱子，工人就又要愤怒了……</p><p>本题就请你判断一下，工厂的发货顺序能否让工人顺利完成任务。</p><h3 id="输入格式-8">输入格式：</h3><p>输入首先在第一行给出 3 个正整数，分别是彩虹瓶的颜色数量<em>N</em>（1&lt;<em>N</em>≤103）、临时货架的容量<em>M</em>（&lt;<em>N</em>）、以及需要判断的发货顺序的数量<em>K</em>。</p><p>随后 <em>K</em> 行，每行给出 <em>N</em> 个数字，是 1 到<em>N</em>的一个排列，对应工厂的发货顺序。</p><p>一行中的数字都以空格分隔。</p><h3 id="输出格式-8">输出格式：</h3><p>对每个发货顺序，如果工人可以愉快完工，就在一行中输出<code>YES</code>；否则输出 <code>NO</code>。</p><h3 id="输入样例-8">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs in">7 5 3<br>7 6 1 3 2 5 4<br>3 1 5 4 2 6 7<br>7 6 5 4 3 2 1<br></code></pre></td></tr></table></figure><h3 id="输出样例-8">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs out">YES<br>NO<br>NO<br></code></pre></td></tr></table></figure><p>代码长度限制 16 KB</p><p>时间限制 400 ms</p><p>内存限制 64 MB</p><h3 id="mycode-8">MyCode</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python">N,M,K=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>right_list=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,N+<span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(K):<br>    li=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;YES&quot;</span>)<br><span class="hljs-comment"># N,M,K=map(int,input().split())</span><br><span class="hljs-comment"># right_list=list(range(1,N+1))</span><br><span class="hljs-comment"># huo_jia=[]</span><br><span class="hljs-comment"># def situation_1(n=right_list[0],f=huo_jia):</span><br><span class="hljs-comment">#     if f[-1]!=n:</span><br><span class="hljs-comment">#         return 1</span><br><span class="hljs-comment">#     else:</span><br><span class="hljs-comment">#         return 0</span><br><span class="hljs-comment"># def situation_2(huo_jia_li=huo_jia,M=M):</span><br><span class="hljs-comment">#     if len(huo_jia_li)&gt;M:</span><br><span class="hljs-comment">#         return 1</span><br><span class="hljs-comment">#     else:</span><br><span class="hljs-comment">#         return 0</span><br><span class="hljs-comment"># for i in range(K):</span><br><span class="hljs-comment">#     li=list(map(int,input().split()))</span><br><span class="hljs-comment">#     flag=0</span><br><span class="hljs-comment">#     while len(li)!=0 and flag==0:</span><br><span class="hljs-comment">#         if li[0]!=right_list[0]:</span><br><span class="hljs-comment">#             try:</span><br><span class="hljs-comment">#                 if huo_jia[-1] == right_list[0]:</span><br><span class="hljs-comment">#                     if situation_1()==1:</span><br><span class="hljs-comment">#                         flag=1</span><br><span class="hljs-comment">#                     else:</span><br><span class="hljs-comment">#                         huo_jia.pop(-1)</span><br><span class="hljs-comment">#                         right_list.pop(0)</span><br><span class="hljs-comment">#                 else:</span><br><span class="hljs-comment">#                     huo_jia.append(li[0])</span><br><span class="hljs-comment">#                     if situation_2() == 1:</span><br><span class="hljs-comment">#                         flag=1</span><br><span class="hljs-comment">#                     li.pop(0)</span><br><span class="hljs-comment">#             except IndexError:</span><br><span class="hljs-comment">#                 huo_jia.append(li[0])</span><br><span class="hljs-comment">#                 if situation_2() == 1:</span><br><span class="hljs-comment">#                     flag=1</span><br><span class="hljs-comment">#                 li.pop(0)</span><br><span class="hljs-comment">#         elif li[0]==right_list[0]:</span><br><span class="hljs-comment">#             right_list.pop(0)</span><br><span class="hljs-comment">#             li.pop(0)</span><br><span class="hljs-comment">#     if flag==1:</span><br><span class="hljs-comment">#         print(&quot;NO&quot;)</span><br><span class="hljs-comment">#         break</span><br><span class="hljs-comment">#     else:</span><br><span class="hljs-comment">#         while len(huo_jia)!=0:</span><br><span class="hljs-comment">#             huo_jia.pop(-1)</span><br><span class="hljs-comment">#         print(&quot;YES&quot;)</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><h2 id="l2-2-三足鼎立"><strong>L2-2 三足鼎立</strong></h2><p>分数 25</p><p>当三个国家中的任何两国实力之和都大于第三国的时候，这三个国家互相结盟就呈“三足鼎立”之势，这种状态是最稳定的。</p><p>现已知本国的实力值，又给出 <em>n</em>个其他国家的实力值。我们需要从这 <em>n</em> 个国家中找 2个结盟，以成三足鼎立。有多少种选择呢？</p><h3 id="输入格式-9">输入格式：</h3><p>输入首先在第一行给出 2 个正整数 <em>n</em>（2≤<em>n</em>≤105）和<em>P</em>（≤109），分别为其他国家的个数、以及本国的实力值。随后一行给出<em>n</em> 个正整数，表示<em>n</em> 个其他国家的实力值。每个数值不超过109，数字间以空格分隔。</p><h3 id="输出格式-9">输出格式：</h3><p>在一行中输出本国结盟选择的个数。</p><h3 id="输入样例-9">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">7 30<br>42 16 2 51 92 27 35<br></code></pre></td></tr></table></figure><h3 id="输出样例-9">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">9<br></code></pre></td></tr></table></figure><h3 id="样例解释">样例解释：</h3><p>能联合的另外 2 个国家的 9 种选择分别为：</p><p>{16, 27}, {16, 35}, {16, 42}, {27, 35}, {27, 42}, {27, 51}, {35, 42},{35, 51}, {42, 51}。</p><p>代码长度限制 16 KB</p><p>时间限制 400 ms</p><p>内存限制 64 MB</p><p>栈限制 8192 KB</p><h3 id="mycode-9">MyCode</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br>n,P=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<span class="hljs-comment">#n其他国家的个数 P本国的实力值</span><br>li=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>result=<span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">x,y,z</span>):<br>    <span class="hljs-keyword">if</span> (x+y)&gt;z <span class="hljs-keyword">and</span> (x+z)&gt;y <span class="hljs-keyword">and</span> (y+z)&gt;x:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>li=<span class="hljs-built_in">list</span>(itertools.combinations(li,<span class="hljs-number">2</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> li:<br>    <span class="hljs-keyword">if</span> a(i[<span class="hljs-number">0</span>],i[<span class="hljs-number">1</span>],P)==<span class="hljs-number">1</span>:<br>        result+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h2 id="l2-3-这是二叉搜索树吗"><strong>L2-3这是二叉搜索树吗？</strong></h2><p>分数 25</p><p>一棵二叉搜索树可被递归地定义为具有下列性质的二叉树：对于任一结点，</p><ul><li>其左子树中所有结点的键值小于该结点的键值；</li><li>其右子树中所有结点的键值大于等于该结点的键值；</li><li>其左右子树都是二叉搜索树。</li></ul><p>所谓二叉搜索树的“镜像”，即将所有结点的左右子树对换位置后所得到的树。</p><p>给定一个整数键值序列，现请你编写程序，判断这是否是对一棵二叉搜索树或其镜像进行前序遍历的结果。</p><h3 id="输入格式-10">输入格式：</h3><p>输入的第一行给出正整数 <em>N</em>（≤1000）。随后一行给出 <em>N</em>个整数键值，其间以空格分隔。</p><h3 id="输出格式-10">输出格式：</h3><p>如果输入序列是对一棵二叉搜索树或其镜像进行前序遍历的结果，则首先在一行中输出<code>YES</code> ，然后在下一行输出该树后序遍历的结果。数字间有 1个空格，一行的首尾不得有多余空格。若答案是否，则输出<code>NO</code>。</p><h3 id="输入样例-1-2">输入样例 1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">7<br>8 6 5 7 10 8 11<br></code></pre></td></tr></table></figure><h3 id="输出样例-1-2">输出样例 1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs out">YES<br>5 7 6 8 11 10 8<br></code></pre></td></tr></table></figure><h3 id="输入样例-2-1">输入样例 2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">7<br>8 10 11 8 6 7 5<br></code></pre></td></tr></table></figure><h3 id="输出样例-2-1">输出样例 2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs out">YES<br>11 8 10 7 5 6 8<br></code></pre></td></tr></table></figure><h3 id="输入样例-3-1">输入样例 3：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">7<br>8 6 8 5 10 9 11<br></code></pre></td></tr></table></figure><h3 id="输出样例-3-1">输出样例 3：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">NO<br></code></pre></td></tr></table></figure><p>代码长度限制 16 KB</p><p>时间限制 400 ms</p><p>内存限制 64 MB</p><h3 id="mycode-10">MyCode</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="l2-4-网红点打卡攻略"><strong>L2-4 网红点打卡攻略</strong></h2><p>分数 25</p><p>一个旅游景点，如果被带火了的话，就被称为“网红点”。大家来网红点游玩，俗称“打卡”。在各个网红点打卡的快（省）乐（钱）方法称为“攻略”。你的任务就是从一大堆攻略中，找出那个能在每个网红点打卡仅一次、并且路上花费最少的攻略。</p><h3 id="输入格式-11">输入格式：</h3><p>首先第一行给出两个正整数：网红点的个数<em>N</em>（1&lt;<em>N</em>≤200）和网红点之间通路的条数 <em>M</em>。随后<em>M</em>行，每行给出有通路的两个网红点、以及这条路上的旅行花费（为正整数），格式为“网红点1网红点2 费用”，其中网红点从 1 到 <em>N</em>编号；同时也给出你家到某些网红点的花费，格式相同，其中你家的编号固定为<code>0</code>。</p><p>再下一行给出一个正整数 <em>K</em>，是待检验的攻略的数量。随后<em>K</em> 行，每行给出一条待检攻略，格式为：</p><p><em>n</em> <em>V</em>1 <em>V</em>2 ⋯ *V**n*</p><p>其中 <em>n</em>(≤200) 是攻略中的网红点数，*V**i*是路径上的网红点编号。这里假设你从家里出发，从 <em>V</em>1开始打卡，最后从 *V**n* 回家。</p><h3 id="输出格式-11">输出格式：</h3><p>在第一行输出满足要求的攻略的个数。</p><p>在第二行中，首先输出那个能在每个网红点打卡仅一次、并且路上花费最少的攻略的序号（从1开始），然后输出这个攻略的总路费，其间以一个空格分隔。如果这样的攻略不唯一，则输出序号最小的那个。</p><p>题目保证至少存在一个有效攻略，并且总路费不超过 109。</p><h3 id="输入样例-10">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs in">6 13<br>0 5 2<br>6 2 2<br>6 0 1<br>3 4 2<br>1 5 2<br>2 5 1<br>3 1 1<br>4 1 2<br>1 6 1<br>6 3 2<br>1 2 1<br>4 5 3<br>2 0 2<br>7<br>6 5 1 4 3 6 2<br>6 5 2 1 6 3 4<br>8 6 2 1 6 3 4 5 2<br>3 2 1 5<br>6 6 1 3 4 5 2<br>7 6 2 1 3 4 5 2<br>6 5 2 1 4 3 6<br></code></pre></td></tr></table></figure><h3 id="输出样例-10">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs out">3<br>5 11<br></code></pre></td></tr></table></figure><h3 id="样例说明">样例说明：</h3><p>第 2、3、4、6条都不满足攻略的基本要求，即不能做到从家里出发，在每个网红点打卡仅一次，且能回到家里。所以满足条件的攻略有3 条。</p><p>第 1 条攻略的总路费是：(0-&gt;5) 2 + (5-&gt;1) 2 + (1-&gt;4) 2 +(4-&gt;3) 2 + (3-&gt;6) 2 + (6-&gt;2) 2 + (2-&gt;0) 2 = 14；</p><p>第 5 条攻略的总路费同理可算得：1 + 1 + 1 + 2 + 3 + 1 + 2 =11，是一条更省钱的攻略；</p><p>第 7 条攻略的总路费同理可算得：2 + 1 + 1 + 2 + 2 + 2 + 1 = 11，与第 5条花费相同，但序号较大，所以不输出。</p><p>代码长度限制 16 KB</p><p>时间限制 400 ms</p><p>内存限制 64 MB</p><p>栈限制 8192 KB</p><h3 id="mycode-11">MyCode</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python">n,m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>arr = [[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)]<br>fare = []<br>home = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    x1,x2,x3 = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-keyword">if</span> x1 &lt; x2:<br>        arr[i].append(x1)<br>        arr[i].append(x2)<br>    <span class="hljs-keyword">else</span>:<br>        arr[i].append(x2)<br>        arr[i].append(x1)<br>    fare.append(x3)<br>    <span class="hljs-keyword">if</span> x1 == <span class="hljs-number">0</span>:<br>        home.append(x2)<br>    <span class="hljs-keyword">elif</span> x2 == <span class="hljs-number">0</span>:<br>        home.append(x1)<br>k = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>count = <span class="hljs-number">0</span><br>road = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>    date = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>    temp = date[<span class="hljs-number">1</span>:]<br>    <span class="hljs-keyword">if</span> date[<span class="hljs-number">0</span>] &gt; n <span class="hljs-keyword">or</span> date[<span class="hljs-number">0</span>] &lt; n:<br>        <span class="hljs-keyword">continue</span><br>    <br>    <span class="hljs-keyword">if</span> (temp[<span class="hljs-number">0</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> home) <span class="hljs-keyword">or</span> (temp[-<span class="hljs-number">1</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> home):<br>        <span class="hljs-keyword">continue</span><br>    <br>    temp1 = <span class="hljs-built_in">set</span>(temp)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(temp1) != <span class="hljs-built_in">len</span>(temp):<br>        <span class="hljs-keyword">continue</span><br>    total = <span class="hljs-number">0</span> <br>    flag = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">if</span> j == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> arr.count([<span class="hljs-number">0</span>,temp[<span class="hljs-number">0</span>]]) != <span class="hljs-number">0</span>:<br>                pos = arr.index([<span class="hljs-number">0</span>, temp[<span class="hljs-number">0</span>]])<br>                total += fare[pos]<br>            <span class="hljs-keyword">else</span>:<br>                flag = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            arr1 = [temp[j - <span class="hljs-number">1</span>], temp[j]]<br>            arr1.sort()<br>            <span class="hljs-keyword">if</span> arr.count(arr1) != <span class="hljs-number">0</span>:<br>                pos = arr.index(arr1)<br>                total += fare[pos]<br>            <span class="hljs-keyword">else</span>:<br>                flag = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">break</span><br>    pos = arr.index([<span class="hljs-number">0</span>, temp[n-<span class="hljs-number">1</span>]])<br>    total += fare[pos]<br>    <span class="hljs-keyword">if</span> flag == <span class="hljs-number">0</span>:<br>        count += <span class="hljs-number">1</span>  <br>        road.append([i+<span class="hljs-number">1</span>,total])<br>road.sort(key=<span class="hljs-keyword">lambda</span> x:(x[<span class="hljs-number">1</span>],x[<span class="hljs-number">0</span>]))<br><span class="hljs-built_in">print</span>(count)<br><span class="hljs-built_in">print</span>(road[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],road[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h2 id="l3-1-森森美图"><strong>L3-1 森森美图</strong></h2><p>分数 30</p><p>森森最近想让自己的朋友圈熠熠生辉，所以他决定自己写个美化照片的软件，并起名为森森美图。众所周知，在合照中美化自己的面部而不美化合照者的面部是让自己占据朋友圈高点的绝好方法，因此森森美图里当然得有这个功能。这个功能的第一步是将自己的面部选中。森森首先计算出了一个图像中所有像素点与周围点的相似程度的分数，分数越低表示某个像素点越“像”一个轮廓边缘上的点。森森认为，任意连续像素点的得分之和越低，表示它们组成的曲线和轮廓边缘的重合程度越高。为了选择出一个完整的面部，森森决定让用户选择面部上的两个像素点A和B，则连接这两个点的直线就将图像分为两部分，然后在这两部分中分别寻找一条从A到B且与轮廓重合程度最高的曲线，就可以拼出用户的面部了。然而森森计算出来得分矩阵后，突然发现自己不知道怎么找到这两条曲线了，你能帮森森当上朋友圈的小王子吗？</p><p>为了解题方便，我们做出以下补充说明：</p><ul><li>图像的左上角是坐标原点(0,0)，我们假设所有像素按矩阵格式排列，其坐标均为非负整数（即横轴向右为正，纵轴向下为正）。</li><li>忽略正好位于连接A和B的直线（注意不是线段）上的像素点，即不认为这部分像素点在任何一个划分部分上，因此曲线也不能经过这部分像素点。</li><li>曲线是八连通的（即任一像素点可与其周围的8个像素连通），但为了计算准确，某像素连接对角相邻的斜向像素时，得分<strong>额外增加</strong>两个像素分数和的2倍减一。例如样例中，经过坐标为(3,1)和(4,2)的两个像素点的曲线，其得分应该是这两个像素点的分数和(2+2)，再加上额外的(2+2)乘以(2−1)，即约为5.66。</li></ul><h3 id="输入格式-12">输入格式：</h3><p>输入在第一行给出两个正整数<em>N</em>和<em>M</em>（5≤<em>N</em>,<em>M</em>≤100），表示像素得分矩阵的行数和列数。</p><p>接下来<em>N</em>行，每行<em>M</em>个不大于1000的非负整数，即为像素点的分值。</p><p>最后一行给出用户选择的起始和结束像素点的坐标(<em>X<strong>s</strong>t<strong>a</strong>r<strong>t<em>,</em>Y</strong>s<strong>t</strong>a<strong>r</strong>t</em>)和(<em>X<strong>e</strong>n<strong>d<em>,</em>Y</strong>e<strong>n</strong>d</em>)。4个整数用空格分隔。</p><h3 id="输出格式-12">输出格式：</h3><p>在一行中输出划分图片后找到的轮廓曲线的得分和，保留小数点后两位。注意起点和终点的得分不要重复计算。</p><h3 id="输入样例-11">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs in">6 6<br>9 0 1 9 9 9<br>9 9 1 2 2 9<br>9 9 2 0 2 9<br>9 9 1 1 2 9<br>9 9 3 3 1 1<br>9 9 9 9 9 9<br>2 1 5 4<br></code></pre></td></tr></table></figure><h3 id="输出样例-11">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">27.04<br></code></pre></td></tr></table></figure><p>代码长度限制 16 KB</p><p>时间限制 400 ms</p><p>内存限制 64 MB</p><h3 id="mycode-12">MyCode</h3><figure class="highlight plaintext"><figcaption><span>Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs None">None<br></code></pre></td></tr></table></figure><h2 id="l3-2-狼人杀"><strong>L3-2 狼人杀</strong></h2><p>分数 30</p><p>作者 陈越</p><p>单位 浙江大学</p><p>以下文字摘自《灵机一动·好玩的数学》：“狼人杀”游戏分为狼人、好人两大阵营。在一局“狼人杀”游戏中，1号玩家说：“2号是狼人”，2号玩家说：“3号是好人”，3号玩家说：“4号是狼人”，4号玩家说：“5号是好人”，5号玩家说：“4号是好人”。已知这5名玩家中有2人扮演狼人角色，有2人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。扮演狼人角色的是哪两号玩家？</p><p>本题是这个问题的升级版：已知 N 名玩家中有 M 人扮演狼人角色，有 L人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。要求你找出扮演狼人角色的是哪几号玩家？</p><h3 id="输入格式-13">输入格式:</h3><p>输入在第一行中给出三个正整数 N、M、L，其中 5 ≤ N ≤ 100，2 ≤ M，L &lt;N。随后 N 行，第 i 行给出第 i 号玩家说的话（1 ≤ i ≤N），即一个玩家编号，用正号表示好人，负号表示狼人。</p><h3 id="输出格式-13">输出格式:</h3><p>如果有解，在一行中按递减顺序输出 M个狼人的编号，其间以空格分隔，行首尾不得有多余空格。如果解不唯一，则输出最大序列解—— 即对于两个序列 A = { a[1], ..., a[M] } 和 B = { b[1], ..., b[M]}，若存在 0 ≤ k &lt; M 使得 a[i]=b[i] （i ≤ k），且a[k+1]&gt;b[k+1]，则称序列 A 大于序列 B。若无解则输出<code>No Solution</code>。</p><h3 id="输入样例-1-3">输入样例 1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs in">5 2 2<br>-2<br>+3<br>-4<br>+5<br>+4<br></code></pre></td></tr></table></figure><h3 id="输出样例-1-3">输出样例 1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">4 1<br></code></pre></td></tr></table></figure><h3 id="输入样例-2-2">输入样例 2:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs in">6 2 3<br>-2<br>+3<br>-4<br>+5<br>+4<br>-3<br></code></pre></td></tr></table></figure><h3 id="输出样例-2解不唯一">输出样例 2（解不唯一）:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">6 4<br></code></pre></td></tr></table></figure><h3 id="输入样例-3-2">输入样例 3:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs in">6 2 5<br>-2<br>+3<br>-4<br>+5<br>+4<br>+6<br></code></pre></td></tr></table></figure><h3 id="输出样例-3-2">输出样例 3:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">No Solution<br></code></pre></td></tr></table></figure><p>代码长度限制 16 KB</p><p>时间限制 200 ms</p><p>内存限制 64 MB</p><p>栈限制 8192 KB</p><p>MyCode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No Solution&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="l3-3-可怜的复杂度"><strong>L3-3 可怜的复杂度</strong></h2><p>分数 30</p><p>可怜有一个数组 <em>A</em>，定义它的复杂度 <em>c</em>(<em>A</em>)等于它本质不同的子区间个数。举例来说，<em>c</em>([1,1,1])=3，因为[1,1,1] 只有 3 个本质不同的子区间 [1]、[1,1] 和 [1,1,1]；而<em>c</em>([1,2,1])=5，它包含 5 个本质不同的子区间[1]、[2]、[1,2]、[2,1]、[1,2,1]。</p><p>可怜打算出一道和复杂度相关的题目。众所周知，引入随机性往往可以让一个简单的题目脱胎换骨。现在，可怜手上有一个长度为<em>n</em> 的正整数数组 <em>x</em> 和一个正整数<em>m</em>。接着，可怜会独立地随机产生 <em>n</em> 个 [1,<em>m</em>]中的随机整数 <em>y<strong>i<em>，并把 </em>x</strong>i</em> 修改为<em>m<strong>x</strong>i</em>+*y**i*。</p><p>显然，一共有 <em>N</em>=*m**n*种可能的结果数组。现在，可怜想让你求出这 <em>N</em>个数组的复杂度的和。</p><h3 id="输入格式-14">输入格式：</h3><p>第一行给出一个整数 <em>t</em> (1≤<em>t</em>≤5) 表示数据组数。</p><p>对于每组数据，第一行输入两个整数 <em>n</em> 和 <em>m</em>(1≤<em>n</em>≤100,1≤<em>m</em>≤109)，第二行是 <em>n</em>个空格隔开的整数表示数组 <em>x</em> 的初始值 (1≤*x**i*≤109)。</p><h3 id="输出格式-14">输出格式：</h3><p>对于每组数据，输出一行一个整数表示答案。答案可能很大，你只需要输出对998244353 取模后的结果。</p><h3 id="输入样例-12">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs in">4<br>3 2<br>1 1 1<br>3 2<br>1 2 1<br>5 2<br>1 2 1 2 1<br>10 2<br>80582987 187267045 80582987 187267045 80582987 187267045 80582987 187267045 80582987 187267045<br></code></pre></td></tr></table></figure><h3 id="输出样例-12">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs out">36<br>44<br>404<br>44616<br></code></pre></td></tr></table></figure><p>代码长度限制 16 KB</p><p>时间限制 8000 ms</p><p>内存限制 256 MB</p><p>栈限制 131072 KB</p><h3 id="mycode-13">MyCode</h3><figure class="highlight plaintext"><figcaption><span>Code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs None">None<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QFNU_TianTi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>念数字</title>
    <link href="/2024/03/16/%E5%BF%B5%E6%95%B0%E5%AD%97/"/>
    <url>/2024/03/16/%E5%BF%B5%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p><strong>L1-007 念数字</strong></p><p><ahref="https://pintia.cn/problem-sets/994805046380707840/exam/problems/994805136889593856?type=7&amp;page=0">L1-007念数字 - 团体程序设计天梯赛-练习集 (pintia.cn)</a></p><p>输入一个整数，输出每个数字对应的拼音。当整数为负数时，先输出<code>fu</code>字。十个数字对应的拼音如下：</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">0</span>: ling<br><span class="hljs-attribute">1</span>: yi<br><span class="hljs-attribute">2</span>: er<br><span class="hljs-attribute">3</span>: san<br><span class="hljs-attribute">4</span>: si<br><span class="hljs-attribute">5</span>: wu<br><span class="hljs-attribute">6</span>: liu<br><span class="hljs-attribute">7</span>: qi<br><span class="hljs-attribute">8</span>: ba<br><span class="hljs-attribute">9</span>: jiu<br></code></pre></td></tr></table></figure><h3 id="输入格式">输入格式：</h3><p>输入在一行中给出一个整数，如：<code>1234</code>。</p><p><strong>提示：整数包括负数、零和正数。</strong></p><h3 id="输出格式">输出格式：</h3><p>在一行中输出这个整数对应的拼音，每个数字的拼音之间用空格分开，行末没有最后的空格。如<code>yi er san si</code>。</p><h3 id="输入样例">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">-600<br></code></pre></td></tr></table></figure><h3 id="输出样例">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">fu liu ling ling<br></code></pre></td></tr></table></figure><h3 id="mycode">MyCode</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">li=[(<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;ling&quot;</span>),(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;yi&quot;</span>),(<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;er&quot;</span>),(<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;san&quot;</span>),(<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;si&quot;</span>),(<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;wu&quot;</span>),(<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;liu&quot;</span>),(<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;qi&quot;</span>),(<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;ba&quot;</span>),(<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;jiu&quot;</span>),]<br>num=<span class="hljs-built_in">input</span>()<br>result=[]<br><span class="hljs-keyword">if</span> num[<span class="hljs-number">0</span>]==<span class="hljs-string">&quot;-&quot;</span>:<br>    result.append(<span class="hljs-string">&quot;fu&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> num[<span class="hljs-number">1</span>:]:<br>        <span class="hljs-keyword">if</span> (i==li[<span class="hljs-built_in">int</span>(i)][<span class="hljs-number">0</span>]):<br>            result.append(li[<span class="hljs-built_in">int</span>(i)][<span class="hljs-number">1</span>])<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> num:<br>        <span class="hljs-keyword">if</span> (i==li[<span class="hljs-built_in">int</span>(i)][<span class="hljs-number">0</span>]):<br>            result.append(li[<span class="hljs-built_in">int</span>(i)][<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,result)))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个位数统计</title>
    <link href="/2024/03/15/%E4%B8%AA%E4%BD%8D%E6%95%B0%E7%BB%9F%E8%AE%A1/"/>
    <url>/2024/03/15/%E4%B8%AA%E4%BD%8D%E6%95%B0%E7%BB%9F%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p><strong>L1-003 个位数统计</strong></p><p><ahref="https://pintia.cn/problem-sets/994805046380707840/exam/problems/994805143738892288?type=7&amp;page=0">link</a></p><p>给定一个 <em>k</em> 位整数<em>N</em>=<em>d<strong>k<em>−110</em>k<em>−1+⋯+</em>d<em>1101+</em>d<em>0(0≤</em>d</strong>i</em>≤9, <em>i</em>=0,⋯,<em>k</em>−1,*d**k<em>−1&gt;0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定</em>N*=100311，则有 2 个 0，3 个 1，和 1 个 3。</p><h3 id="输入格式">输入格式：</h3><p>每个输入包含 1 个测试用例，即一个不超过 1000 位的正整数<em>N</em>。</p><h3 id="输出格式">输出格式：</h3><p>对 <em>N</em> 中每一种不同的个位数字，以 <code>D:M</code>的格式在一行中输出该位数字 <code>D</code> 及其在 <em>N</em> 中出现的次数<code>M</code>。要求按 <code>D</code> 的升序输出。</p><h3 id="输入样例">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">100311<br></code></pre></td></tr></table></figure><h3 id="输出样例">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs out">0:2<br>1:3<br>3:1<br></code></pre></td></tr></table></figure><h3 id="mycode">Mycode</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">N=<span class="hljs-built_in">input</span>()<br><span class="hljs-built_in">dir</span>=&#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> N:<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>:<br>        <span class="hljs-built_in">dir</span>[i]+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">dir</span>[i]=<span class="hljs-number">1</span><br><span class="hljs-built_in">dir</span>=<span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">dir</span>.items(),key=<span class="hljs-keyword">lambda</span>  x:x[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%d:%d&quot;</span> % (<span class="hljs-built_in">int</span>(i[<span class="hljs-number">0</span>]),<span class="hljs-built_in">int</span>(i[<span class="hljs-number">1</span>])))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打印沙漏</title>
    <link href="/2024/03/15/%E6%89%93%E5%8D%B0%E6%B2%99%E6%BC%8F/"/>
    <url>/2024/03/15/%E6%89%93%E5%8D%B0%E6%B2%99%E6%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>L1-002 打印沙漏</strong></p><p><ahref="https://pintia.cn/problem-sets/994805046380707840/exam/problems/994805145370476544?type=7&amp;page=0">L1-002打印沙漏 - 团体程序设计天梯赛-练习集 (pintia.cn)</a></p><p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">*****<br> ***<br>  *<br> ***<br>*****<br></code></pre></td></tr></table></figure><p>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p><p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p><h3 id="输入格式">输入格式:</h3><p>输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。</p><h3 id="输出格式">输出格式:</h3><p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</p><h3 id="输入样例">输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">19 *<br></code></pre></td></tr></table></figure><h3 id="输出样例">输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs out">*****<br> ***<br>  *<br> ***<br>*****<br>2<br></code></pre></td></tr></table></figure><h3 id="mycode">MyCode</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">n,symbol=<span class="hljs-built_in">input</span>().split()<br>n=<span class="hljs-built_in">int</span>(n)<br><span class="hljs-keyword">if</span> n&lt;<span class="hljs-number">7</span>:<br>    <span class="hljs-built_in">print</span>(symbol)<br>    <span class="hljs-built_in">print</span>(n-<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>    li = []<br>    space_li = []<br>    space_num = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n, <span class="hljs-number">2</span>):<br>        li.append(i)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sum</span>(li) + <span class="hljs-built_in">sum</span>(li[<span class="hljs-number">1</span>:])) &gt;= n:<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sum</span>(li) + <span class="hljs-built_in">sum</span>(li[<span class="hljs-number">1</span>:])) != n:<br>                li.pop()<br>            li = (li[<span class="hljs-number">1</span>:])[::-<span class="hljs-number">1</span>] + li<br>            a = n - <span class="hljs-built_in">sum</span>(li)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> li:<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">1</span>:<br>            space_li.append(space_num)<br>            space_li = space_li + (space_li[<span class="hljs-number">0</span>:li.index(i)])[::-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">break</span><br>        space_li.append(space_num)<br>        space_num += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(space_li)):<br>        <span class="hljs-built_in">print</span>(space_li[i] * <span class="hljs-string">&quot; &quot;</span>, end=<span class="hljs-string">&quot;&quot;</span>)<br>        <span class="hljs-built_in">print</span>(li[i] * symbol)<br>    <span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>质因数分解</title>
    <link href="/2024/03/13/%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3/"/>
    <url>/2024/03/13/%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="质因数分解">质因数分解</h1><h2 id="题目描述"><ahref="https://www.lanqiao.cn/problems/387/">题目</a>描述</h2><p>已知正整数n是两个不同的质数的乘积，试求出较大的那个质数。</p><h3 id="输入描述">输入描述</h3><p>输入只有一行，包含一个正整数n，6 &lt;n&lt;2^10</p><h3 id="输出描述">输出描述</h3><p>输出只有一行，包含一个正整数p，即较大的那个质数</p><h2 id="mycode">Mycode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#任何一个大于1的整数都可以分解成若干个质数的连乘积</span><br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n):<br>    <span class="hljs-keyword">if</span> n%i==<span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(n//i)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>灌水</title>
    <link href="/2024/03/12/%E7%81%8C%E6%B0%B4/"/>
    <url>/2024/03/12/%E7%81%8C%E6%B0%B4/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>小蓝有一个01 矩阵。他打算将第一行第一列的0变为2。变化过程有传染性，每次 2 的上下左右四个相邻的位置中的0都会变成2。直到最后每个2的周围都是1或2结束 请问，最终矩阵中有多少个 2?以下是小蓝的矩阵，共30行40 列</p><p>000010001000000110101010100100110000001101011110011111011101111000001010100111111000010000011101010110000000001011010100011010101011000000010110010000010100100100000110101000001111110011011000101010010110000110000000110100000000010010100011010011001000011000000010001000010111000000100110101001100011110011011001101000101111000111101000001110010001001011101101001111010001100000000110100110111010000100000001010110000100111110010100110111000000100000011001000100101000111011101100001011000000100000101010001100001010001101101100001000110110100110100011010110110000100100000001010000101100000000000010001100100000100000001001100110010100011011101010000110000001000110010011001110100000100100111000001101001000001010010001010001001000011010000110000011011111010110000010011000100110011111010110011100010000000010100101000000111100110010101101001011010100110000010000001000001011001100000111010010010001110110001001110101000010001100100000011000101011000000010101100111101001011001101010111000000010111001100111010000101000010001010010011000101101000000010010011001000100110010000101100110001010001000010000010111111111110010010110101011000010000000110001101100000011000100011000010111101000101110110001</p><h2 id="答案提交">答案提交</h2><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h2 id="mycode">Mycode</h2><p><code>python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_li</span>(<span class="hljs-params">li</span>):<br>    a = <span class="hljs-built_in">str</span>(li)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> a[i - <span class="hljs-number">2</span>] == <span class="hljs-string">&quot;]&quot;</span> <span class="hljs-keyword">and</span> a[i - <span class="hljs-number">1</span>] == <span class="hljs-string">&quot;,&quot;</span> <span class="hljs-keyword">and</span> a[i] == <span class="hljs-string">&quot; &quot;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\r&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(a[i], end=<span class="hljs-string">&quot;&quot;</span>)<br>        <span class="hljs-keyword">except</span> IndexError:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_li</span>():<br>    result=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<span class="hljs-comment">#5行</span><br>        a=<span class="hljs-built_in">input</span>()<br>        li=[]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> a:<br>            li.append(<span class="hljs-built_in">int</span>(j))<br>        result.append(li)<br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">DFS</span>(<span class="hljs-params">li,x1,y1</span>):<br>    s_x=x1<br>    s_y=y1<br>    temp_y=y1<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">while</span> li[s_x+<span class="hljs-number">1</span>][s_y]==<span class="hljs-number">0</span>:<br>            li[s_x+<span class="hljs-number">1</span>][s_y]=<span class="hljs-number">2</span><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">while</span> li[s_x+<span class="hljs-number">1</span>][s_y+<span class="hljs-number">1</span>]==<span class="hljs-number">0</span>:<br>                    li[s_x+<span class="hljs-number">1</span>][s_y + <span class="hljs-number">1</span>]=<span class="hljs-number">2</span><br>                    s_y+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">except</span> IndexError:<br>                <span class="hljs-keyword">break</span><br>            s_y=temp_y<br>            s_x+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">except</span> IndexError:<br>        <span class="hljs-keyword">return</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">output_li</span>(<span class="hljs-params">li</span>):<br>    result=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(li):<br>        <span class="hljs-keyword">if</span> i==<span class="hljs-string">&quot;2&quot;</span>:<br>            result+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> result<br>li=input_li()<br>print_li(li)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<span class="hljs-comment">#5列</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<span class="hljs-comment">#5行</span><br>        DFS(li,j,i)<br>        <span class="hljs-keyword">if</span> li[i][j]==<span class="hljs-number">0</span>:<br>            li[i][j]=<span class="hljs-number">2</span><br>print_li(li)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<span class="hljs-comment">#5列</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<span class="hljs-comment">#5行</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> li[i-<span class="hljs-number">1</span>][j]==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> li[i][j-<span class="hljs-number">1</span>]==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> li[i][j+<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>:<br>                li[i][j]=<span class="hljs-number">8</span><br>        <span class="hljs-keyword">except</span> IndexError:<br>            <span class="hljs-keyword">break</span><br>print_li(li)<br><span class="hljs-comment"># if j == 0:</span><br><span class="hljs-comment">#     if li[i - 1][j] == 1 or li[i - 1][j] == 8:</span><br><span class="hljs-comment">#         li[i][j] = 8</span><br><span class="hljs-comment"># elif j == 39:  # 第5列</span><br><span class="hljs-comment">#     if li[i + 1][j] == 1 or li[i + 1][j] == 8:</span><br><span class="hljs-comment">#         li[i][j] = 8</span><br><span class="hljs-comment"># el</span><br></code></pre></td></tr></table></figure><h2 id="myoutput">MyOutput</h2><p>[[2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 8, 1, 8, 1, 8,1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1], [2, 1, 2, 1, 8,1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 8, 1, 8, 1, 8, 1, 1, 2, 2, 2, 2, 2, 1,2, 1, 8, 1, 2, 2, 1, 1, 1, 8, 1], [1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1,8, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1,8, 1, 2, 2], [8, 1, 1, 2, 1, 8, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2,1, 8, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 8, 1, 2, 2, 1, 2, 2, 1], [2, 2,2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 8, 1, 1, 2, 2, 1, 1,2, 1, 1, 2, 2, 2, 1, 8, 1, 2, 1, 2, 2, 1], [2, 1, 1, 2, 2, 2, 2, 1, 1,2, 2, 2, 2, 2, 2, 2, 1, 1, 8, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1,2, 1, 2, 2, 2, 1, 1], [2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2,2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 8, 1, 8, 1, 2, 2, 2, 2],[2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2,1, 1, 8, 1, 1, 2, 2, 1, 1, 8, 1, 2, 2, 2, 1, 2], [1, 1, 8, 1, 2, 2, 2,1, 8, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 8, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1,8, 1, 1, 1, 2, 1, 1, 8, 1], [2, 2, 1, 8, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2,2, 2, 2, 2, 2, 2, 2, 1, 1, 8, 1, 2, 2, 1, 1, 2, 1, 1, 1, 8, 1, 2, 2, 2,2, 1], [2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1,8, 1, 1, 1, 2, 2, 1, 8, 1, 2, 2, 1, 1, 8, 1, 1, 1, 2, 2], [2, 2, 2, 2,1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 8, 1, 2, 2, 2,1, 8, 1, 2, 1, 8, 1, 8, 1, 1, 2, 2], [2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2,2, 1, 2, 2, 2, 2, 2, 1, 8, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1,2, 2, 2, 1, 1], [2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1,1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 8, 1, 8, 1, 1, 2, 1, 1], [2,2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 8, 1,1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2], [2, 2, 1, 1, 2, 2, 1, 2,2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1,2, 1, 2, 2, 2, 1, 1, 2], [1, 1, 1, 8, 1, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2,2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 8, 1,2], [2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 8, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1,2, 2, 1, 2, 2, 2, 2, 2, 1, 8, 1, 2, 2, 1, 2, 2, 2, 1], [2, 1, 2, 2, 2,1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1,1, 8, 1, 8, 1, 1, 1, 2, 1, 2, 1], [1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2,2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 8, 1, 1, 1, 2, 1, 8, 1, 1, 2, 2, 1, 8, 1,2, 2, 2, 1], [2, 2, 2, 2, 2, 2, 2, 2, 1, 8, 1, 2, 2, 1, 8, 1, 2, 2, 2,2, 2, 2, 1, 8, 1, 1, 2, 2, 1, 1, 2, 2, 1, 8, 1, 8, 1, 1, 2, 1], [2, 2,1, 2, 1, 1, 2, 1, 8, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2,1, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1], [2, 2, 2, 2, 2, 1, 1, 1, 2,1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 8,1, 8, 1, 2, 1, 2, 2], [2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2,2, 1, 1, 2, 2, 2, 1, 8, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1],[1, 2, 2, 1, 1, 1, 1, 8, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2,1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 8, 1, 8, 1, 2], [2, 1, 1, 2, 2, 1, 8,1, 8, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 8, 1, 2, 2, 1,2, 2, 1, 1, 2, 2, 2, 1, 2], [1, 1, 8, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2,1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 1,8, 1], [1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2,2, 2, 2, 2, 1, 2, 1, 8, 1, 1, 1, 8, 1, 1, 1, 1, 1, 2, 2], [1, 2, 2, 1,8, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1,2, 2, 2, 1, 1, 8, 1, 1, 2, 2, 2, 2], [2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2,1, 1, 2, 2, 2, 2, 1, 8, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 8, 1, 2, 1,1, 2, 2, 2, 1]]</p>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程中的东方画卷：在项目中融入中国传统美学元素</title>
    <link href="/2024/03/10/%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%9C%E6%96%B9%E7%94%BB%E5%8D%B7%EF%BC%9A%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%9E%8D%E5%85%A5%E4%B8%AD%E5%9B%BD%E4%BC%A0%E7%BB%9F%E7%BE%8E%E5%AD%A6%E5%85%83%E7%B4%A0/"/>
    <url>/2024/03/10/%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%9C%E6%96%B9%E7%94%BB%E5%8D%B7%EF%BC%9A%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%9E%8D%E5%85%A5%E4%B8%AD%E5%9B%BD%E4%BC%A0%E7%BB%9F%E7%BE%8E%E5%AD%A6%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<p>​随着科技与文化的交融，将传统艺术融入现代编程项目已不再是遥不可及的梦想。中国的传统美学，以其独特的审美和深厚的文化底蕴，为数字产品带来了新的灵感来源。作为程序员，我们如何能够在代码的世界中描绘出一幅幅动人的东方画卷呢？本文将探讨这一主题，并提供具体的示例代码，分析其对项目的潜在影响，以及在实践过程中可能遇到的挑战和解决方案。</p><h3 id="融入中国传统美学元素的方法">融入中国传统美学元素的方法：</h3><ol type="1"><li><strong>文化研究</strong>：首先，深入了解中国的传统美学元素，如书法、山水画、剪纸、蓝印花布等，理解其背后的文化寓意和审美特点。</li><li><strong>设计思考</strong>：考虑如何将这些元素与编程项目结合，不仅仅是视觉上的融入，还包括交互体验和文化传达。</li><li><strong>技术实现</strong>：选择合适的编程语言和工具，如C++和Python，来实现设计思路，确保美学元素能够和谐地融入技术框架中。</li><li><strong>测试与反馈</strong>：在实际环境中测试这些元素的兼容性和用户体验，收集用户反馈，不断优化和完善。</li></ol><h3 id="具体示例代码">具体示例代码：</h3><h4 id="c中的实现">C++中的实现：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">// 使用C++模拟中国书法的打印效果</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printCalligraphy</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; text)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : text) &#123;<br>        <span class="hljs-comment">// 根据不同的字符调整打印样式，模拟书法笔触</span><br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;的&#x27;</span>) &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;&amp;#127806;&quot;</span>; <span class="hljs-comment">// 使用特定符号或图案代替文字</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            std::cout &lt;&lt; c;<br>        &#125;<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">printCalligraphy</span>(<span class="hljs-string">&quot;编程中的东方画卷&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="python中的实现">Python中的实现：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle<br><br><span class="hljs-comment"># 使用Python的turtle库绘制简单的山水画</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_mountain</span>(<span class="hljs-params">x, y</span>):<br>    turtle.penup()<br>    turtle.goto(x, y)<br>    turtle.pendown()<br>    turtle.begin_fill()<br>    turtle.circle(<span class="hljs-number">50</span>, <span class="hljs-number">180</span>)<br>    turtle.right(<span class="hljs-number">90</span>)<br>    turtle.forward(<span class="hljs-number">100</span>)<br>    turtle.right(<span class="hljs-number">90</span>)<br>    turtle.circle(<span class="hljs-number">50</span>, <span class="hljs-number">180</span>)<br>    turtle.end_fill()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_scenery</span>():<br>    turtle.speed(<span class="hljs-number">1</span>)<br>    draw_mountain(-<span class="hljs-number">150</span>, <span class="hljs-number">150</span>)<br>    draw_mountain(<span class="hljs-number">150</span>, <span class="hljs-number">150</span>)<br>    turtle.done()<br><br>draw_scenery()<br></code></pre></td></tr></table></figure><h3 id="项目影响">项目影响：</h3><p>​将中国传统美学融入编程项目，可以增强项目的文化底蕴，提升用户的视觉享受和情感共鸣。这种独特的设计风格有助于项目在市场中脱颖而出，吸引更广泛的用户群体。</p><h3 id="挑战与解决方案">挑战与解决方案：</h3><p><strong>挑战一</strong>：文化差异可能导致用户理解困难。不同文化背景的用户可能不熟悉中国的传统文化元素。<strong>解决方案</strong>：提供文化背景介绍和解释，帮助用户理解设计背后的文化含义。</p><p><strong>挑战二</strong>：设计的现代适应性。传统元素需要与现代设计趋势相结合，以满足当代用户的审美需求。<strong>解决方案</strong>：对传统元素进行创新和简化，使其既保留传统韵味，又符合现代审美。在编程项目中融入中国传统美学元素，是一种将古老文化与现代技术结合的尝试。这不仅能够丰富项目的文化内涵，还能够提升用户体验。面对挑战，我们需要不断学习和创新，以确保这些传统美学元素能够在现代项目中发挥其独特的魅力。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>答疑</title>
    <link href="/2024/03/06/%E7%AD%94%E7%96%91/"/>
    <url>/2024/03/06/%E7%AD%94%E7%96%91/</url>
    
    <content type="html"><![CDATA[<h1 id="答疑">答疑</h1><h2 id="题目介绍"><ahref="https://www.lanqiao.cn/problems/1025/">题目</a>介绍</h2><p>有 n 位同学同时找老师答疑。每位同学都预先估计了自己答疑的时间。老师可以安排答疑的顺序，同学们要依次进入老师办公室答疑。一位同学答疑的过程如下：</p><ol type="1"><li>首先进入办公室，编号为 i 的同学需要 si 毫秒的时间。</li><li>然后同学问问题老师解答，编号为 i 的同学需要 ai 毫秒的时间。</li><li>答疑完成后，同学很高兴，会在课程群里面发一条消息，需要的时间可以忽略。</li><li>最后同学收拾东西离开办公室，需要 ei 毫秒的时间。一般需要 10 秒、 20秒或 30 秒，即 ei 取值为 10000，20000 或 30000。一位同学离开办公室后，紧接着下一位同学就可以进入办公室了。 答疑从 0时刻开始。老师想合理的安排答疑的顺序，使得同学们在课程群里面发消息的时刻之和最小。</li></ol><h2 id="输入格式"><strong>【输入格式】</strong></h2><p>输入第一行包含一个整数 n，表示同学的数量。 接下来 n行，描述每位同学的时间。其中第 i 行包含三个整数 si, ai,ei，意义如上所述。</p><h2 id="输出格式"><strong>【输出格式】</strong></h2><p>输出一个整数，表示同学们在课程群里面发消息的时刻之和最小是多少。</p><h2 id="样例输入"><strong>【样例输入】</strong></h2><p>3 10000 10000 10000 20000 50000 20000 30000 20000 30000</p><h2 id="样例输出"><strong>【样例输出】</strong></h2><p>280000 280000280000</p><h2 id="思路">思路</h2><p><strong>同学消耗的总时间越短，优先级越高</strong><strong>总时间相等时，优先级相同，无所谓前后</strong> <!--证明:--><!--假设同学i进入办公室的时间于解答时间的和为 Ai离开办公室的时间为 Bi--><!--对于同学1与同学2而言，所用时间为--> <!--A1,B1--> <!--A2,B2--><!--若同学 1 先进教室，则答案为 ans1 =(A1) +(A1 + B1 + A2)--><!--若同学 2先进教室，则答案为 ans2 =(A2) +(A2 + B2 +A1)--><!--可以发现ans1与ans2的关系等同于(A1+B1)与(A2+B2)的关系--><!--所以: 每名同学进入教室的优先级只与其所消耗的时间和有关，和越小，优先级越高--><!--假如(A1 + B1) ==(A2 + B2)--><!--此时有同学 3 所用时间为: A3,B3 且(A3 + B3)>(A2 + B2)--><!--那么同学3 发消息的时刻为(A1 + B1 +A2 + B2 +A3)--><!--可知，同学 1与同学 2的顺序不会影响答案--></p><h2 id="code">Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># s1 a1 |A1| e1 s2 a2 |(A1+e1+A2)| e2 s3 a3 |(A1+e1+A2+e2+A3)|(A1+e1+A2+e2+A3+e3+A4)</span><br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>li=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    lis=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split(<span class="hljs-string">&quot; &quot;</span>)))<br>    li.append((lis,<span class="hljs-built_in">sum</span>(lis)))<br>li.sort(key= <span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>])<br>A_li=[]<br>E_li=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> li:<span class="hljs-comment">#i-&gt;([10000, 10000, 10000], 30000)</span><br>    A_li.append(i[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]+i[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])<br>    E_li.append(i[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>])<br>temp=[A_li[<span class="hljs-number">0</span>]]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(li)):<br>    c=A_li[i]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>        c+=A_li[j]+E_li[j]<br>    temp.append(c)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(temp))<br></code></pre></td></tr></table></figure><h1 id="排队接水">排队接水</h1><h2 id="题目描述"><ahref="https://www.luogu.com.cn/problem/P1223">题目</a>描述</h2><p>有n个人在一个水龙头前排队接水，假如每个人接水的时间为Ti，请编程找出这 n个人排队的一种顺序，使得 n 个人的平均等待时间最小。</p><h2 id="输入格式-1">输入格式</h2><p>第一行为一个整数 n。</p><p>第二行 n个整数，第 i 个整数 Ti第 i个人的接水时间 Ti。</p><h2 id="输出格式-1">输出格式</h2><p>输出文件有两行，第一行为一种平均时间最短的排队顺序；第二行为这种排列方案下的平均等待时间（输出结果精确到小数点后两位）。</p><h2 id="样例-1">样例 #1</h2><h3 id="样例输入-1">样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><br><span class="hljs-symbol">56 </span><span class="hljs-number">12</span> <span class="hljs-number">1</span> <span class="hljs-number">99</span> <span class="hljs-number">1000</span> <span class="hljs-number">234</span> <span class="hljs-number">33</span> <span class="hljs-number">55</span> <span class="hljs-number">99</span> <span class="hljs-number">812</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1">样例输出 #1</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">9</span> <span class="hljs-number">6</span> <span class="hljs-number">10</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">291</span>.<span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><h2 id="code-1">Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>li1=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split(<span class="hljs-string">&quot; &quot;</span>)))<br>li=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(li1)):<br>    li.append((li1[i],i))<br>li.sort(key= <span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">0</span>])<br>order=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> li:<br>    order.append(i[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,order)))<br>wite_time=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(li)):<br>    a=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>        a+=li[j][<span class="hljs-number">0</span>]<br>    wite_time.append(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%.2f&quot;</span> % (<span class="hljs-built_in">sum</span>(wite_time)/n))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>货物摆放</title>
    <link href="/2024/03/04/%E8%B4%A7%E7%89%A9%E6%91%86%E6%94%BE/"/>
    <url>/2024/03/04/%E8%B4%A7%E7%89%A9%E6%91%86%E6%94%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="货物摆放">1463.货物摆放</h1><h2 id="题目">题目：</h2><h3 id="题目描述"><ahref="https://www.lanqiao.cn/problems/1463/learning">题目</a>描述</h3><p>小蓝有一个超大的仓库，可以摆放很多货物。现在，小蓝有n箱货物要摆放在仓库，每箱货物都是规则的正方体。小蓝规定了长、宽、高三个互相垂直的方向，每箱货物的边都必须严格平行于长、宽、高。</p><p>小蓝希望所有的货物最终摆成一个大的长方体。即在长、宽、高的方向上分别堆L、W、H的货物满足n=L×W×H。</p><p>给定n，请问有多少种堆放货物的方案满足要求？</p><p>例如，当n=4时，有以下6种方案:1×1×4、1×2×2、1×4×1、2×1×2、2×2×1、4×1×1。</p><h3 id="问题">问题</h3><p>请问，当n=2021041820210418（注意有16位数字）时，总共有多少种方案？</p><h3 id="提示">提示</h3><p>建议使用计算机编程解决问题。</p><h3 id="答案提交">答案提交</h3><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h2 id="my-answer">My Answer：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">factor</span>(<span class="hljs-params">num</span>):<br>    li = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(num, <span class="hljs-number">0.5</span>)) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> num % i == <span class="hljs-number">0</span>:<br>            li.append((i,<span class="hljs-built_in">int</span>(num / i)))<br>    <span class="hljs-keyword">return</span> li<br>num=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>times=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> factor(num):<br>    <span class="hljs-keyword">if</span> i[<span class="hljs-number">0</span>]!=<span class="hljs-number">1</span> :<br>        <span class="hljs-comment">#if i[0] * i[1] == num:</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> factor(i[<span class="hljs-number">1</span>]):<br>            <span class="hljs-comment">#print(i[0],j[0],j[1])</span><br>            <span class="hljs-keyword">if</span> i[<span class="hljs-number">0</span>]==j[<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span> j[<span class="hljs-number">0</span>]==j[<span class="hljs-number">1</span>] <span class="hljs-keyword">and</span> i[<span class="hljs-number">0</span>]==j[<span class="hljs-number">1</span>]:<br>                times+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                times+=<span class="hljs-number">3</span><br>            <span class="hljs-comment">#print(&quot;times:&quot;,times)</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment">#print(i[0],i[0],i[1])</span><br>        times += <span class="hljs-number">3</span><br>        <span class="hljs-comment">#print(&quot;times:&quot;, times)</span><br><span class="hljs-built_in">print</span>(times)<br></code></pre></td></tr></table></figure><h3 id="output">Output：</h3><p><strong><em>2021041820210418</em></strong> 2466</p><p>进程已结束，退出代码为 0</p><h2id="q正确答案是2430多的36个哪来的">Q：正确答案是2430，多的36个哪来的？</h2>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LanQiao</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指定时间刷新教务平台</title>
    <link href="/2024/03/02/%E6%8C%87%E5%AE%9A%E6%97%B6%E9%97%B4%E5%88%B7%E6%96%B0%E6%95%99%E5%8A%A1%E5%B9%B3%E5%8F%B0/"/>
    <url>/2024/03/02/%E6%8C%87%E5%AE%9A%E6%97%B6%E9%97%B4%E5%88%B7%E6%96%B0%E6%95%99%E5%8A%A1%E5%B9%B3%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="指定时间刷新教务平台">指定时间刷新教务平台</h1><p>人类有反应时间，但是机器没有!</p><h2 id="免责声明">免责声明</h2><p>本程序“指定时间刷新教务平台”在使用本程序进行评价时，请遵循以下免责条款：</p><p>1.非官方工具：本工具仅为学习交流使用而设计，并非由学校或任何官方机构开发和授权。使用本工具并不代表您获得了任何官方授权或支持。2.不得用于抢课：明确禁止用户将本工具用于抢课、选课或其他违反学校教务管理规定的行为。任何违反规定的行为，均可能导致您受到学校或相关机构的纪律处分。3.风险自负：使用本工具存在一定的风险，包括但不限于数据丢失、系统崩溃、网络延迟等。您应自行承担使用本工具所产生的所有风险和后果。4.不承担任何责任：对于因使用本工具而引发的任何直接或间接损失、损害或纠纷，包括但不限于课程选择失败、数据丢失、系统问题等，我们概不负责，也不承担任何法律责任。5.遵守法律法规：您应确保在使用本工具时遵守所有适用的法律法规，不得将本工具用于任何非法或侵犯他人权益的目的。6.学习交流用途：本工具仅供学习交流使用，不得用于任何商业或其他非学习交流的目的。鉴于以上免责声明，若用户在使用本程序过程中违反了以上任何一项规定，应自行承担相应的法律责任。在使用本程序之前，用户应仔细阅读并充分理解本免责声明的所有内容，一旦使用本程序，即表示已接受并同意本免责声明的所有条款。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ==UserScript==</span><br><span class="hljs-comment">// @name         New Userscript</span><br><span class="hljs-comment">// @namespace    http://tampermonkey.net/</span><br><span class="hljs-comment">// @version      2024-02-22</span><br><span class="hljs-comment">// @description  try to take over the world!</span><br><span class="hljs-comment">// @author       Ianwusb</span><br><span class="hljs-comment">// @match        http://zhjw.qfnu.edu.cn/jsxsd/framework/xsMain.jsp</span><br><span class="hljs-comment">// @icon         https://www.google.com/s2/favicons?sz=64&amp;domain=qfnu.edu.cn</span><br><span class="hljs-comment">// @grant        none</span><br><span class="hljs-comment">// ==/UserScript==</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkAndRefresh</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 指定9:00:00</span><br>    <span class="hljs-keyword">const</span> specifiedHours = <span class="hljs-number">9</span>;<br>    <span class="hljs-keyword">const</span> specifiedMinutes = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> specifiedSeconds = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">const</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-keyword">const</span> currentHours = now.<span class="hljs-title function_">getHours</span>();<br>    <span class="hljs-keyword">const</span> currentMinutes = now.<span class="hljs-title function_">getMinutes</span>();<br>    <span class="hljs-keyword">const</span> currentSeconds = now.<span class="hljs-title function_">getSeconds</span>();<br><br>    <span class="hljs-comment">// 检查当前时间是否达到指定的9:00:00</span><br>    <span class="hljs-keyword">if</span> (currentHours === specifiedHours &amp;&amp; currentMinutes === specifiedMinutes &amp;&amp; currentSeconds === specifiedSeconds) &#123;<br>        location.<span class="hljs-title function_">reload</span>(); <span class="hljs-comment">// 如果时间匹配，则刷新页面</span><br>    &#125;<br><br>    <span class="hljs-comment">// 每秒检查一次</span><br>    <span class="hljs-built_in">setTimeout</span>(checkAndRefresh, <span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-comment">// 开始检查</span><br><span class="hljs-title function_">checkAndRefresh</span>();<br></code></pre></td></tr></table></figure></p><h2 id="零基础使用教程">零基础使用教程</h2><p>1.打开Tampermonkey官网</p><p>2.点击“去商店”，页面跳转至对应浏览器扩展商店的安装页面，我们直接获取安装就好了</p><p>3.打开油猴插件，选择“添加新脚本”，将上面的代码复制粘贴上去，在“文件”点击“保存”即可</p><p>4.登录教管页面后等待到达指定时间即可</p>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>曲园</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VBS实现QQ自动发送早自习请假</title>
    <link href="/2024/03/02/VBS%E5%AE%9E%E7%8E%B0QQ%E8%87%AA%E5%8A%A8%E5%8F%91%E9%80%81%E6%97%A9%E8%87%AA%E4%B9%A0%E8%AF%B7%E5%81%87/"/>
    <url>/2024/03/02/VBS%E5%AE%9E%E7%8E%B0QQ%E8%87%AA%E5%8A%A8%E5%8F%91%E9%80%81%E6%97%A9%E8%87%AA%E4%B9%A0%E8%AF%B7%E5%81%87/</url>
    
    <content type="html"><![CDATA[<h1id="vbs实现qq自动发送早自习请假"><strong>VBS实现QQ自动发送早自习请假</strong></h1><p>是否你还在为早自习请假而犯愁，需要在凌晨6点前完成请假手续，导致无法好好休息，甚至需要提前起床？现在，有了这个教程，你可以轻松实现QQ自动发送早自习请假，不再为时间问题而纠结！跟随我们的步骤，一步步操作，让你轻松请假，享受更多休息时间！</p><h2 id="一配置"><strong>一．配置</strong></h2><ol type="1"><li>首先下载VBS文件：<ahref="http://47.104.64.75:82/abcd.vbs">http://47.104.64.75:82/abcd.vbs</a></li><li>请尝试运行，若出现报错，请下载：<ahref="http://47.104.64.75:82/wscript.exe">http://47.104.64.75:82/wscript.exe</a>，并将文件放在“C:”文件夹下</li><li>然后右键abcd.vbs文件，在记事本中编辑</li><li>将“你要说的话”替换为你的请假信息，注意！不要换行！</li><li>然后保存关闭</li><li>打开windows主页面，搜索“任务计划程序”并打开 按照图片进行操作： <ahref="https://www.picgo.net/image/%E5%9B%BE%E7%89%871.SUFKPM"><imgsrc="https://img.picgo.net/2024/03/01/143c09a0827263743.md.png"alt="143c09a0827263743.md.png" /></a> <ahref="https://www.picgo.net/image/%E5%9B%BE%E7%89%872.SUFcnA"><imgsrc="https://img.picgo.net/2024/03/01/202d3935ebac5d8f6.md.png"alt="202d3935ebac5d8f6.md.png" /></a> <ahref="https://www.picgo.net/image/%E5%9B%BE%E7%89%873.SUFiyJ"><imgsrc="https://img.picgo.net/2024/03/01/3a9377fe19813a6c1.md.png"alt="3a9377fe19813a6c1.md.png" /></a></li></ol><p>选择一个时间，注意！时间一定为过去的日期 <ahref="https://www.picgo.net/image/%E5%9B%BE%E7%89%874.SUF5Ir"><imgsrc="https://img.picgo.net/2024/03/01/4a915dc49bd0fc240.png"alt="4a915dc49bd0fc240.png" /></a> <ahref="https://www.picgo.net/image/%E5%9B%BE%E7%89%875.SUFCBm"><imgsrc="https://img.picgo.net/2024/03/01/5333a95cc4ce09f3b.png"alt="5333a95cc4ce09f3b.png" /></a> <ahref="https://www.picgo.net/image/%E5%9B%BE%E7%89%876.SUFIsb"><imgsrc="https://img.picgo.net/2024/03/01/63ff9d9fd43c9bc44.md.png"alt="63ff9d9fd43c9bc44.md.png" /></a></p><p>找到你的abcd.vbs文件的位置 <ahref="https://www.picgo.net/image/%E5%9B%BE%E7%89%877.SUFw6L"><imgsrc="https://img.picgo.net/2024/03/01/79cbef64d15fffeaf.md.png"alt="79cbef64d15fffeaf.md.png" /></a> <ahref="https://www.picgo.net/image/%E5%9B%BE%E7%89%878.SUF24O"><imgsrc="https://img.picgo.net/2024/03/01/8f2e1a26ba06de4ed.png"alt="8f2e1a26ba06de4ed.png" /></a> <ahref="https://www.picgo.net/image/%E5%9B%BE%E7%89%879.SUFjLK"><imgsrc="https://img.picgo.net/2024/03/01/9f3d0b8e394cecf27.md.png"alt="9f3d0b8e394cecf27.md.png" /></a> <ahref="https://www.picgo.net/image/%E5%9B%BE%E7%89%8710.SUFHRd"><imgsrc="https://img.picgo.net/2024/03/01/10e39d216ead509edc.md.png"alt="10e39d216ead509edc.md.png" /></a></p><ol start="7" type="1"><li>保存退出即可</li><li>打开文件管理器，上方输入“控制面板”，如图： <ahref="https://www.picgo.net/image/%E5%9B%BE%E7%89%8711.SUFT6c"><imgsrc="https://img.picgo.net/2024/03/01/11ade25b876c44da07.png"alt="11ade25b876c44da07.png" /></a></li></ol><p>回车后找到： <ahref="https://www.picgo.net/image/%E5%9B%BE%E7%89%8712.SUFJIY"><imgsrc="https://img.picgo.net/2024/03/01/120072b20b58e7f372.md.png"alt="120072b20b58e7f372.md.png" /></a> <ahref="https://www.picgo.net/image/%E5%9B%BE%E7%89%8713.SUFv8y"><imgsrc="https://img.picgo.net/2024/03/01/1351f86c251ca46e0b.md.png"alt="1351f86c251ca46e0b.md.png" /></a></p><h2 id="二使用"><strong>二．使用</strong></h2><p>睡觉前打开QQ的纪检请假专用聊天框，一定要保持在前台（即光标在输入区内），保持电脑打开，电量充足，然后就可以上床睡觉啦~</p><h2 id="三免责声明"><strong>三．免责声明</strong></h2><p>本软件/脚本“VBS实现QQ自动发送早自习请假”仅供学习交流使用，严禁用于任何非法或侵犯他人权益的目的。使用本软件/脚本，您应自行承担所有风险，包括但不限于账号安全、隐私泄露、法律纠纷等。</p><p><strong>重要提示：</strong></p><ol type="1"><li><strong>非法使用</strong>：本软件/脚本的任何非法使用，包括但不限于未经授权的自动化操作、恶意攻击他人系统、发送垃圾信息等，均属于违法行为，使用者将承担全部法律责任。</li><li><strong>账号安全</strong>：使用本软件/脚本可能导致您的QQ账号面临被封禁或其他安全风险。请确保您完全理解并接受这些风险。</li><li><strong>隐私泄露</strong>：在使用本软件/脚本时，您的个人信息（如QQ号、密码等）可能会暴露。请确保您在一个安全的环境中使用，并采取适当的保护措施。</li><li><strong>第三方责任</strong>：本软件/脚本的使用可能涉及第三方服务或平台。对于因使用本软件/脚本而导致的与第三方之间的任何纠纷或法律责任，本软件/脚本的开发者不承担任何责任。</li></ol><p><strong>开发者责任限制：</strong></p><ul><li>本软件/脚本的开发者对于因使用本软件/脚本而导致的任何直接或间接损失、损害、法律责任或纠纷，不承担任何责任。</li><li>开发者有权在不通知用户的情况下，对本软件/脚本进行更新、修改或终止服务。</li></ul><p><strong>用户义务：</strong></p><ul><li>用户应自行备份重要数据，并确保在使用本软件/脚本前已充分了解其功能和风险。</li><li>用户应遵守所有适用的法律法规，以及使用本软件/脚本所涉及的第三方平台或服务的规定。</li></ul><p><strong>最终解释权：</strong></p><p>本免责声明的最终解释权归本软件/脚本的开发者所有。如有任何疑问或需要进一步的解释，请通过合法途径联系开发者。</p>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>曲园</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python实现2024春晚魔术</title>
    <link href="/2024/03/02/python%E5%AE%9E%E7%8E%B02024%E6%98%A5%E6%99%9A%E9%AD%94%E6%9C%AF/"/>
    <url>/2024/03/02/python%E5%AE%9E%E7%8E%B02024%E6%98%A5%E6%99%9A%E9%AD%94%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<p><ahref="https://v3-web.douyinvod.com/3c1e474b8d4df958fbf013aa57c58070/65c8bfe9/video/tos/cn/tos-cn-ve-15/osMGgBg4NAIwlRDMSzeywvBxKhADfAc4wxWElO/?a=6383&amp;ch=26&amp;cr=3&amp;dr=0&amp;lr=all&amp;cd=0%7C0%7C0%7C3&amp;cv=1&amp;br=1884&amp;bt=1884&amp;cs=0&amp;ds=6&amp;ft=bvTKJbQQqUuqf_-0ao0ORVTYA0pia~IjejKJ-uAbH.0P3-I&amp;mime_type=video_mp4&amp;qs=1&amp;rc=M2doOjxnaDg0PGgzZTdoZkBpajRtZmg6Zmo1cTMzNGkzM0BhLzJeXzMtNjYxMmItYC0zYSNsZC5scjQwZTBgLS1kLTBzcw%3D%3D&amp;btag=e00038000&amp;dy_q=1707650891&amp;feature_id=46a7bb47b4fd1280f3d3825bf2b29388&amp;l=20240211192810EDE2CE676F39C84C7832">#央视龙年春晚魔术《守岁共此时》，邀请全国观众一起见证奇迹发生</a></p><h1 id="python实现2024春晚魔术">python实现2024春晚魔术</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br>cards=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>random.shuffle(cards)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打乱后的卡牌：&quot;</span>,cards)<br>cards=cards+cards<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;撕开的卡牌：&quot;</span>,cards)<br>name=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;姓名有几个字？&quot;</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(name):<br>    cards.append(cards.pop(<span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前卡牌；&quot;</span>,cards)<br>top_three_cards=cards[:<span class="hljs-number">3</span>]<br>else_cards=cards[<span class="hljs-number">3</span>:]<br>insert_index=random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)<br>cards=else_cards[:insert_index]+top_three_cards+else_cards[insert_index:]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前卡牌；&quot;</span>,cards)<br>top_card=cards.pop(<span class="hljs-number">0</span>)<br>region=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;你是南方人还是北方人？(“南”、“北”？)&quot;</span>)<br><span class="hljs-keyword">if</span> region == <span class="hljs-string">&quot;南&quot;</span>:<br>    insert_count = <span class="hljs-number">1</span><br><span class="hljs-keyword">elif</span> region == <span class="hljs-string">&quot;北&quot;</span>:<br>    insert_count = <span class="hljs-number">2</span><br><span class="hljs-keyword">else</span>:<br>    insert_count = <span class="hljs-number">3</span><br>top=cards[:insert_count]<br>else_cards=cards[insert_count:]<br>insert_index=random.randint(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(else_cards)-<span class="hljs-number">1</span>)<br>cards=else_cards[:insert_index]+top+else_cards[insert_index:]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前卡牌；&quot;</span>,cards)<br>gender=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;“男”/“女”？&quot;</span>)<br><span class="hljs-keyword">if</span> gender == <span class="hljs-string">&quot;男&quot;</span>:<br>    take_count = <span class="hljs-number">1</span><br><span class="hljs-keyword">elif</span> gender == <span class="hljs-string">&quot;女&quot;</span>:<br>    take_count = <span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(take_count):<br>    cards.pop(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;见证奇迹的时刻&quot;</span>)):<br>    cards.append(cards.pop(<span class="hljs-number">0</span>))<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    cards.append(cards.pop(<span class="hljs-number">0</span>))<br>    cards.pop(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(cards)==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(cards)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你刚才藏起来的牌是：&quot;</span>,top_card)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你手里剩下的牌是：&quot;</span>,cards[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;按任意键结束并关闭页面&quot;</span>)<br><span class="hljs-built_in">input</span>() <span class="hljs-comment"># 等待用户输入</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>有趣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>曲园半自动教评打分</title>
    <link href="/2024/03/02/%E6%9B%B2%E5%9B%AD%E5%8D%8A%E8%87%AA%E5%8A%A8%E6%95%99%E8%AF%84%E6%89%93%E5%88%86/"/>
    <url>/2024/03/02/%E6%9B%B2%E5%9B%AD%E5%8D%8A%E8%87%AA%E5%8A%A8%E6%95%99%E8%AF%84%E6%89%93%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="曲园半自动教评打分">曲园半自动教评打分</h1><p>给老师打分太麻烦了，问了师哥也没用全自动打分的油猴脚本，于是乎自己写了一个，目前只能算半自动</p><h2 id="免责声明"><strong>免责声明</strong></h2><p>本程序“曲园全自动教评打分”仅为辅助学生进行教师评价之用，所有评价数据及结果仅供参考。在使用本程序进行评价时，请遵循以下免责条款：</p><p>1.公正性：用户应公正、客观地使用本程序进行评价，不得因个人偏见、情绪或其他非客观因素影响评价结果。</p><p>2.准确性：用户应准确理解评价标准，确保评价内容真实、准确。若因用户输入错误或不实信息导致的评价结果偏差，本程序不承担任何责任。</p><p>3.具体性：用户在评价时应提供具体、详细的例子或事例，以便于其他用户更好地理解评价内容。</p><p>4.建设性：用户应对评价结果提供具体的、有益的建议或意见，以帮助改进教学质量。</p><p>5.尊重性：用户应对教师的付出和努力表示尊重，避免发表无谓的负面评价或攻击性言论。</p><p>鉴于以上免责声明，若用户在使用本程序过程中违反了以上任何一项规定，应自行承担相应的法律责任。本程序不对评价结果的真实性、准确性、公正性等承担任何形式的保证或担保。在使用本程序之前，用户应仔细阅读并充分理解本免责声明的所有内容，一旦使用本程序，即表示已接受并同意本免责声明的所有条款。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ==UserScript==</span><br><span class="hljs-comment">// @name         曲园全自动教评打分</span><br><span class="hljs-comment">// @namespace    http://example.com/</span><br><span class="hljs-comment">// @version      1.0</span><br><span class="hljs-comment">// @description  曲园全自动教评打分(声明见：https://www.luogu.com.cn/blog/ianwusb/quyuansoringauto)</span><br><span class="hljs-comment">// @author       ianwusb from(https://www.luogu.com.cn/blog/ianwusb/)</span><br><span class="hljs-comment">// @match        http://202.194.188.38/*</span><br><span class="hljs-comment">// @grant        none</span><br><span class="hljs-comment">// ==/UserScript==</span><br><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-string">&#x27;use strict&#x27;</span>;<br><br>    <span class="hljs-comment">// 指定要点击的元素的ID数组</span><br>    <span class="hljs-keyword">const</span> targetElementIds = [<span class="hljs-string">&#x27;pj0601id_2_2&#x27;</span>, <span class="hljs-string">&#x27;pj0601id_3_2&#x27;</span>, <span class="hljs-string">&#x27;pj0601id_4_2&#x27;</span>,<span class="hljs-string">&#x27;pj0601id_5_2&#x27;</span>,<span class="hljs-string">&#x27;pj0601id_6_2&#x27;</span>,<span class="hljs-string">&#x27;pj0601id_7_2&#x27;</span>,<span class="hljs-string">&#x27;pj0601id_8_2&#x27;</span>,<span class="hljs-string">&#x27;pj0601id_9_2&#x27;</span>,<span class="hljs-string">&#x27;pj0601id_10_2&#x27;</span>,<span class="hljs-string">&#x27;pj0601id_11_1&#x27;</span>]; <span class="hljs-comment">// 修改为你的目标元素ID数组</span><br><br>    <span class="hljs-comment">// 获取目标元素列表</span><br>    <span class="hljs-keyword">const</span> targetElements = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;#&#x27;</span> + targetElementIds.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;, #&#x27;</span>));<br><br>    <span class="hljs-comment">// 检查元素是否存在</span><br>    <span class="hljs-keyword">if</span> (targetElements.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 直接模拟点击所有目标元素的操作</span><br>        targetElements.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>) &#123;<br>            <span class="hljs-title function_">simulateClick</span>(element); <span class="hljs-comment">// 对每个目标元素执行模拟点击操作</span><br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Target elements not found&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 模拟鼠标点击元素的函数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">simulateClick</span>(<span class="hljs-params">element</span>) &#123;<br>        <span class="hljs-keyword">const</span> clickEvent = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createEvent</span>(<span class="hljs-string">&#x27;MouseEvents&#x27;</span>);<br>        clickEvent.<span class="hljs-title function_">initEvent</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 创建并初始化一个click事件对象</span><br>        element.<span class="hljs-title function_">dispatchEvent</span>(clickEvent); <span class="hljs-comment">// 在目标元素上触发click事件，模拟鼠标点击操作</span><br>    &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure><h2 id="零基础使用教程">零基础使用教程</h2><p>1.打开<ahref="https://www.tampermonkey.net/">Tampermonkey官网</a></p><p>2.点击“去商店”，页面跳转至对应浏览器扩展商店的安装页面，我们直接获取安装就好了</p><p>3.打开油猴插件，选择“添加新脚本”，将上面的代码复制粘贴上去，在“文件”点击“保存”即可</p><p>4.返回教管教评页面进入打分界面，点击提交即可</p><h3 id="有问题可在评论区评论">有问题可在评论区评论</h3>]]></content>
    
    
    <categories>
      
      <category>CodeWorld</category>
      
    </categories>
    
    
    <tags>
      
      <tag>曲园</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
